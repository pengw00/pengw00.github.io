<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pengw00&#39;s Tech Road</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pengw00.github.io/"/>
  <updated>2019-03-30T05:19:53.535Z</updated>
  <id>http://pengw00.github.io/</id>
  
  <author>
    <name>pengw00</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>factory pattern</title>
    <link href="http://pengw00.github.io/2019/03/29/factory-pattern/"/>
    <id>http://pengw00.github.io/2019/03/29/factory-pattern/</id>
    <published>2019-03-29T17:56:22.000Z</published>
    <updated>2019-03-30T05:19:53.535Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// A design without factory pattern </span><br><span class="line">#include &lt;iostream&gt; </span><br><span class="line">using namespace std; </span><br><span class="line">  </span><br><span class="line">// Library classes </span><br><span class="line">class Vehicle &#123; </span><br><span class="line">public: </span><br><span class="line">    virtual void printVehicle() = 0; </span><br><span class="line">&#125;; </span><br><span class="line">class TwoWheeler : public Vehicle &#123; </span><br><span class="line">public: </span><br><span class="line">    void printVehicle()  &#123; </span><br><span class="line">        cout &lt;&lt; &quot;I am two wheeler&quot; &lt;&lt; endl; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;; </span><br><span class="line">class FourWheeler : public Vehicle &#123; </span><br><span class="line">    public: </span><br><span class="line">    void printVehicle()  &#123; </span><br><span class="line">        cout &lt;&lt; &quot;I am four wheeler&quot; &lt;&lt; endl; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;; </span><br><span class="line">  </span><br><span class="line">// Client (or user) class </span><br><span class="line">class Client &#123; </span><br><span class="line">public: </span><br><span class="line">    Client(int type)  &#123; </span><br><span class="line">  </span><br><span class="line">        // Client explicitly creates classes according to type </span><br><span class="line">        if (type == 1) </span><br><span class="line">            pVehicle = new TwoWheeler(); </span><br><span class="line">        else if (type == 2) </span><br><span class="line">            pVehicle = new FourWheeler(); </span><br><span class="line">        else</span><br><span class="line">            pVehicle = NULL; </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    ~Client()   &#123; </span><br><span class="line">        if (pVehicle) </span><br><span class="line">        &#123; </span><br><span class="line">            delete[] pVehicle; </span><br><span class="line">            pVehicle = NULL; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    Vehicle* getVehicle() &#123; </span><br><span class="line">        return pVehicle; </span><br><span class="line">    &#125; </span><br><span class="line">private: </span><br><span class="line">    Vehicle *pVehicle; </span><br><span class="line">&#125;; </span><br><span class="line">  </span><br><span class="line">// Driver program </span><br><span class="line">int main() &#123; </span><br><span class="line">    Client *pClient = new Client(1); </span><br><span class="line">    Vehicle * pVehicle = pClient-&gt;getVehicle(); </span><br><span class="line">    pVehicle-&gt;printVehicle(); </span><br><span class="line">    return 0; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> What is the problems with above design?<br>As you must have observed in the above example, Client creates objects of either TwoWheeler or FourWheeler based on some input during constructing its object.<br>Say, library introduces a new class ThreeWheeler to incorporate three wheeler vehicles also. What would happen? Client will end up chaining a new else if in the conditional ladder to create objects of ThreeWheeler. Which in turn will need Client to be recompiled. So, each time a new change is made at the library side, Client would need to make some corresponding changes at its end and recompile the code. Sounds bad? This is a very bad practice of design.</p><p>How to avoid the problem?<br>The answer is, create a static (or factory) method. Let us see below code.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="Design pattern" scheme="http://pengw00.github.io/tags/Design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Design high quality React component</title>
    <link href="http://pengw00.github.io/2019/03/28/Design-high-quality-React-component/"/>
    <id>http://pengw00.github.io/2019/03/28/Design-high-quality-React-component/</id>
    <published>2019-03-28T15:55:48.000Z</published>
    <updated>2019-03-29T17:56:02.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Design-high-quality-React-component"><a href="#Design-high-quality-React-component" class="headerlink" title="Design high quality React component"></a>Design high quality React component</h1><p>作为一个合格的开发者，不要只满足于编写了可以运行的代码。而要了解代码背后的工作原理；不要只满足于自己的程序能够运行，还要让自己的代码可读而且易于维护。这样才能开发出高质量的软件.</p><h2 id="构建高质量React组件的原则和方法"><a href="#构建高质量React组件的原则和方法" class="headerlink" title="构建高质量React组件的原则和方法"></a>构建高质量React组件的原则和方法</h2><pre><code>### 划分组件边界的原则 ###### React组件的数据种类 ###### React组件的生命周期 ###</code></pre><p>React组件设计的基础知识，因为React应用都是围绕组件的设计，所以关于组件的设计介绍将贯穿全书.</p><p>我会继续用react，四点理由：第一，“继续”说明我17年就在用react，最熟悉。虽然vue我也熟悉，毕竟放了一年了。angular我确实不太熟悉。第二，react生态现在确实非常好。而且前端生态的下一步进展（全链路，设计开发打通，组件市场，在线ide什么的），目前看来基于react的探索居多，未来会有技术红利。第三，不得不承认jsx真是好用，模板scope和js scope合一，而且可以面向过程任意分解render函数。不得不说，jsx的设计思想我当时花了几个月才真正理解其高明。第四，react有一个3k大小的小兄弟叫preact，这个非常有用。因为我们有时候希望把组件打包成不依赖任何框架的内嵌模块发布，但是把框架打包进去，会很大。这时把组件适配到preact，把preact打包进去就好了。<br>作者：匿名用户<br>链接：<a href="https://www.zhihu.com/question/266823404/answer/409100494" target="_blank" rel="noopener">https://www.zhihu.com/question/266823404/answer/409100494</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Design-high-quality-React-component&quot;&gt;&lt;a href=&quot;#Design-high-quality-React-component&quot; class=&quot;headerlink&quot; title=&quot;Design high quality Re
      
    
    </summary>
    
    
      <category term="React" scheme="http://pengw00.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>props and state new example</title>
    <link href="http://pengw00.github.io/2019/03/28/props-and-state-new-example/"/>
    <id>http://pengw00.github.io/2019/03/28/props-and-state-new-example/</id>
    <published>2019-03-28T14:08:40.000Z</published>
    <updated>2019-03-28T14:29:45.505Z</updated>
    
    <content type="html"><![CDATA[<p>[转载]<a href="https://www.jianshu.com/p/3cb5026edee8" target="_blank" rel="noopener">https://www.jianshu.com/p/3cb5026edee8</a></p><ol><li><p>props传值，直接在组件初始化的时候赋予参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://zhangpeiyue.com/wp-content/uploads/2018/08/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://zhangpeiyue.com/wp-content/uploads/2018/08/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://zhangpeiyue.com/wp-content/uploads/2018/08/babel.min_.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;wrap&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">    class MyComponent extends React.Component &#123;</span><br><span class="line">        //此处的构造器是可以省略的</span><br><span class="line">        constructor(props)&#123;</span><br><span class="line">            super(props);</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            return &lt;div&gt;好神奇！ &#123;this.props.siteName&#125;!&lt;/div&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var element = &lt;MyComponent siteName=&quot;zhangpeiyue.com&quot;/&gt;;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        element,</span><br><span class="line">        document.querySelector(&quot;#wrap&quot;)</span><br><span class="line">    );</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过defaltProps 添加默认的props</p></li></ol><p>defaultProps是一个对象，放添加的值到defaultProps的属性中即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        //此处返回   &lt;div&gt;小张今年18岁了&lt;/div&gt;</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            &#123;this.props.userName&#125;今年&#123;this.props.age&#125;岁了！</span><br><span class="line">        &lt;/div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//为组件添加默认属性 userName与age</span><br><span class="line">MyComponent.defaultProps=&#123;</span><br><span class="line">    userName:&quot;小张&quot;,</span><br><span class="line">    age:18</span><br><span class="line">&#125;</span><br><span class="line">var element = &lt;MyComponent/&gt;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    element,</span><br><span class="line">    document.querySelector(&quot;#wrap&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><ol start="3"><li>可以通过父组件设置state，然后子组件通过props接收父组件的state值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        super();</span><br><span class="line">        //设置sate,添加name与age属性</span><br><span class="line">        this.state=&#123;</span><br><span class="line">            name:&quot;张培跃&quot;,</span><br><span class="line">            age:18</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            &lt;Name name=&#123;this.state.name&#125;/&gt;</span><br><span class="line">            &lt;Age age=&#123;this.state.age&#125;/&gt;</span><br><span class="line">        &lt;/div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//子组件Name</span><br><span class="line">class Name extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;div&gt;&#123;this.props.name&#125;&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//子组件Age</span><br><span class="line">class Age extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;div&gt;&#123;this.props.age&#125;&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var element = &lt;MyComponent/&gt;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    element,</span><br><span class="line">    document.querySelector(&quot;#wrap&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><p>4.使用propTypes进行类型检测</p><p>React提供了可以对Props进行验证的功能PropTypes。PropTypes为组件类自身的属性，提供了很多验证器，来验证传入的数据是否有效。当传入的数据无效时，JavaScript控制台会抛出警告。<br>另外需要注意的是，在开发环境下，当你使用了一个无效的值作为prop时，控件台会出现警告;在生产环境下，为了性能考虑会将PropTypes忽略掉！<br>要想使用propTypes,首先要对prop-type.js文件进行引入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://zhangpeiyue.com/wp-content/uploads/2018/08/prop-types.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>Example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var name=&quot;老大&quot;</span><br><span class="line">var age=18;</span><br><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            &#123;this.props.name&#125;今年&#123;this.props.age&#125;岁了！</span><br><span class="line">        &lt;/div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//propTypes是组件类的静态属性</span><br><span class="line">MyComponent.propTypes=&#123;</span><br><span class="line">    //将name设置为string类型</span><br><span class="line">    name:PropTypes.string,</span><br><span class="line">    //将age设置为number类型</span><br><span class="line">    age:PropTypes.number</span><br><span class="line">&#125;;</span><br><span class="line">var element = &lt;MyComponent name=&#123;name&#125; age=&#123;age&#125; /&gt;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    element,</span><br><span class="line">    document.querySelector(&quot;#wrap&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>以上示例当中的name与age不合法时，会弹出类型不符的警告！所以在项目开发中使用PropTypes进行对props的验证还是很有好处的！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">More Validator:</span><br><span class="line">MyComponent.propTypes = &#123;</span><br><span class="line">    // 可以声明 prop 为指定的 JS 基本数据类型，默认情况，这些数据是可选的</span><br><span class="line">   optionalArray: React.PropTypes.array,</span><br><span class="line">    optionalBool: React.PropTypes.bool,</span><br><span class="line">    optionalFunc: React.PropTypes.func,</span><br><span class="line">    optionalNumber: React.PropTypes.number,</span><br><span class="line">    optionalObject: React.PropTypes.object,</span><br><span class="line">    optionalString: React.PropTypes.string,</span><br><span class="line"> </span><br><span class="line">    // 可以被渲染的对象 numbers, strings, elements 或 array</span><br><span class="line">    optionalNode: React.PropTypes.node,</span><br><span class="line"> </span><br><span class="line">    //  React 元素</span><br><span class="line">    optionalElement: React.PropTypes.element,</span><br><span class="line"> </span><br><span class="line">    // 用 JS 的 instanceof 操作符声明 prop 为类的实例。</span><br><span class="line">    optionalMessage: React.PropTypes.instanceOf(Message),</span><br><span class="line"> </span><br><span class="line">    // 用 enum 来限制 prop 只接受指定的值。</span><br><span class="line">    optionalEnum: React.PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),</span><br><span class="line"> </span><br><span class="line">    // 可以是多个对象类型中的一个</span><br><span class="line">    optionalUnion: React.PropTypes.oneOfType([</span><br><span class="line">      React.PropTypes.string,</span><br><span class="line">      React.PropTypes.number,</span><br><span class="line">      React.PropTypes.instanceOf(Message)</span><br><span class="line">    ]),</span><br><span class="line"> </span><br><span class="line">    // 指定类型组成的数组</span><br><span class="line">    optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),</span><br><span class="line"> </span><br><span class="line">    // 指定类型的属性构成的对象</span><br><span class="line">    optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),</span><br><span class="line"> </span><br><span class="line">    // 特定 shape 参数的对象</span><br><span class="line">    optionalObjectWithShape: React.PropTypes.shape(&#123;</span><br><span class="line">      color: React.PropTypes.string,</span><br><span class="line">      fontSize: React.PropTypes.number</span><br><span class="line">    &#125;),</span><br><span class="line"> </span><br><span class="line">    // 任意类型加上 `isRequired` 来使 prop 不可空。</span><br><span class="line">    requiredFunc: React.PropTypes.func.isRequired,</span><br><span class="line"> </span><br><span class="line">    // 不可空的任意类型</span><br><span class="line">    requiredAny: React.PropTypes.any.isRequired,</span><br><span class="line"> </span><br><span class="line">    // 自定义验证器。如果验证失败需要返回一个 Error 对象。不要直接使用 `console.warn` 或抛异常，因为这样 `oneOfType` 会失效。</span><br><span class="line">    customProp: function(props, propName, componentName) &#123;</span><br><span class="line">      if (!/matchme/.test(props[propName])) &#123;</span><br><span class="line">        return new Error(&apos;Validation failed!&apos;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们来总结下,props与state的区别：</p><p>props是指组件间传递的一种方式，props自然也可以传递state。由于React的数据流是自上而下的，所以是从父组件向子组件进行传递；另外组件内部的this.props属性是只读的不可修改！<br>state是组件内部的状态（数据），不能够直接修改，必须要通过setState来改变值的状态，从而达到更新组件内部数据的作用。</p><p>props和state是经常要结合使用的，父组件的state可以转化为props来为子组件进行传值。在这种情况下，子组件接收的props是只读的，想要改变值，只能通过父组件的state对其进行更改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[转载]&lt;a href=&quot;https://www.jianshu.com/p/3cb5026edee8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/3cb5026edee8&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;
      
    
    </summary>
    
    
      <category term="React" scheme="http://pengw00.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 924. Minimize Malware Spread</title>
    <link href="http://pengw00.github.io/2019/03/28/leetcode-924-Minimize-Malware-Spread/"/>
    <id>http://pengw00.github.io/2019/03/28/leetcode-924-Minimize-Malware-Spread/</id>
    <published>2019-03-28T13:32:41.000Z</published>
    <updated>2019-03-28T13:33:37.024Z</updated>
    
    <content type="html"><![CDATA[<p>Union Find and bfs and dfs</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Union Find and bfs and dfs&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>props and constructor &amp;&amp; super sweetie</title>
    <link href="http://pengw00.github.io/2019/03/28/props-and-constructor-super-sweetie/"/>
    <id>http://pengw00.github.io/2019/03/28/props-and-constructor-super-sweetie/</id>
    <published>2019-03-28T04:57:36.000Z</published>
    <updated>2019-03-28T05:28:02.264Z</updated>
    
    <content type="html"><![CDATA[<p>Look at this post!</p><p><a href="https://www.cnblogs.com/faith3/p/9219446.html" target="_blank" rel="noopener">https://www.cnblogs.com/faith3/p/9219446.html</a><br><a href="https://www.jianshu.com/p/1b5e86c68458" target="_blank" rel="noopener">https://www.jianshu.com/p/1b5e86c68458</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Look at this post!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/faith3/p/9219446.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>get and post differ&#39;s</title>
    <link href="http://pengw00.github.io/2019/03/28/get-and-post-differ-s/"/>
    <id>http://pengw00.github.io/2019/03/28/get-and-post-differ-s/</id>
    <published>2019-03-28T04:26:37.000Z</published>
    <updated>2019-03-28T04:31:16.323Z</updated>
    
    <content type="html"><![CDATA[<p>GET和POST两种基本请求方法的区别</p><p>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数</p><p>你轻轻松松的给出了一个“标准答案”：</p><p>GET在浏览器回退时是无害的，而POST会再次提交请求。</p><p>GET产生的URL地址可以被Bookmark，而POST不可以。</p><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p><p>GET请求只能进行url编码，而POST支持多种编码方式。</p><p>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</p><p>GET请求在URL中传送的参数是有长度限制的，而POST么有。</p><p>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</p><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p><p>GET参数通过URL传递，POST放在Request body中。</p><p>让我们扒下GET和POST的外衣，坦诚相见吧！</p><p>GET和POST是什么？HTTP协议中的两种发送请求的方法。</p><p>HTTP是什么？HTTP是基于TCP/IP的关于数据如何在万维网中如何通信的协议。</p><p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。 </p><p>在我大万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在车顶上（url中）以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。</p><p>但是，我们只看到HTTP对GET和POST参数的传送渠道（url还是requrest body）提出了要求。“标准答案”里关于参数大小的限制又是从哪来的呢？</p><p>在我大万维网世界中，还有另一个重要的角色：运输公司。不同的浏览器（发起http请求）和服务器（接受http请求）就是不同的运输公司。 虽然理论上，你可以在车顶上无限的堆货物（url中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到哦。</p><p>好了，现在你知道，GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</p><p>我们的大BOSS还等着出场呢。。。</p><p>这位BOSS有多神秘？当你试图在网上找“GET和POST的区别”的时候，那些你会看到的搜索结果里，从没有提到他。他究竟是什么呢。。。</p><p>GET和POST还有一个重大区别，简单的说：</p><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>长的说：</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</p><p>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><p>也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。</p><p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p><ol><li><p>GET与POST都有自己的语义，不能随便混用。</p></li><li><p>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</p></li><li><p>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</p></li></ol><p>现在，当面试官再问你“GET与POST的区别”的时候，你的内心是不是这样的？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GET和POST两种基本请求方法的区别&lt;/p&gt;
&lt;p&gt;最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数&lt;/p&gt;
&lt;p&gt;你轻轻松松的给出了一个“标准答案”：&lt;/p&gt;
&lt;p&gt;GET在浏览器回退时是无害的，而POST会再次提交请求。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="http" scheme="http://pengw00.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>React Props and State</title>
    <link href="http://pengw00.github.io/2019/03/27/React-Props-and-State/"/>
    <id>http://pengw00.github.io/2019/03/27/React-Props-and-State/</id>
    <published>2019-03-28T03:12:33.000Z</published>
    <updated>2019-03-28T04:16:35.340Z</updated>
    
    <content type="html"><![CDATA[<p>@octocat :+1: Props looks great - it’s ready to mount! :shipit:</p><p>#</p><p>###The data in React flows from top to down(parent to child) and store in Props and state, when flow between cpmponnets it is in Props while in the component inside it is in the component. </p><p>###Props: for a component, it can acepts some params from outside, which is so called Props(either from parents or store). </p><p>###Property of Props: props used to decrate the component, so when the component is initialed and got instance, the props is unchangable and readable only. because when the props is changed during mounting the componet, if the props is changed, the component will be unpreditable.<br>所以只有通过父组件渲染方式才可以把props传进去。<br>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Item from &quot;./item&quot;;</span><br><span class="line">export default class ItemList extends React.Component&#123;</span><br><span class="line">  const itemList = data.map(item =&gt; &lt;Item item=item /&gt;);</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &#123;itemList&#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In the child Component:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default class Item extends React.Component&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;li&gt;&#123;this.props.item&#125;&lt;/li&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在render函数中可以看出，组件内部是使用this.props来获取传递到该组件的所有数据，它是一个对象，包含了所有你对这个组件的配置，现在只包含了一个item属性，所以通过this.props.item来获取即可。</p><p>默认参数<br>在组件中，我们最好为props中的参数设置一个defaultProps，并且制定它的类型。比如，这样：</p><p>##总结：props是一个从外部传进组件的参数，主要作为就是从父组件向子组件传递数据，它具有可读性和不变性，只能通过外部组件主动传入新的props来重新渲染子组件，否则子组件的props以及展现形式不会改变。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Item.defaultProps = &#123;</span><br><span class="line">  item: &apos;Hello Props&apos;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Item.propTypes = &#123;</span><br><span class="line">  item: PropTypes.string,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>关于propTypes，可以声明为以下几种类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">optionalArray: PropTypes.array,</span><br><span class="line">optionalBool: PropTypes.bool,</span><br><span class="line">optionalFunc: PropTypes.func,</span><br><span class="line">optionalNumber: PropTypes.number,</span><br><span class="line">optionalObject: PropTypes.object,</span><br><span class="line">optionalString: PropTypes.string,</span><br><span class="line">optionalSymbol: PropTypes.symbol,</span><br></pre></td></tr></table></figure></p><h2 id="what-about-state-State-is-similar-to-props-but-it-is-private-and-fully-controlled-by-the-component"><a href="#what-about-state-State-is-similar-to-props-but-it-is-private-and-fully-controlled-by-the-component" class="headerlink" title="what about state?? State is similar to props, but it is private and fully controlled by the component."></a>what about state?? State is similar to props, but it is private and fully controlled by the component.</h2><p>###一个组件的显示形态可以由数据状态和外部参数所决定，外部参数也就是props，而数据状态就是state<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export default class ItemList extends React.Component&#123;</span><br><span class="line">  constructor()&#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      itemList:&apos;一些数据&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &#123;this.state.itemList&#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先，在组件初始化的时候，通过this.state给组件设定一个初始的state，在第一次render的时候就会用这个数据来渲染组件。</p><p>state不同于props的一点是，state是可以被改变的。不过，不可以直接通过this.state=的方式来修改，而需要通过this.setState()方法来修改state。</p><p>比如，我们经常会通过异步操作来获取数据，我们需要在didMount阶段来执行异步操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  fetch(&apos;url&apos;)</span><br><span class="line">    .then(response =&gt; response.json())</span><br><span class="line">    .then((data) =&gt; &#123;</span><br><span class="line">      this.setState(&#123;itemList:item&#125;);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setState接受一个对象或者函数作为第一个参数，只需要传入需要更新的部分即可，不需要传入整个对象，比如:<br><figure class="highlight plain"><figcaption><span>default class ItemList extends React.Component&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  constructor()&#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      name:&apos;axuebin&apos;,</span><br><span class="line">      age:25,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    this.setState(&#123;age:18&#125;)  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在执行完setState之后的state应该是{name:’axuebin’,age:18}。</p><p>setState还可以接受第二个参数，它是一个函数，会在setState调用完成并且组件开始重新渲染时被调用，可以用来监听渲染是否完成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.setState(&#123;</span><br><span class="line">  name:&apos;xb&apos;</span><br><span class="line">&#125;,()=&gt;console.log(&apos;setState finished&apos;))</span><br></pre></td></tr></table></figure></p><p>##总结<br>state的主要作用是用于组件保存、控制以及修改自己的状态，它只能在constructor中初始化，它算是组件的私有属性，不可通过外部访问和修改，只能通过组件内部的this.setState来修改，修改state属性会导致组件的重新渲染</p><p>##Summary</p><p>###1.state是组件自己管理数据，控制自己的状态，可变；</p><p>###2.props是外部传入的数据参数，不可变；</p><p>###3.没有state的叫做无状态组件，有state的叫做有状态组件；</p><p>###4.多用props，少用state。也就是多写无状态组件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@octocat :+1: Props looks great - it’s ready to mount! :shipit:&lt;/p&gt;
&lt;p&gt;#&lt;/p&gt;
&lt;p&gt;###The data in React flows from top to down(parent to chi
      
    
    </summary>
    
    
      <category term="React" scheme="http://pengw00.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaBeans Definition</title>
    <link href="http://pengw00.github.io/2018/12/23/JavaBeans/"/>
    <id>http://pengw00.github.io/2018/12/23/JavaBeans/</id>
    <published>2018-12-24T00:24:58.000Z</published>
    <updated>2018-12-24T01:32:21.363Z</updated>
    
    <content type="html"><![CDATA[<p>Definition:<br>JavaBean 是一种JAVA语言写成的可重用组件。为写成JavaBean，类必须是具体的和公共的，并且具有无参数的构造器。JavaBean 通过提供符合一致性设计模式的公共方法将内部域暴露成员属性，long和class方法获取。众所周知，属性名称符合这种模式，其他Java 类可以通过自省机制发现和操作这些JavaBean 的属性。</p><p>Description:<br>JavaBean在MVC设计模型中是model，又称模型层，在一般的程序中，我们称它为数据层，就是用来设置数据的属性和一些行为，然后我会提供获取属性和设置属性的get/set方法.</p><p>MVC:<br>MVC的概念，即M-model-模型：JavaBean；V-view-表现：JSP页面；C-control-控制和处理：Servlet.</p><p>Disadvantage:<br>1.提高代码的可复用性：对于通用的事务处理逻辑，数据库操作等都可以封装在JavaBean中，通过调用JavaBean的属性和方法可快速进行程序设计。<br>    2.程序易于开发维护：实现逻辑的封装，使事务处理和显示互不干扰。<br>    3.支持分布式运用：多用JavaBean，尽量减少java代码和html的混编。<br>    4.可以便捷地传递数据</p><p>Rule: Javabean类必须是public类 2、提供给JSP页面的调用方法必须富裕public访问权限 3、bean中属性必须给get和set方法 4、必须由空构造方法.</p><p>Example: </p><p>package Server;</p><p>import java.io.Serializable;<br>public class Product implements Serializable<br>{<br>    private static final long serialVersionUID = 1L;<br>    private String product_id;<br>    private String product_name;<br>    private double price;<br>    private String info;</p><pre><code>public Product(){    super();}public void setPrice(double price) {    this.price = price;}public double getPrice() {    return price;}public void setInfo(String info) {    this.info = info;}public String getInfo() {    return info;}public void setProduct_id(String product_id) {    this.product_id = product_id;}public String getProduct_id() {    return product_id;}public void setProduct_name(String product_name) {    this.product_name = product_name;}public String getProduct_name() {    return product_name;}</code></pre><p>}<br>Example Usage: </p><p>在页面中要导入相应的Bean类，并用<a href="jsp:usebean" target="_blank" rel="noopener">jsp:usebean</a>标签获取Bean对象<br>＜jsp:useBean id=”自定义该Bean名字” class=”Bean类位置” scope=”Bean有效范围”/＞<br>Bean有效范围：page、request、session、application<br>设置Bean属性<a href="jsp:setProperty" target="_blank" rel="noopener">jsp:setProperty</a>，获取Bean属性<a href="jsp:getProperty" target="_blank" rel="noopener">jsp:getProperty</a><br>&lt;jsp:setProperty name=”Bean的id” property=”Bean类属性名” param=”表单参数名”/&gt;<br>&lt;jsp:getProperty property=”Bean类属性名” name=”Bean的id”/&gt;</p><p>Example:<br>&lt;%@ page language=”java” contentType=”text/html; charset=utf-8”<br>    pageEncoding=”utf-8”%&gt;<br>&lt;%@ page import=”java.util.*” %&gt;<br>&lt;%request.setCharacterEncoding(“utf-8”); %&gt;<br>&lt;jsp:useBean id=”product” class=”Server.Product” scope=”page” /&gt;<br>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN” “<a href="http://www.w3.org/TR/html4/loose.dtd&quot;&gt;" target="_blank" rel="noopener">http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</a></p><html><br><head><meta name="generator" content="Hexo 3.8.0"><br><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><br><title>通过表单参数设置Bean属性值</title><br></head><br><body><br><form action method="post"><br><br><br>输入产品名称：<input type="text" name="product_name"><br><br>输入产品编号：<input type="text" name="product_id"><br><br>输入产品价格：<input type="text" name="price"><br><br>输入产品信息：<input type="text" name="info"><br><br><input type="submit" value="提交"><br></form><br><!-- 设置product名称 --><br>&lt;jsp:setProperty property=”product_name” name=”product” value=”struts开发教程”/&gt;<br><br>产品名称是：<br><!-- 获取产品名称 --><br>&lt;jsp:getProperty property=”product_name” name=”product”/&gt;<br>&lt;%=product.getProduct_name() %&gt;<br><br><br><br><!-- 设置产品编号 --><br>&lt;jsp:setProperty property=”product_id” name=”product” value=”111100123689”/&gt;<br><br>产品编号是：<br><!-- 获取产品编号 --><br>&lt;jsp:getProperty property=”product_id” name=”product”/&gt;<br>&lt;%=product.getProduct_id() %&gt;<br><br><br><!-- 设置产品价格 --><br>&lt;%<br>double price=68.23;<br>%&gt;<br>&lt;jsp:setProperty property=”price” name=”product” value=”&lt;%=price +23.67%&gt;”/&gt;<br><br>产品价格是：<br><!-- 获取产品价格 --><br>&lt;jsp:getProperty property=”price” name=”product”/&gt;<br><br><br><br><!-- 设置产品信息 --><br>&lt;jsp:setProperty property=”info” name=”product” value=”Structs开发教程是一本介绍秿Struct的专业书籍….”/&gt;<br><br>产品信息：<br><!-- 获取产品信息 --><br>&lt;jsp:getProperty property=”info” name=”product”/&gt;<br></body><br></html><p>Cons:<br>其实所有的程序都可以写在jsp页面里，但是存在以下问题：<br>1、执行效率低下；<br>2、不安全，所有的程序都在jsp文件中可见，毫无知识保护可言；<br>3、逻辑混乱。这样让JSP文件的逻辑很难懂。<br>    于是提出了MVC模式，即将一些处理用的程序从JSP中分离出来，让JSP页面只负责显示，几乎是html，只不过可以动态的读取数据和进行少量的逻辑处理，比如循环、判断等。<br>    可能不举例说你还是不懂，我就举个最简单的例子——留言板。<br>    JSP的职责：从数据库取出数据，显示所有的留言信息（当中要用少量的，简单的逻辑处理：循环）、显示签写留言的页面（几乎全部都是html）。<br>    Servlet的职责：接受签写留言页面提交过来的标单数据，进行数据检验，如果正确，则存入数据库并返回留言的显示页面；如果数据有误，给出错误提示后返回签写留言的页面。可以看到，这个就叫做逻辑处理。这些你也完全可以放在JSP中实现，但是用Servlet，其效率和安全性高多了，也让JSP页面变得很简洁明了。<br>    JavaBean的职责：其实一般的留言板是不需要用到JavaBean的，但在这里，为了让你明白，还是牵强的把JavaBean用进来。所谓JavaBean，就是一个很简单的Java类，比如说，网上商城的所有商品是一个商品类，论坛中所有的帖子是一个帖子类，这里，留言板的所有留言是一个留言类，叫做Message类。每个类有着它特定的属性和方法。对于Message类，其属性有主题、内容、日期、留言者等，其方法可以有添加留言、删除留言、修改留言等。使用JavaBean，主要是为了让JSP编程能够适应Java程序员的习惯，直接对类和实例进行操作，而不是直接去操作数据库。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Definition:&lt;br&gt;JavaBean 是一种JAVA语言写成的可重用组件。为写成JavaBean，类必须是具体的和公共的，并且具有无参数的构造器。JavaBean 通过提供符合一致性设计模式的公共方法将内部域暴露成员属性，long和class方法获取。众所周知，属
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://pengw00.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JavaSpringApp</title>
    <link href="http://pengw00.github.io/2018/12/23/JavaSpringApp/"/>
    <id>http://pengw00.github.io/2018/12/23/JavaSpringApp/</id>
    <published>2018-12-23T21:20:46.000Z</published>
    <updated>2018-12-24T00:38:30.888Z</updated>
    
    <content type="html"><![CDATA[<p>Java Springframework简单模型：</p><ol><li>jar file: need to down load and put in the exernal lib file on local</li><li><p>xml: need to using Springframework to load and parsing into bean object</p></li><li><p>java 普通类: inject to beans</p></li><li>javabeans： The model level of MVC, provide get/set proberty</li><li>springframework: load jar file and xml file to be beans</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java Springframework简单模型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;jar file: need to down load and put in the exernal lib file on local&lt;/li&gt;
&lt;li&gt;&lt;p&gt;xml: need to usin
      
    
    </summary>
    
    
      <category term="Spring&amp;Java" scheme="http://pengw00.github.io/tags/Spring-Java/"/>
    
  </entry>
  
  <entry>
    <title>StdinStdout</title>
    <link href="http://pengw00.github.io/2018/11/07/StdinStdout/"/>
    <id>http://pengw00.github.io/2018/11/07/StdinStdout/</id>
    <published>2018-11-07T16:00:51.000Z</published>
    <updated>2018-11-07T17:04:59.544Z</updated>
    
    <content type="html"><![CDATA[<p>Interview Question for STDIN and STDOUT(java)</p><p>BufferedReader br = new BufferedReader(new InputStreamReader(System.in));<br>String = line br.readLine();<br>int N = Integer.parseInt(line);</p><p>or:<br>    Scanner n = new Scanner(System.in);<br>    int N = n.nextInt();<br>    and so one…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Interview Question for STDIN and STDOUT(java)&lt;/p&gt;
&lt;p&gt;BufferedReader br = new BufferedReader(new InputStreamReader(System.in));&lt;br&gt;String 
      
    
    </summary>
    
    
      <category term="hackrrank" scheme="http://pengw00.github.io/tags/hackrrank/"/>
    
  </entry>
  
  <entry>
    <title>KMP_algorithm</title>
    <link href="http://pengw00.github.io/2018/11/03/KMP-algorithm/"/>
    <id>http://pengw00.github.io/2018/11/03/KMP-algorithm/</id>
    <published>2018-11-04T03:38:34.000Z</published>
    <updated>2018-11-04T05:05:02.871Z</updated>
    
    <content type="html"><![CDATA[<p>//From<a href="https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/</a><br>KMP Algorithm for Pattern Searching<br>Given a text txt[0..n-1] and a pattern pat[0..m-1], write a function search(char pat[], char txt[]) that prints all occurrences of pat[] in txt[]. You may assume that n &gt; m.</p><p>Pattern searching is an important problem in computer science. When we do search for a string in notepad/word file or browser or database, pattern searching algorithms are used to show the search results.</p><p>We have discussed Naive pattern searching algorithm in the previous post. The worst case complexity of the Naive algorithm is O(m(n-m+1)). The time complexity of KMP algorithm is O(n) in the worst case.</p><p>Most important part is that: use a helper int[] to preprocess the pattern.<br>    Matching Overview<br>    txt = “AAAAABAAABA”<br>    pat = “AAAA”</p><pre><code>We compare first window of txt with pattxt = &quot;AAAAABAAABA&quot;pat = &quot;AAAA&quot;  [Initial position]We find a match. This is same as Naive String Matching.In the next step, we compare next window of txt with pat.    txt = &quot;AAAAABAAABA&quot;    pat =  &quot;AAAA&quot; [Pattern shifted one position]    This is where KMP does optimization over Naive. In this    second window, we only compare fourth A of pattern    with fourth character of current window of text to decide    whether current window matches or not. Since we know    first three characters will anyway match, we skipped    matching first three characters.Need of Preprocessing?    An important question arises from the above explanation,    how to know how many characters to be skipped. To know this,    we pre-process pattern and prepare an integer array    lps[] that tells us the count of characters to be skipped.</code></pre><p>//Preprocessing Overview:</p><p>KMP algorithm preprocesses pat[] and constructs an auxiliary lps[] of size m (same as size of pattern) which is used to skip characters while matching.<br>name lps indicates longest proper prefix which is also suffix.. A proper prefix is prefix with whole string not allowed. For example, prefixes of “ABC” are “”, “A”, “AB” and “ABC”. Proper prefixes are “”, “A” and “AB”. Suffixes of the string are “”, “C”, “BC” and “ABC”.<br>We search for lps in sub-patterns. More clearly we focus on sub-strings of patterns that are either prefix and suffix.<br>For each sub-pattern pat[0..i] where i = 0 to m-1, lps[i] stores length of the maximum matching proper prefix which is also a suffix of the sub-pattern pat[0..i].</p><p>//Note :<br>lps[i] could also be defined as longest prefix which is also proper suffix. We need to use properly at one place to make sure that the whole substring is not considered.<br>EX: Examples of lps[] construction:<br>For the pattern “AAAA”,<br>    lps[] is [0, 1, 2, 3]</p><pre><code>For the pattern “ABCDE”,lps[] is [0, 0, 0, 0, 0]For the pattern “AABAACAABAA”,lps[] is [0, 1, 0, 1, 2, 0, 1, 2, 3, 4, 5]For the pattern “AAACAAAAAC”,lps[] is [0, 1, 2, 0, 1, 2, 3, 3, 3, 4]For the pattern “AAABAAA”,lps[] is [0, 1, 2, 0, 1, 2, 3]</code></pre><p>Searching Algorithm:<br>    Unlike Naive algorithm, where we slide the pattern by one and compare all characters at each shift, we use a value from lps[] to decide the next characters to be matched. The idea is to not match a character that we know will anyway match.<br>    How to use lps[] to decide next positions (or to know a number of characters to be skipped)?</p><p>We start comparison of pat[j] with j = 0 with characters of current window of text.<br>    We keep matching characters txt[i] and pat[j] and keep incrementing i and j while pat[j] and txt[i] keep matching.<br>    When we see a mismatch<br>    We know that characters pat[0..j-1] match with txt[i-j+1…i-1] (Note that j starts with 0 and increment it only when there is a match).<br>    We also know (from above definition) that lps[j-1] is count of characters of pat[0…j-1] that are both proper prefix and suffix.<br>    From above two points, we can conclude that we do not need to match these lps[j-1] characters with txt[i-j…i-1] because we know that these characters will anyway match. Let us consider above example to understand this.</p><p>txt[] = “AAAAABAAABA”<br>pat[] = “AAAA”<br>lps[] = {0, 1, 2, 3}</p><p>i = 0, j = 0<br>txt[] = “AAAAABAAABA”<br>pat[] = “AAAA”<br>txt[i] and pat[j] match, do i++, j++</p><p>i = 1, j = 1<br>txt[] = “AAAAABAAABA”<br>pat[] = “AAAA”<br>txt[i] and pat[j] match, do i++, j++</p><p>i = 2, j = 2<br>txt[] = “AAAAABAAABA”<br>pat[] = “AAAA”<br>pat[i] and pat[j] match, do i++, j++</p><p>i = 3, j = 3<br>txt[] = “AAAAABAAABA”<br>pat[] = “AAAA”<br>txt[i] and pat[j] match, do i++, j++</p><p>i = 4, j = 4<br>Since j == M, print pattern found and reset j,<br>j = lps[j-1] = lps[3] = 3</p><p>Here unlike Naive algorithm, we do not match first three<br>characters of this window. Value of lps[j-1] (in above<br>step) gave us index of next character to match.<br>Example Process:<br>Most important thing here easy to understand<br>    i = 4, j = 3<br>    txt[] = “AAAAABAAABA”<br>    pat[] =  “AAAA”<br>    txt[i] and pat[j] match, do i++, j++</p><pre><code>i = 5, j = 4Since j == M, print pattern found and reset j,j = lps[j-1] = lps[3] = 3Again unlike Naive algorithm, we do not match first threecharacters of this window. Value of lps[j-1] (in abovestep) gave us index of next character to match.i = 5, j = 3txt[] = &quot;AAAAABAAABA&quot;pat[] =   &quot;AAAA&quot;txt[i] and pat[j] do NOT match and j &gt; 0, change only jj = lps[j-1] = lps[2] = 2i = 5, j = 2txt[] = &quot;AAAAABAAABA&quot;pat[] =    &quot;AAAA&quot;txt[i] and pat[j] do NOT match and j &gt; 0, change only jj = lps[j-1] = lps[1] = 1i = 5, j = 1txt[] = &quot;AAAAABAAABA&quot;pat[] =     &quot;AAAA&quot;txt[i] and pat[j] do NOT match and j &gt; 0, change only jj = lps[j-1] = lps[0] = 0i = 5, j = 0txt[] = &quot;AAAAABAAABA&quot;pat[] =      &quot;AAAA&quot;txt[i] and pat[j] do NOT match and j is 0, we do i++.i = 6, j = 0txt[] = &quot;AAAAABAAABA&quot;pat[] =       &quot;AAAA&quot;txt[i] and pat[j] match, do i++ and j++i = 7, j = 1txt[] = &quot;AAAAABAAABA&quot;pat[] =       &quot;AAAA&quot;txt[i] and pat[j] match, do i++ and j++</code></pre><p>We continue this way…<br>Don’t talk, Show the code:(java)<br>class KMP_String_Matching{<br>    void KMPSearch(String pat, String txt){<br>        int m = pat.length();<br>        int n = txt.length();<br>        int[] lps = new int[m]; //preprocess array<br>        computeLPSArray(pat, m, lps);<br>        int i = 0;<br>        while(i &lt; n){<br>            if(pat.charAt(j)==txt.charAt(i)){<br>                j++;<br>                i++;<br>                }<br>            if(j==m){<br>                System.out.println(“Found pattern at index”);<br>                j = lps[j-1];<br>            }<br>            else if(i &lt; N &amp;&amp; pat.charAt(j) != txt.charAt(i)){<br>                if(j != 0)<br>                    j = lps[j-1];<br>                else<br>                    i = i+1;<br>                }<br>            }<br>        }<br>    void computeLPSArray(String pat, int m, int lps[]){<br>        int len = 0;<br>        int i = 1;<br>        lps[0] = 0;<br>        while(i&lt;m){<br>            if(pat.charAt(i) == pat.charAt(len)){<br>                len++;<br>                lps[i] = len;<br>                i++;<br>            }else{<br>                if(len != 0){<br>                len = lps[len-1];<br>                }else{<br>                    lps[i] = len;<br>                    i++;<br>            }<br>        }<br>        }<br>    }<br>    public static void main(String args[]){<br>        String txt = “ABABDABACDABABCABAB”;<br>        String pat = “ABABCABAB”;<br>        new KMP_String_Matching().KMPSearch(pat, txt);<br>    }<br>    }</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;//From&lt;a href=&quot;https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.geeksforgee
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://pengw00.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>spring_depend_injection.md</title>
    <link href="http://pengw00.github.io/2018/11/01/spring-depend-injection-md/"/>
    <id>http://pengw00.github.io/2018/11/01/spring-depend-injection-md/</id>
    <published>2018-11-01T16:23:34.000Z</published>
    <updated>2018-11-01T17:34:03.119Z</updated>
    
    <content type="html"><![CDATA[<p>Two Types of Dependency injection types</p><ol><li>the setter injection<br>The setter injection is used to inject the dependencies through setter methods. In the following example, the instance of DataService uses the setter injection:<br>  public class BusinessServiceImpl {<pre><code>private DataService dataService;@Autowiredpublic void setDataService(DataService dataService) {  this.dataService = dataService;}</code></pre> }<br>Actually, in order to use the setter injection, you do not even need to declare a setter method. If you specify @Autowired on the variable, Spring automatically uses the setter injection. So, the following code is all that you need for the setter injection for DataService:<br> public class BusinessServiceImpl {<pre><code>@Autowiredprivate DataService dataService;</code></pre> }</li><li>the constructor injection</li></ol><p>The constructor injection, on the other hand, uses a constructor to inject dependencies. The following code shows how to use a constructor for injecting in DataService:<br>    public class BusinessServiceImpl {<br>        private DataService dataService;<br>        @Autowired<br>        public BusinessServiceImpl(DataService dataService) {<br>        super();<br>           this.dataService = dataService;<br>        }<br>    }<br>When you run the code with the preceding implementation of BusinessServiceImpl, you<br>will see this statement in the log, asserting that autowiring took place using the constructor:<br>       Autowiring by type from bean name ‘businessServiceImpl’ via<br>       constructor to bean named ‘dataServiceImpl’</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Two Types of Dependency injection types&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the setter injection&lt;br&gt;The setter injection is used to inject the dependencies thro
      
    
    </summary>
    
    
      <category term="From &lt;Mastering spring&gt;" scheme="http://pengw00.github.io/tags/From-Mastering-spring/"/>
    
  </entry>
  
  <entry>
    <title>Persistence</title>
    <link href="http://pengw00.github.io/2018/10/08/Persistence/"/>
    <id>http://pengw00.github.io/2018/10/08/Persistence/</id>
    <published>2018-10-08T20:57:08.000Z</published>
    <updated>2018-10-09T16:36:44.980Z</updated>
    
    <content type="html"><![CDATA[<p>Understanding the meaning of persistence is important for evaluating different data store system</p><p>Given the importance of the data store in most modern applications, making a poorly informed choice could mean substantial downtime or loss of data.</p><p>Persistence is “the continuance of an effect after its cause is removed”. In the context of storing data in a computer system, this means that the data survives after the process with which it was created has ended. In other words, for a data store to be considered persistent, it must write to non-volatile storage.</p><p>If you need persistence in your data store, then you need to also understand the four main design approaches that a data store can take and how (or if) these designs provide persistence:</p><p>Pure in-memory, no persistence at all, such as memcached or Scalaris<br>In-memory with periodic snapshots, such as Oracle Coherence or Redis<br>Disk-based with update-in-place writes, such as MySQL ISAM or MongoDB<br>Commitlog-based, such as all traditional OLTP databases (Oracle,<br>SQL Server, etc.)</p><p>In-memory approaches can achieve blazing speed, but at the cost of being limited to a relatively small data set. Most workloads have relatively small “hot” (active) subset of their total data; systems that require the whole dataset to fit in memory rather than just the active part are fine for caches but a bad fit for most other applications. Because the data is in memory only, it will not survive process termination. Therefore these types of data stores are not considered persistent.</p><p>The easiest way to add persistence to an in-memory system is with periodic snapshots to disk at a configurable interval. Thus, you can lose up to that interval’s worth of updates.</p><p>Update-in-place and commitlog-based systems store to non-volatile memory immediately, but only commitlog-based persistence provides Durability – the D in ACID – with every write persisted before success is returned to the client.<br>Reference from below link.<br><a href="https://www.datastax.com/dev/blog/what-persistence-and-why-does-it-matter" target="_blank" rel="noopener">https://www.datastax.com/dev/blog/what-persistence-and-why-does-it-matter</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Understanding the meaning of persistence is important for evaluating different data store system&lt;/p&gt;
&lt;p&gt;Given the importance of the data 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>maxcycle_subarray</title>
    <link href="http://pengw00.github.io/2018/10/08/maxcycle-subarray/"/>
    <id>http://pengw00.github.io/2018/10/08/maxcycle-subarray/</id>
    <published>2018-10-08T18:56:17.000Z</published>
    <updated>2018-10-08T19:56:17.538Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>leetcode260_singlenumberIII</title>
    <link href="http://pengw00.github.io/2018/09/20/leetcode260-singlenumberIII/"/>
    <id>http://pengw00.github.io/2018/09/20/leetcode260-singlenumberIII/</id>
    <published>2018-09-20T20:41:54.000Z</published>
    <updated>2018-09-20T21:50:17.275Z</updated>
    
    <content type="html"><![CDATA[<p>思路：所有🌲异或完后只剩下两个数的异或，把每个数理解为二进制数，在异或的结果上的每一个1的位置，两个素<br>总过出现的情况只能是0和1，如果都是0或都是1就不可能， 所有可以将异或结果和每个数二次异或分成两组，<br>每一个组必然包含单独一个数，异或就可以求出结果；<br>核心代码：<br>    diff &amp;= -diff; //取最高位的1，任意一个1就可以，注意diff是所有数异或以后的结果<br>    //second pass:<br>    for(int num: nums){<br>        if(num&amp;diff == 0){<br>            a ^= num;<br>        else{<br>            b ^= num;<br>    }<br>    }<br>    return {a, b};<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;思路：所有🌲异或完后只剩下两个数的异或，把每个数理解为二进制数，在异或的结果上的每一个1的位置，两个素&lt;br&gt;总过出现的情况只能是0和1，如果都是0或都是1就不可能， 所有可以将异或结果和每个数二次异或分成两组，&lt;br&gt;每一个组必然包含单独一个数，异或就可以求出结果；&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>lecture9.computerArchiture</title>
    <link href="http://pengw00.github.io/2018/09/19/lecture9-computerArchiture/"/>
    <id>http://pengw00.github.io/2018/09/19/lecture9-computerArchiture/</id>
    <published>2018-09-19T17:05:05.000Z</published>
    <updated>2018-09-19T18:32:37.483Z</updated>
    
    <content type="html"><![CDATA[<p>L1 split cache<br>multiple ports mean multiple access<br>cause larger overhead</p><p>eg: avoid hazard, multiple ports</p><p>mltiple exclusion and mutiple inclusion:<br>L1 and L2<br>L1 or L2</p><p>multiple level cache</p><ol><li>write through and write back<br>readhit: read hit time + miss penalty<br>read miss: read hit time + miss penalty<br>write hit: write hit time  + wirte time to lower level<br>wirte miss: write hit time + write time to lower level + read block from lower level</li></ol><ol start="2"><li><p>write through plus non-write allocate </p></li><li><p>write back and write allocate<br>read hit: read hit time<br>read miss: read hit time + miss penalty plus time to write dirty block if it is dirty</p></li></ol><p>write hit: </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;L1 split cache&lt;br&gt;multiple ports mean multiple access&lt;br&gt;cause larger overhead&lt;/p&gt;
&lt;p&gt;eg: avoid hazard, multiple ports&lt;/p&gt;
&lt;p&gt;mltiple exc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Daily KMP Algrithm</title>
    <link href="http://pengw00.github.io/2018/09/18/Daily-KMP-Algrithm/"/>
    <id>http://pengw00.github.io/2018/09/18/Daily-KMP-Algrithm/</id>
    <published>2018-09-18T19:46:00.000Z</published>
    <updated>2018-09-18T21:24:23.023Z</updated>
    
    <content type="html"><![CDATA[<p>problem1:<br>不匹配从不匹配点重新匹配，如果起始点和不匹配点之间有可以匹配的信息呢？？what happende？？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;problem1:&lt;br&gt;不匹配从不匹配点重新匹配，如果起始点和不匹配点之间有可以匹配的信息呢？？what happende？？&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://pengw00.github.io/2018/09/18/dailylearning/"/>
    <id>http://pengw00.github.io/2018/09/18/dailylearning/</id>
    <published>2018-09-18T19:09:37.865Z</published>
    <updated>2018-09-18T21:21:15.744Z</updated>
    
    <content type="html"><![CDATA[<p>add header and footer partials<br>add in bootstrap</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;add header and footer partials&lt;br&gt;add in bootstrap&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Daily Friday</title>
    <link href="http://pengw00.github.io/2018/09/14/Daily-Friday/"/>
    <id>http://pengw00.github.io/2018/09/14/Daily-Friday/</id>
    <published>2018-09-14T15:16:17.000Z</published>
    <updated>2018-09-14T16:33:08.990Z</updated>
    
    <content type="html"><![CDATA[<p>##秋雨绵绵顾自怜 独坐室中狂刷题</p><p>##管他日日笙箫起 我自地里刨根底<br>leetcode304. Range Sum Query 2D- Immutable</p><p>Example:<br>Given matrix = [<br>  [3, 0, 1, 4, 2],<br>  [5, 6, 3, 2, 1],<br>  [1, 2, 0, 1, 5],<br>  [4, 1, 0, 1, 7],<br>  [1, 0, 3, 0, 5]<br>]</p><p>sumRegion(2, 1, 4, 3) -&gt; 8<br>sumRegion(1, 1, 2, 2) -&gt; 11<br>sumRegion(1, 2, 2, 4) -&gt; 12</p><p>dp solution:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##秋雨绵绵顾自怜 独坐室中狂刷题&lt;/p&gt;
&lt;p&gt;##管他日日笙箫起 我自地里刨根底&lt;br&gt;leetcode304. Range Sum Query 2D- Immutable&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given matrix = [&lt;br&gt;  [3, 0, 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>leetcode.752 Open the lock</title>
    <link href="http://pengw00.github.io/2018/09/14/leetcode-752-Open-the-lock/"/>
    <id>http://pengw00.github.io/2018/09/14/leetcode-752-Open-the-lock/</id>
    <published>2018-09-14T04:02:30.000Z</published>
    <updated>2018-09-14T05:15:14.855Z</updated>
    
    <content type="html"><![CDATA[<p>##BFS + 剪枝 + 去重 经典dfs层次遍历<br>剪枝相当于backtrack 采用queque 和unordered_set<string> 减少遍历次数<br>可正转反转.</string></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##BFS + 剪枝 + 去重 经典dfs层次遍历&lt;br&gt;剪枝相当于backtrack 采用queque 和unordered_set&lt;string&gt; 减少遍历次数&lt;br&gt;可正转反转.&lt;/string&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
