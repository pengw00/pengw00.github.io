<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>David w00&#39;s Tech Road</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pengw00.github.io/"/>
  <updated>2019-06-12T04:23:05.960Z</updated>
  <id>http://pengw00.github.io/</id>
  
  <author>
    <name>David w00</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dry:Don&#39;t Repeat Yourself</title>
    <link href="http://pengw00.github.io/2019/06/11/Dry-Don-t-Repeat-Yourself/"/>
    <id>http://pengw00.github.io/2019/06/11/Dry-Don-t-Repeat-Yourself/</id>
    <published>2019-06-12T04:21:59.000Z</published>
    <updated>2019-06-12T04:23:05.960Z</updated>
    
    <content type="html"><![CDATA[<p>Don’t repeat yourself (DRY, or sometimes do not repeat yourself) is a principle of software development aimed at reducing repetition of software patterns,[1] replacing it with abstractions or using data normalization to avoid redundancy.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Don’t repeat yourself (DRY, or sometimes do not repeat yourself) is a principle of software development aimed at reducing repetition of s
      
    
    </summary>
    
    
      <category term="DesignPattern" scheme="http://pengw00.github.io/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 987. Vertical Order Traversal of a Binary Tree</title>
    <link href="http://pengw00.github.io/2019/06/09/Leetcode-987-Vertical-Order-Traversal-of-a-Binary-Tree/"/>
    <id>http://pengw00.github.io/2019/06/09/Leetcode-987-Vertical-Order-Traversal-of-a-Binary-Tree/</id>
    <published>2019-06-09T20:28:10.000Z</published>
    <updated>2019-06-09T19:28:10.254Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 146. LRU cache</title>
    <link href="http://pengw00.github.io/2019/06/09/Leetcode-146-LRU-cache/"/>
    <id>http://pengw00.github.io/2019/06/09/Leetcode-146-LRU-cache/</id>
    <published>2019-06-09T05:15:22.000Z</published>
    <updated>2019-06-09T04:15:22.111Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 967. Numbers With Same Consecutive Differences</title>
    <link href="http://pengw00.github.io/2019/06/08/Leetcode-967-Numbers-With-Same-Consecutive-Differences/"/>
    <id>http://pengw00.github.io/2019/06/08/Leetcode-967-Numbers-With-Same-Consecutive-Differences/</id>
    <published>2019-06-09T02:00:10.000Z</published>
    <updated>2019-06-09T02:14:00.799Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Solution 1</li></ul><p>Logic: BFS level by level, the previous level is diffrent from other level by the length, DP for state transformation. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Java:</span><br><span class="line">public int[] numsSameConsecDiff(int N, int K) &#123;</span><br><span class="line">        List&lt;Integer&gt; cur = Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);</span><br><span class="line">        for (int i = 2; i &lt;= N; ++i) &#123;</span><br><span class="line">            List&lt;Integer&gt; cur2 = new ArrayList&lt;&gt;();</span><br><span class="line">            for (int x : cur) &#123;</span><br><span class="line">                int y = x % 10;</span><br><span class="line">                if (x &gt; 0 &amp;&amp; y + K &lt; 10)</span><br><span class="line">                    cur2.add(x * 10 + y + K);</span><br><span class="line">                if (x &gt; 0 &amp;&amp; K &gt; 0 &amp;&amp; y - K &gt;= 0)</span><br><span class="line">                    cur2.add(x * 10 + y - K);</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur2;</span><br><span class="line">        &#125;</span><br><span class="line">        return cur.stream().mapToInt(j-&gt;j).toArray();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>C++:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; numsSameConsecDiff(int N, int K) &#123;</span><br><span class="line">        vector&lt;int&gt; cur = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 0&#125;;</span><br><span class="line">        for (int i = 2; i &lt;= N; ++i) &#123;</span><br><span class="line">            vector&lt;int&gt; cur2;</span><br><span class="line">            for (int x : cur) &#123;</span><br><span class="line">                int y = x % 10;</span><br><span class="line">                if (x &gt; 0 &amp;&amp; y + K &lt; 10)</span><br><span class="line">                    cur2.push_back(x * 10 + y + K);</span><br><span class="line">                if (x &gt; 0 &amp;&amp; K &gt; 0 &amp;&amp; y - K &gt;= 0)</span><br><span class="line">                    cur2.push_back(x * 10 + y - K);</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur2;</span><br><span class="line">        &#125;</span><br><span class="line">        return cur;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><ul><li>Solution 2: dfs find the path to construct a number and until all the number is added.</li></ul><p>Below are two different coding style for DFS. The point is that which one is more efficiency.<br>In C++ solution, it start from 1 to 9, and the dfs path is directly find the num+K or num-K, as goes further.<br>the Java solution start from the 0 case, and dfs by 0 to 9 check every possible case. </p><h5 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; numsSameConsecDiff(int N, int K)&#123;</span><br><span class="line">//base case from 1</span><br><span class="line">if(N==1) return &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;</span><br><span class="line">vector&lt;int&gt; res;</span><br><span class="line">//from 1 ... dfs, because 0 can not be in the front</span><br><span class="line">for(auto num = 1; num &lt;= 9; ++num)&#123;</span><br><span class="line">dfs(num, N-1, K, res);</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dfs method</span><br><span class="line">void dfs(int num, int N, int K, vector&lt;int&gt; &amp;res)&#123;</span><br><span class="line">//terinal cases</span><br><span class="line">if(N==0) res.push_back(num);</span><br><span class="line">else&#123;</span><br><span class="line">//two path to find the final possible number</span><br><span class="line">if(num%10 + K&lt;=9) dfs(num*10 + num%10 + K, N-1, K, res);</span><br><span class="line">if(nums10 -K &gt;= 0) dfs(nums*10 + num%10 -K, N-1, K, res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public int[] numsSameConsecDiff(int N, int K) &#123;</span><br><span class="line">        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        if(N==0)</span><br><span class="line">            return new int[0];</span><br><span class="line">        if(N==1)</span><br><span class="line">list.add(0);      // edge case</span><br><span class="line">        dfs(N, K, list, 0);</span><br><span class="line">        return list.stream().mapToInt(i-&gt;i).toArray();   //list.toArray(new int[list.size()]); doesn&apos;t work for primitives</span><br><span class="line">    &#125;</span><br><span class="line">    public void dfs(int N, int K, List&lt;Integer&gt; list, int number)&#123;</span><br><span class="line">        if(N == 0)&#123;   // base case, if you have added enough number of integers then append it to list; Here N is used as the total digits in temporary number </span><br><span class="line">            list.add(number);</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=0; i&lt;10; ++i)&#123;</span><br><span class="line">            if(i==0 &amp;&amp; number ==0)    // Do not add 0 at begining of a number</span><br><span class="line">                continue;</span><br><span class="line">            else if(number == 0 &amp;&amp; i!=0)&#123;     // base case, we add all the digits when we do not have any previous digit to check if difference = K</span><br><span class="line">                dfs(N-1, K, list, i);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                if(Math.abs((number%10) - i )==K)&#123;</span><br><span class="line">                    dfs(N-1, K, list, number*10+i);    // General dfs to add the digit at the units place and reducing the number of digits by 1.</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Solution 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logic: BFS level by level, the previous level is diffrent from other level by the length, DP for state tra
      
    
    </summary>
    
    
      <category term="leetcodeDynamicProgramming" scheme="http://pengw00.github.io/tags/leetcodeDynamicProgramming/"/>
    
  </entry>
  
  <entry>
    <title>Inorder traversal iterative solution for multiple questions for Leetcode BST problem</title>
    <link href="http://pengw00.github.io/2019/06/06/Inorder-traversal-iterative-solution-for-multiple-questions-for-Leetcode-BST-problem/"/>
    <id>http://pengw00.github.io/2019/06/06/Inorder-traversal-iterative-solution-for-multiple-questions-for-Leetcode-BST-problem/</id>
    <published>2019-06-06T18:18:20.000Z</published>
    <updated>2019-06-06T17:38:02.412Z</updated>
    
    <content type="html"><![CDATA[<ul><li>for tree inorder traversal, we have many different coding solution: recursion and iterative with stack mainly. </li></ul><h4 id="Iterative-stack-for-basic-inorder-traversal"><a href="#Iterative-stack-for-basic-inorder-traversal" class="headerlink" title="Iterative stack for basic inorder traversal"></a>Iterative stack for basic inorder traversal</h4><p>leetcode 94. Binary Tree Inorder Traversal</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Integer&gt; inorderTraversal(TreeNode root)&#123;</span><br><span class="line">List&lt;Integer&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">if(root == null) return res;</span><br><span class="line">Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</span><br><span class="line">while(root != null || !stack.empty())&#123;</span><br><span class="line">while(root != null)&#123;</span><br><span class="line">stack.push(root);</span><br><span class="line">root = root.left;</span><br><span class="line">&#125;</span><br><span class="line">root = stack.pop();</span><br><span class="line">res.add(root.val);</span><br><span class="line">root = root.right;</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Use this basic structure to find the kth smallest node<h6 id="Leetcode-230-Kth-Smallest-Element-in-a-BST"><a href="#Leetcode-230-Kth-Smallest-Element-in-a-BST" class="headerlink" title="Leetcode 230. Kth Smallest Element in a BST"></a>Leetcode 230. Kth Smallest Element in a BST</h6></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public int KthSmallest(TreeNode root, int k)&#123;</span><br><span class="line">Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</span><br><span class="line">while(root != null || !stack.isEmpty())&#123;</span><br><span class="line">//go all the way down to the left bottom if root is valid</span><br><span class="line">while(root != null)&#123;</span><br><span class="line">stack.push(root);</span><br><span class="line">root = root.left;</span><br><span class="line">&#125;</span><br><span class="line">//pop the top and get the value and then go the left</span><br><span class="line">root = stack.pop();</span><br><span class="line">if(--k == 0) break;</span><br><span class="line">root = root.right;</span><br><span class="line">&#125;</span><br><span class="line">return root.val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Leetcode-98-Validate-Binary-Search-Tree"><a href="#Leetcode-98-Validate-Binary-Search-Tree" class="headerlink" title="Leetcode 98. Validate Binary Search Tree"></a>Leetcode 98. Validate Binary Search Tree</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public boolean isValidBST(TreeNode root)&#123;</span><br><span class="line">if(root == null) return true;</span><br><span class="line">Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</span><br><span class="line">TreeNode pre = null;</span><br><span class="line">while(root != null || !stack.empty())&#123;</span><br><span class="line">while(root != null)&#123;</span><br><span class="line">stack.push(root);</span><br><span class="line">root = root.left;</span><br><span class="line">&#125;</span><br><span class="line">root = stack.pop();</span><br><span class="line">if(pre != null &amp;&amp; root.val &lt;= pre.val) return false;</span><br><span class="line">pre = root;</span><br><span class="line">root =root.right;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;for tree inorder traversal, we have many different coding solution: recursion and iterative with stack mainly. &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode.333 Largest BST Subtree</title>
    <link href="http://pengw00.github.io/2019/06/06/Leetcode-333-Largest-BST-Subtree/"/>
    <id>http://pengw00.github.io/2019/06/06/Leetcode-333-Largest-BST-Subtree/</id>
    <published>2019-06-06T16:22:40.000Z</published>
    <updated>2019-06-06T16:34:38.011Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it.</li></ul><p><strong> Note: </strong><br>A subtree must include all of its descendants.</p><h4 id="Similar-to-Leetcode-98"><a href="#Similar-to-Leetcode-98" class="headerlink" title="Similar to Leetcode.98"></a>Similar to Leetcode.98</h4><p><strong> Test Case </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: [10,5,15,1,8,null,7]</span><br><span class="line"></span><br><span class="line">   10 </span><br><span class="line">   / \ </span><br><span class="line">  5  15 </span><br><span class="line"> / \   \ </span><br><span class="line">1   8   7</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The Largest BST Subtree in this case is the highlighted one.</span><br><span class="line">             The return value is the subtree&apos;s size, which is 3.</span><br></pre></td></tr></table></figure></p><p><strong>Follow up:</strong><br>Can you figure out ways to solve it with O(n) time complexity?</p><p><strong> logic </strong> </p><ul><li><ol><li>dfs, get the information from bottom(top down), should return the max value in the left node and the min value in the right node.</li></ol></li><li><ol start="2"><li>a inner class is useful for the data</li></ol></li><li><p>inner class:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Res&#123;</span><br><span class="line">        int size;</span><br><span class="line">        int lower;</span><br><span class="line">        int upper;</span><br><span class="line">        Res(int size, int lower, int upper)&#123;</span><br><span class="line">            this.size = size;</span><br><span class="line">            this.lower = lower;</span><br><span class="line">            this.upper = upper;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>main method:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public int largestBSTSubtree(TreeNode root) &#123;</span><br><span class="line">        if(root==null) return 0;</span><br><span class="line">        dfs(root);</span><br><span class="line">        return max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>dfs treversal</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private Res dfs(TreeNode root)&#123;</span><br><span class="line">    //fullfill the tree rule but the size = 0</span><br><span class="line">    if(root==null) &#123;return new Res(0, Integer.MAX_VALUE, Integer.MIN_VALUE);&#125;</span><br><span class="line">    Res left = dfs(root.left);</span><br><span class="line">    Res right = dfs(root.right);</span><br><span class="line">    //not fullfill the tree rule and size = -1 and the lower and upper is 0;</span><br><span class="line">    if(left.size==-1 || right.size == -1 || root.val &lt;= left.upper || root.val &gt;= right.lower)</span><br><span class="line">        return new Res(-1, 0, 0);</span><br><span class="line">    int size = left.size + 1 + right.size;</span><br><span class="line">    max = Math.max(size, max);</span><br><span class="line">    return new Res(size, Math.min(left.lower, root.val), Math.max(right.upper, root.val));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>the other way is to use parent as para in the dfs instead of use max and min value.</p><h3 id="Leetcode-98-Validate-the-BST-tree"><a href="#Leetcode-98-Validate-the-BST-tree" class="headerlink" title="Leetcode.98 Validate the BST tree"></a>Leetcode.98 Validate the BST tree</h3><p>DFS search</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Solution&#123;</span><br><span class="line">    public boolean isValidBST(root, long minVal, long maxVal)&#123;</span><br><span class="line">        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    private boolean isValidBST(TreeNode root, long minVal, long maxVal)&#123;</span><br><span class="line">        if(root==null) return true;</span><br><span class="line">        if(root.val &gt;= maxVal || root.val &lt;= minVal) return false;</span><br><span class="line">        return isValidBST(root.left, minVal, root.val) &amp;&amp; isValidBST(root.right, root.val, maxVal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Design a transportation payment method</title>
    <link href="http://pengw00.github.io/2019/06/05/Design-a-transportation-payment-method/"/>
    <id>http://pengw00.github.io/2019/06/05/Design-a-transportation-payment-method/</id>
    <published>2019-06-05T17:30:09.000Z</published>
    <updated>2019-06-05T19:46:52.230Z</updated>
    
    <content type="html"><![CDATA[<p>For example design a payment system for New York’s MTA. Tell how you would handle thousands of requests per second. Also how will you handle the different notifications systems such as text alert. How would you handle faults? Was asked this on an onsite round.</p><p><a href="https://leetcode.com/discuss/interview-question/system-design/305388/design-a-transportation-payment-system" target="_blank" rel="noopener">https://leetcode.com/discuss/interview-question/system-design/305388/design-a-transportation-payment-system</a></p><h3 id="One-solution"><a href="#One-solution" class="headerlink" title="One solution"></a>One solution</h3><p>Basically you need to build two services, one to handle payment and one to handle notifications (can be email, whatsapp, text, etc.).</p><p>Payment system’s responsibility to only deduct the payment using any of the payment gateways and call notification service to notify client. Payment needs to be done real-time and you have to handle client request through some HTTP API, so that you can show gateway page, amount, confirmation etc. After user consent is given you process the payment and queue a message to notification system to send alert. For payments, you can use any noSQL database, since we don’t have any relation as such and you get fast read/write.</p><p>Notification service’s responsibility to notify users through channels. Notifications can be near realtime, so you can make use of queue/worker, so that you can autoscale your workers whenever there are more messages in queue. Workers are responsible for sending alerts. More workers you have, faster you process notifications to users. You can even distinguish different workers for different communication channel and scale them separately. As database you can use any noSQL, cause I don’t see any relation as such.</p><p>You should ask more specific questions to interviewer during system design rounds to understand the scenario better.</p><ul><li><p>Replies<br>using SQL or noSQL</p></li><li><p>For payments it needs to be SQL . you want to maintain consistency in such highly atomic operations.</p></li><li>Need backup servers and replica in case some application servers or database severs fail.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For example design a payment system for New York’s MTA. Tell how you would handle thousands of requests per second. Also how will you han
      
    
    </summary>
    
    
      <category term="SystemDesign" scheme="http://pengw00.github.io/tags/SystemDesign/"/>
    
  </entry>
  
  <entry>
    <title>Ways to center CSS element</title>
    <link href="http://pengw00.github.io/2019/06/05/Ways-to-center-CSS-element/"/>
    <id>http://pengw00.github.io/2019/06/05/Ways-to-center-CSS-element/</id>
    <published>2019-06-05T16:23:32.000Z</published>
    <updated>2019-06-06T01:37:26.379Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-Most-common-one-Use-parent-and-child-div-as-well-as-text-align-center"><a href="#1-Most-common-one-Use-parent-and-child-div-as-well-as-text-align-center" class="headerlink" title="1. Most common one, Use parent and child div as well as text-align: center"></a>1. Most common one, Use parent and child div as well as text-align: center</h4><p><em>first, enclose the div you want to center with a parent element(wrapper or containner)</em>second, set the text-align: center to the parent element. </p><ul><li>third, set the target div to display: inline-block.</li></ul><p>By default, the div dispaly property is block, which will span the div to the whole<br>width of the page. By setting the display to inline-block, it ensure the div to the width which we set. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.blue-square-container &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blue-square &#123;</span><br><span class="line">  background-color: #0074D9;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Margin-Auto-Method"><a href="#Margin-Auto-Method" class="headerlink" title="Margin Auto Method"></a>Margin Auto Method</h4><ul><li><p>do not need a parent element.</p><h6 id="simply-apply-“margin-0-auto”-to-our-yellow-box-as-long-as-we-have-a-defined-width"><a href="#simply-apply-“margin-0-auto”-to-our-yellow-box-as-long-as-we-have-a-defined-width" class="headerlink" title="simply apply “margin: 0 auto” to our yellow box, as long as we have a defined width."></a>simply apply “margin: 0 auto” to our yellow box, as long as we have a defined width.</h6></li><li><p>“margin: 0 auto” is shorthand for setting the top and bottom margins to zero, and the left and right margins to auto.</p></li></ul><p>The width is important, since without the width defined, the browser will not<br>able to render the left and right margins to center the element. By setting the width the vbrowser will automatically distribute the right amount of margin on either side of the element.</p><p>The “0” portion can be set to any number of pixels you want for the top and bottom margins.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.yellow-square &#123;</span><br><span class="line">  background-color: #FFDC00;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another cool trick is just setting either margin-left to auto or margin-right to auto, which allows us to push our div to either the right or left side of the page, respectively (give this a try!).</p><h4 id="Absolute-Positioning-Method"><a href="#Absolute-Positioning-Method" class="headerlink" title="Absolute Positioning Method"></a>Absolute Positioning Method</h4><p>Absolute positioning an element allows us to essentially place the element wherever we want it on the page…with one drawback.</p><h5 id="Absolute-positioning-removes-the-element-from-the-flow-of-the-page"><a href="#Absolute-positioning-removes-the-element-from-the-flow-of-the-page" class="headerlink" title="Absolute positioning removes the element from the flow of the page."></a>Absolute positioning removes the element from the flow of the page.</h5><p>there are three steps we need to remember:</p><ul><li>1.Set the element’s position property to absolute</li><li>2.Apply “left: 50%” to the element</li><li>3.Set a margin-left of half of the element’s width(negative adjust)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.green-square &#123;</span><br><span class="line">  background-color: #3D9970;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 50%;</span><br><span class="line">  margin-left: -50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Transform-Translate-Method"><a href="#Transform-Translate-Method" class="headerlink" title="Transform/Translate Method"></a>Transform/Translate Method</h4><p>*Up until now we’ve only dealt with centering things horizontally, but what if we want to put something right in the middle of the page? both horizontally and vertically.</p><ul><li>transform property set as translate can shift the x and y axios.</li></ul><p>so the code like this, set both the left and top edge to 50%; and shift negative -50% for both sides.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.red-square &#123;</span><br><span class="line">  background-color: #FF4136;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By setting the top property to 50% as well, I’m telling the browser to line up the top edge of our red square with the middle of the page vertically. But like in the previous example, we don’t want the edges to be lined up with the center, we want the center of our square to fit right on top of the center of our page.</p><p>There are many cool things you can do with transform, such as translating, rotating, and scaling animations, but for this example, we’ll be using translate.</p><p>We give the transform property “transform: translate(-50%, -50%)” and voila!</p><p>Our red square is centered both horizontally and vertically!</p><p>I love this method, because regardless of what the width or the height of our element is, it will always be in the center of the page.</p><p>This method is used frequently in responsive design and doesn’t require margins to be defined, like in the absolute positioning method.</p><h4 id="Flexbox-Method"><a href="#Flexbox-Method" class="headerlink" title="Flexbox Method"></a>Flexbox Method</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">html,</span><br><span class="line">body &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.purple-square-container &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.purple-square &#123;</span><br><span class="line">  background-color: #B10DC9;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The four steps to centering horizontally and vertically with Flexbox are the following:</p><ul><li>HTML, body, and parent container need to have a height of 100%</li><li>Set display to flex on parent container</li><li>Set align-items to center on parent container</li><li>Set justify-content to center on parent container</li></ul><p>Setting display to flex on the parent defines it as a flex container.</p><p>By setting align-items to center, we’re saying that the children or flex items are to be centered vertically within the parent.</p><p>Justify-content works in the same way, but in the horizontal direction for our example.</p><p>This method goes well because again, it’s both responsive and doesn’t require any margin calculations.</p><p>A tutorial about <a href="https://flexboxfroggy.com/" target="_blank" rel="noopener">flexbox</a></p><p><a href="https://www.freecodecamp.org/news/how-to-center-things-with-style-in-css-dc87b7542689/" target="_blank" rel="noopener">source link</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-Most-common-one-Use-parent-and-child-div-as-well-as-text-align-center&quot;&gt;&lt;a href=&quot;#1-Most-common-one-Use-parent-and-child-div-as-wel
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://pengw00.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Redux-starter-kit usage</title>
    <link href="http://pengw00.github.io/2019/06/05/Redux-starter-kit-usage/"/>
    <id>http://pengw00.github.io/2019/06/05/Redux-starter-kit-usage/</id>
    <published>2019-06-05T14:02:13.000Z</published>
    <updated>2019-06-05T14:41:28.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><ul><li>Use redux-starter-kit to general boilerplate code for redux to faster the development for react app. <h5 id="setup-store-is-anoying"><a href="#setup-store-is-anoying" class="headerlink" title="setup store is anoying"></a>setup store is anoying</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; applyMiddleware, compose, createStore &#125; from &apos;redux&apos;;</span><br><span class="line">import &#123; composeWithDevTools &#125; from &apos;redux-devtools-extension&apos;;</span><br><span class="line">import thunkMiddleware from &apos;redux-thunk&apos;</span><br><span class="line"></span><br><span class="line">import monitorReducersEnhancer from &apos;./enhancers/monitorReducers&apos;;</span><br><span class="line">import loggerMiddleware from &apos;./middleware/logger&apos;;</span><br><span class="line">import rootReducer from &apos;./reducers&apos;</span><br><span class="line"></span><br><span class="line">export default function configureStore(preloadedState) &#123;</span><br><span class="line">  const middlewares = [loggerMiddleware, thunkMiddleware];</span><br><span class="line">  const middlewareEnhancer = applyMiddleware(...middlewares);</span><br><span class="line"></span><br><span class="line">  const enhancers = [middlewareEnhancer, monitorReducersEnhancer];</span><br><span class="line">  const composedEnhancers = composeWithDevTools(...enhancers);</span><br><span class="line"></span><br><span class="line">  const store = createStore(rootReducer, preloadedState, composedEnhancers);</span><br><span class="line"></span><br><span class="line">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; module.hot) &#123;</span><br><span class="line">    module.hot.accept(&apos;./reducers&apos;, () =&gt; store.replaceReducer(rootReducer));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>typically you will first create the const action type and action creaters in two different file2.<br>For example: you have a container component that has a button that when clicked, dispatches an action thru a bound action creator. To see how Redux handles this action (e.g. state changes via reducer and side effect via middleware), you would typically do the following steps:</li></ol><p>Go to the file where the action creator was defined and see what action type constant is being used.<br>Go to the reducer file where the action type constant you found in the previous step is being used and see how the action is being handled via the switch statement in your reducer.<br>If you have a middleware like redux-saga, you would go to the saga file and also look for the the action-type constant and see how the action is being handled. Also in this file, you would normally see both the action type constant and action creator being imported.</p><h5 id="two-seperate-files-for-action-type-and-creaters"><a href="#two-seperate-files-for-action-type-and-creaters" class="headerlink" title="two seperate files for action type and creaters"></a>two seperate files for action type and creaters</h5><p>the first steps const and creaters is anoying, right?</p><p>What if you could skip step one and just use your action creator to handle an action in your reducers and middleware? What if you could reduce the amount of files that are being imported/used and just have one file that represents an action?</p><h5 id="Problem-Touching-4-files-to-implement-a-simple-state"><a href="#Problem-Touching-4-files-to-implement-a-simple-state" class="headerlink" title="Problem Touching 4 files to implement a simple state"></a>Problem Touching 4 files to implement a simple state</h5><p>Have you added a state in your component using redux and you end up touching constants.js, actions.js, reducer.js and container-component.js? What more if you have a middleware for side-effect like saga?</p><p>This process can be tedious for implementing things that are so simple. Also, having too many files just make your code fragmented that it ends up difficult to reason about.</p><p>What if you could increase cohesion by bundling these pieces together into an isolated, self-contained module?</p><h3 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h3><p>Addressing Problems above with Redux Starter Kit<br>Redux Starter Kit is a library created by the same team who maintains Redux, and it offers a set of tools to make using Redux easier. Now, let’s see how this library can solve the 3 problems we mentioned above.</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><ul><li>configureStore<br>Redux Starter Kit has a configureStore function that abstract a lot of boilerplate code (like we had on Problem #1) and adds some defaults to make setting up a Redux store a breeze</li></ul><p>Setup store will be like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; configureStore &#125; from &apos;redux-starter-kit&apos;;</span><br><span class="line">import rootReducer from &apos;./reducers&apos;;</span><br><span class="line"></span><br><span class="line">const store = configureStore(&#123; reducer: rootReducer &#125;); </span><br><span class="line"></span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></p><p>configureStore also allows you to pass some options so you could customize your store:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; configureStore, getDefaultMiddleware &#125; from &apos;redux-starter-kit&apos;;</span><br><span class="line">import monitorReducersEnhancer from &apos;./enhancers/monitorReducers&apos;; </span><br><span class="line">import loggerMiddleware from &apos;./middleware/logger&apos;;</span><br><span class="line">import rootReducer from &apos;./reducers&apos;;</span><br><span class="line"></span><br><span class="line">const store = configureStore(&#123; </span><br><span class="line">   reducer: rootReducer, </span><br><span class="line">   middleware: [loggerMiddleware, …getDefaultMiddleware()],</span><br><span class="line">   preloadedState, </span><br><span class="line">   enhancers: [monitorReducersEnhancer],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ul><li>createAction</li></ul><p>This library has a createAction function that combines action type and action creator declarations into one, so you don’t have to create 2 separate files (constant.js and some-action.js).</p><p>This function returns an action creator that exposes a .type property so you can use it in your reducer and middleware to handle dispatched action. Here is an example of have you would create an action creator using createAction and how you can use the .type property in a reducer and saga:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// todo-actions.js</span><br><span class="line">import &#123; createAction &#125; from &apos;redux-starter-kit&apos;;</span><br><span class="line"></span><br><span class="line">// Create an action creator</span><br><span class="line">export const addTodo = createAction(&apos;TODO/ADD_TODO&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// todo-reducers.js</span><br><span class="line">import &#123; addTodo &#125; from &apos;./todo-actions&apos;;</span><br><span class="line"></span><br><span class="line">export function todosReducer(state = [], action) &#123;</span><br><span class="line">  switch(action.type) &#123;</span><br><span class="line">    // Use the action creator&apos;s type property to handle action</span><br><span class="line">    case addTodo.type: </span><br><span class="line">      return state.concat(action.payload);   </span><br><span class="line">    default: </span><br><span class="line">      return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// todo-sagas.js</span><br><span class="line">import &#123; addTodo &#125; from &apos;./todo-actions&apos;;</span><br><span class="line"></span><br><span class="line">function* addTodoSaga(&#123; payload &#125;) &#123;</span><br><span class="line">  // Some side effects</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Use the action creator&apos;s type property to handle action</span><br><span class="line">export default takeLatest(addTodo.type, addTodoSaga);</span><br><span class="line">By getting rid of the constant file for your action type, we reduce the amount of mappings we have to make between your React component and your Redux files when debugging. Plus, less files to import!</span><br><span class="line"></span><br><span class="line">* Solution to Problem #3 — createSlice</span><br><span class="line"></span><br><span class="line">Redux Starter Kit has a createSlice that allows you to put together pieces in Redux that are logically related to each other into a module.</span><br><span class="line"></span><br><span class="line">Think of it as putting together pieces that works on a slice of state in the Redux state tree.</span><br><span class="line"></span><br><span class="line">Example:</span><br></pre></td></tr></table></figure><p>import { createSlice } from ‘redux-starter-kit’;</p><p>const todoSlice = createSlice({<br>  slice: ‘todos’,<br>  initialState: [],<br>  reducers: {<br>    addTodo(state, action) =&gt; [ …state, action.payload],<br>    removeTodo(state, action) =&gt; state.filter(todo =&gt; todo !== action.payload),<br>  },<br>});</p><p>// Extract the action creators object and the reducer<br>export const { actions, reducer } = todoSlice;</p><p>// Export the reducer, either as a default or named export<br>export default reducer;<br><code>`</code></p><p>Isn’t that better than creating 4 files for just a single state?</p><p>To know more about the concept behind createSlice, take a look at the “Redux Ducks” pattern.<br><a href="https://github.com/erikras/ducks-modular-redux" target="_blank" rel="noopener">https://github.com/erikras/ducks-modular-redux</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why?&quot;&gt;&lt;/a&gt;Why?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Use redux-starter-kit to general boilerplate code for redu
      
    
    </summary>
    
    
      <category term="Redux" scheme="http://pengw00.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode.485&amp;487&amp;1004 Max Consecutive One</title>
    <link href="http://pengw00.github.io/2019/06/04/Leetcode-485-487-1004-Max-Consecutive-One/"/>
    <id>http://pengw00.github.io/2019/06/04/Leetcode-485-487-1004-Max-Consecutive-One/</id>
    <published>2019-06-04T21:31:11.000Z</published>
    <updated>2019-06-04T21:38:39.536Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Max-Consecutive-One-serials"><a href="#Max-Consecutive-One-serials" class="headerlink" title="Max Consecutive One serials"></a>Max Consecutive One serials</h4><p>Find the longest consective subarray<br><em>Time: O(n)</em>Space: O(1) max and cur_max</p><p>*Leetcode.485 findMaxConsecutiveOnes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public int findMaxConsecutiveOnes(int[] nums)&#123;</span><br><span class="line">int max, cur_max;</span><br><span class="line">for(int i = 0; i &lt; nums.length; i++)&#123;</span><br><span class="line">max = Math.max(max, cur_max= nums[i]==0?0:cur_max+1);</span><br><span class="line">&#125;</span><br><span class="line">return max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Leetcode-487-findMaxConsecutiveOnesII"><a href="#Leetcode-487-findMaxConsecutiveOnesII" class="headerlink" title="Leetcode.487 findMaxConsecutiveOnesII"></a>Leetcode.487 findMaxConsecutiveOnesII</h4><ul><li>condition: if you can flip at most one 0.</li><li>Follow up: What if the input numbers come in one by one as an infinite stream? In other words, you can’t store all numbers coming from the stream as it’s too large to hold in memory. Could you solve it efficiently?</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int findMaxConsecutiveOnesII()&#123;</span><br><span class="line">int max = 0, zero = 0;</span><br><span class="line">for(int l = 0, h = 0; h &lt; nums.length; h++)&#123;</span><br><span class="line">if(nums[h] == 0) zero++;</span><br><span class="line">while(zero &gt; 1)&#123;</span><br><span class="line">if(nums[l++]==0)&#123;</span><br><span class="line">zero--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">max = Math.max(max, h-l+1);</span><br><span class="line">&#125;</span><br><span class="line">return max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Leetcode-1004-findMaxConsecutiveOnesIII"><a href="#Leetcode-1004-findMaxConsecutiveOnesIII" class="headerlink" title="Leetcode.1004 findMaxConsecutiveOnesIII"></a>Leetcode.1004 findMaxConsecutiveOnesIII</h4><ul><li>condition: if you can flip at most k times.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int findMaxConsecutiveOnes(int[] nums) &#123;</span><br><span class="line">        int max = 0, zero = 0, k = 1; // flip at most k zero</span><br><span class="line">        for (int l = 0, h = 0; h &lt; nums.length; h++) &#123;</span><br><span class="line">            if (nums[h] == 0)                                           </span><br><span class="line">                zero++;</span><br><span class="line">            while (zero &gt; k)</span><br><span class="line">                if (nums[l++] == 0)</span><br><span class="line">                    zero--;                                     </span><br><span class="line">            max = Math.max(max, h - l + 1);</span><br><span class="line">        &#125;                                                               </span><br><span class="line">        return max;             </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Max-Consecutive-One-serials&quot;&gt;&lt;a href=&quot;#Max-Consecutive-One-serials&quot; class=&quot;headerlink&quot; title=&quot;Max Consecutive One serials&quot;&gt;&lt;/a&gt;Max C
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode.272 Closest Binary Search</title>
    <link href="http://pengw00.github.io/2019/06/04/leetcode-272-Closest-Binary-Search/"/>
    <id>http://pengw00.github.io/2019/06/04/leetcode-272-Closest-Binary-Search/</id>
    <published>2019-06-04T19:38:40.000Z</published>
    <updated>2019-06-04T18:58:04.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dfs-amp-amp-stack-merge-sort-mothodology-for-the-optimal-solution"><a href="#dfs-amp-amp-stack-merge-sort-mothodology-for-the-optimal-solution" class="headerlink" title="dfs &amp;&amp; stack + merge sort mothodology for the optimal solution"></a>dfs &amp;&amp; stack + merge sort mothodology for the optimal solution</h1><ul><li>Analysis<br>Implement two stack, one store the value less than target in increase order by inorder dfs.</li></ul><p>like the root = [4, 2, 5, 1, 3], target = 3.3 =&gt; stack1: 1, 2, 3(top); stack2: 4, 5(top)</p><p>so the inorder basically has two version: </p><ul><li>right part, which get larger value. skip small value</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void inorder1(TreeNode root, double target, Stack&lt;Integer&gt; stack)&#123;</span><br><span class="line">if(root==null) return;</span><br><span class="line">//dfs traversal the right path</span><br><span class="line">inorder1(root.right, target, stack);</span><br><span class="line">// if the root value less then target, no need to go deeper since it is bst</span><br><span class="line">if(root.val &lt;= target) return;</span><br><span class="line">stack.push(root.val);</span><br><span class="line">inorder1(root.left, target, stack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>left part, get the small part, skip the bigger one.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void inorder2(TreeNode root, double target, Stack&lt;Integer&gt; stack)&#123;</span><br><span class="line">if(root==null) return;</span><br><span class="line">//dfs traversal the right path</span><br><span class="line">inorder1(root.left, target, stack);</span><br><span class="line">// if the root value less then target, no need to go deeper since it is bst</span><br><span class="line">if(root.val &gt; target) return;</span><br><span class="line">stack.push(root.val);</span><br><span class="line">inorder1(root.right, target, stack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Combine those two parts together since just the differ just focus on traversal order</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void inorder(TreeNode root, double target, boolean reverse, Stack&lt;Integer&gt; stack)&#123;</span><br><span class="line">        if(root == null) return;</span><br><span class="line">        inorder(reverse ? root.right:root.left, target, reverse, stack);</span><br><span class="line">        if((reverse &amp;&amp; root.val&lt;=target) || (!reverse &amp;&amp; root.val &gt; target)) return;</span><br><span class="line">        stack.push(root.val);</span><br><span class="line">        inorder(reverse ? root.left : root.right, target, reverse, stack);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>Final solution: </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;Integer&gt; closestKValues(TreeNode root, double target, int k) &#123;</span><br><span class="line">        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; s1 = new Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; s2 = new Stack&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        inorder1(root, target, s1);</span><br><span class="line">        inorder2(root,target, s2);</span><br><span class="line">        // inorder(root, target, false, s1);</span><br><span class="line">        // inorder(root, target, true, s2);</span><br><span class="line">        </span><br><span class="line">        while(k-- &gt; 0)&#123;</span><br><span class="line">            if(s1.isEmpty()) res.add(s2.pop());</span><br><span class="line">            else if(s2.isEmpty()) res.add(s1.pop());</span><br><span class="line">            else if(Math.abs(s1.peek() - target) &lt; Math.abs(s2.peek() - target)) res.add(s1.pop());</span><br><span class="line">            else res.add(s2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void inorder(TreeNode root, double target, boolean reverse, Stack&lt;Integer&gt; stack)&#123;</span><br><span class="line">        if(root == null) return;</span><br><span class="line">        inorder(reverse ? root.right:root.left, target, reverse, stack);</span><br><span class="line">        if((reverse &amp;&amp; root.val&lt;=target) || (!reverse &amp;&amp; root.val &gt; target)) return;</span><br><span class="line">        stack.push(root.val);</span><br><span class="line">        inorder(reverse ? root.left : root.right, target, reverse, stack);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void inorder1(TreeNode root, double target, Stack&lt;Integer&gt; stack)&#123;</span><br><span class="line">        if(root==null) return;</span><br><span class="line">        inorder1(root.right, target, stack);</span><br><span class="line">        if(root.val&lt;=target) return;</span><br><span class="line">        stack.push(root.val);</span><br><span class="line">        inorder1(root.left, target, stack);</span><br><span class="line">    &#125;</span><br><span class="line">    private void inorder2(TreeNode root, double target, Stack&lt;Integer&gt; stack)&#123;</span><br><span class="line">        if(root==null) return;</span><br><span class="line">        inorder2(root.left, target, stack);</span><br><span class="line">        if(root.val&gt;target) return;</span><br><span class="line">        stack.push(root.val);</span><br><span class="line">        inorder2(root.right, target, stack);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dfs-amp-amp-stack-merge-sort-mothodology-for-the-optimal-solution&quot;&gt;&lt;a href=&quot;#dfs-amp-amp-stack-merge-sort-mothodology-for-the-optima
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ Help Decouple System</title>
    <link href="http://pengw00.github.io/2019/06/04/ActiveMQ-Help-Decouple-System/"/>
    <id>http://pengw00.github.io/2019/06/04/ActiveMQ-Help-Decouple-System/</id>
    <published>2019-06-04T18:34:47.000Z</published>
    <updated>2019-06-04T17:37:33.756Z</updated>
    
    <content type="html"><![CDATA[<ol><li>应用1：异步处理才能应用解耦<br>用户注册后发送邮件/短信<br>传统:50+50+50<br>MQ异步处理：50+5</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;应用1：异步处理才能应用解耦&lt;br&gt;用户注册后发送邮件/短信&lt;br&gt;传统:50+50+50&lt;br&gt;MQ异步处理：50+5&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
      <category term="ActiveMQ" scheme="http://pengw00.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Contest 139</title>
    <link href="http://pengw00.github.io/2019/06/01/Leetcode-Contest-139/"/>
    <id>http://pengw00.github.io/2019/06/01/Leetcode-Contest-139/</id>
    <published>2019-06-02T04:56:09.000Z</published>
    <updated>2019-06-02T03:57:07.914Z</updated>
    
    <content type="html"><![CDATA[<ul><li><ol start="1071"><li>Greatest Common Divisor of Strings</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;ol start=&quot;1071&quot;&gt;
&lt;li&gt;Greatest Common Divisor of Strings&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Responsive Web Design I</title>
    <link href="http://pengw00.github.io/2019/06/01/Responsive-Web-Design-I/"/>
    <id>http://pengw00.github.io/2019/06/01/Responsive-Web-Design-I/</id>
    <published>2019-06-01T19:12:53.000Z</published>
    <updated>2019-06-01T18:16:58.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li>From Phone -&gt; tablet -&gt; Desktop: why? differ from person to person. </li><li>Boostrap Grid System (3D)</li><li>Flex box (2D), need to combine with Bootstrap Grid System. </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips&quot;&gt;&lt;/a&gt;Tips&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;From Phone -&amp;gt; tablet -&amp;gt; Desktop: why? differ from 
      
    
    </summary>
    
    
      <category term="ResponsiveWebDesign" scheme="http://pengw00.github.io/tags/ResponsiveWebDesign/"/>
    
  </entry>
  
  <entry>
    <title>leetcode.201 Word Search II</title>
    <link href="http://pengw00.github.io/2019/06/01/leetcode-201-Word-Search-II/"/>
    <id>http://pengw00.github.io/2019/06/01/leetcode-201-Word-Search-II/</id>
    <published>2019-06-01T17:16:45.000Z</published>
    <updated>2019-06-01T17:41:37.728Z</updated>
    
    <content type="html"><![CDATA[<p>*Check whether a word in a board</p><ul><li>Solution1: backtracking || dfs</li><li>Solution2: Trie<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class solution1&#123;</span><br><span class="line">Set&lt;String&gt; res = new HashSet&lt;&gt;();</span><br><span class="line">public List&lt;String&gt; findWords(char[][] board, String[] words)&#123;</span><br><span class="line">if(!res.contains(word) &amp;&amp; exist(board, word))&#123;</span><br><span class="line">res.add(word);</span><br><span class="line">&#125;</span><br><span class="line">return new ArrayList&lt;&gt;(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private boolean exist(char[][] board, String word)&#123;</span><br><span class="line">int m = board.length;</span><br><span class="line">int n = board[0].length;</span><br><span class="line">boolean[][] visisted = new boolean[m][n];</span><br><span class="line">for(int i = 0; i &lt; m; i++)&#123;</span><br><span class="line">for(int j = 0; j &lt; n; j++)&#123;</span><br><span class="line">if(dfs(board, i, j, word, 0, visited)) return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">private boolean dfs(char[][] board, int i, int j, String word, int index, boolean[][] visited)&#123;</span><br><span class="line">if(index == word.length())&#123; return true;</span><br><span class="line">boolean ret = false;</span><br><span class="line">if(dfs(board, i+1, j, word, index+1, visited) || dfs(board, i-1, j, index +1, visited) ||</span><br><span class="line">dfs(board, i, j+1, word, index+1, visited) || dfs(board, i, j-1, index + 1, visited) || </span><br><span class="line">dfs(board, i, j-1, word, index+1, visited)) ret = true;</span><br><span class="line">visited[i][j] = false;</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">private boolean inboard(char[][] board, int i, int j)&#123;</span><br><span class="line">return i &gt;= 0 &amp;&amp; i &lt; board.length &amp;&amp; j &gt;= 0 &amp;&amp; j &lt;board[0].length;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Solution2: trie + dfs + backtracking</p><ul><li>Trie implementation<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">class TrieNode &#123;</span><br><span class="line">public TrieNode[] children = new TrieNode[26];</span><br><span class="line">public String item = &quot;&quot;;</span><br><span class="line">public TrieNode()&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Trie()&#123;</span><br><span class="line">private TrieNode root;</span><br><span class="line">public Trie()&#123;</span><br><span class="line">root = new TrieNode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//insert method -&gt; like data preprocess</span><br><span class="line">public void insert(String word)&#123;</span><br><span class="line">TrieNode node = root;</span><br><span class="line">for(char c: word.toCharArray())&#123;</span><br><span class="line">if(node.children[c-&apos;a&apos;]==null)&#123;</span><br><span class="line">node.children[c-&apos;a&apos;] = new TrieNode();</span><br><span class="line">&#125;</span><br><span class="line">node = node.children[c-&apos;a&apos;];</span><br><span class="line">&#125;</span><br><span class="line">node.item = word; // the last node with the word</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean search(String word)&#123;</span><br><span class="line">TrieNode node = root;</span><br><span class="line">for(char c: word.toCharArray())&#123;</span><br><span class="line">if(node.children[c-&apos;a&apos;]==null) return false;</span><br><span class="line">node = node.children[c-&apos;a&apos;];</span><br><span class="line">&#125;</span><br><span class="line">//at the end, check the item == word</span><br><span class="line">return node.item.equals(word);</span><br><span class="line">&#125;</span><br><span class="line">//check whether there is any word in the trie which start with the given prefix</span><br><span class="line">public boolean startsWith(String prefix)&#123;</span><br><span class="line">TrieNode node =root;</span><br><span class="line">for(char c: prefix.toCharArray())&#123;</span><br><span class="line">if(node.children[c-&apos;a&apos;]==null) return false;</span><br><span class="line">node = node.children[c-&apos;a&apos;];</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="solution-II"><a href="#solution-II" class="headerlink" title="solution II"></a>solution II</h3><p>using trie, the time complexity got decreased while the space will be cratically increased!<br>so, when the words is big, the memory space limited will be hit!<br>Trie can be used in small dataset with a high performance!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class solutionII&#123;</span><br><span class="line">Set&lt;String&gt; res = new HashSet&lt;String&gt;();</span><br><span class="line">public List&lt;String&gt; findwords(char[][] board, String[] words)&#123;</span><br><span class="line">Trie trie = new Trie();</span><br><span class="line">for(String word: words)&#123;</span><br><span class="line">trie.insert(word);</span><br><span class="line">&#125;</span><br><span class="line">int m = board.length;</span><br><span class="line">int n = board[0].length;</span><br><span class="line">boolean[][] visited = new boolean[m][n];</span><br><span class="line">for(int i = 0; i &lt; m; i++)&#123;</span><br><span class="line">for(int j = 0; j &lt; n; j++)&#123;</span><br><span class="line">dfs(board, visited, &quot;&quot;, i, j, trie);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return new ArrayList&lt;String&gt;(res);</span><br><span class="line">&#125;</span><br><span class="line">private void dfs(char[][] board, boolean[][] visited, String str, int x, int y, Trie trie)&#123;</span><br><span class="line">if (x &lt; 0 || x &gt;= board.length || y &lt; 0 || y &gt;= board[0].length) return;</span><br><span class="line">        if (visited[x][y]) return;</span><br><span class="line"></span><br><span class="line">        str += board[x][y];</span><br><span class="line">        if(!trie.startsWith(str)) return;</span><br><span class="line">        if(trie.search(str))&#123;</span><br><span class="line">        res.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        //still backtrack</span><br><span class="line">        visited[x][y] = true;</span><br><span class="line">        dfs(board, visited, str, x - 1, y, trie);</span><br><span class="line">        dfs(board, visited, str, x + 1, y, trie);</span><br><span class="line">        dfs(board, visited, str, x, y - 1, trie);</span><br><span class="line">        dfs(board, visited, str, x, y + 1, trie);</span><br><span class="line">        visited[x][y] = false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;*Check whether a word in a board&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solution1: backtracking || dfs&lt;/li&gt;
&lt;li&gt;Solution2: Trie&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1033.Move Stones Until Consecutive</title>
    <link href="http://pengw00.github.io/2019/06/01/leetcode1033-Move-Stones-Until-Consecutive/"/>
    <id>http://pengw00.github.io/2019/06/01/leetcode1033-Move-Stones-Until-Consecutive/</id>
    <published>2019-06-01T13:23:59.000Z</published>
    <updated>2019-06-01T12:30:34.407Z</updated>
    
    <content type="html"><![CDATA[<p>Catogory: Brainteaser</p><p>-Edge case 1: all three stones are next to each other (z - x == 2). Return {0, 0}.<br>-Edge case 2: two stones are next to each other, or there is only one space in between. Minimum moves is 1.</p><p>-Otherwise; minimum moves are 2, maximum - z - x - 2.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; numMovesStones(int a, int b, int c) &#123;</span><br><span class="line">  vector&lt;int&gt; s = &#123; a, b, c &#125;;</span><br><span class="line">  sort(begin(s), end(s));</span><br><span class="line">  if (s[2] - s[0] == 2) return &#123; 0, 0 &#125;;</span><br><span class="line">  return &#123; min(s[1] - s[0], s[2] - s[1]) &lt;= 2 ? 1 : 2, s[2] - s[0] - 2 &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Catogory: Brainteaser&lt;/p&gt;
&lt;p&gt;-Edge case 1: all three stones are next to each other (z - x == 2). Return {0, 0}.&lt;br&gt;-Edge case 2: two ston
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>ACM/ICPC Road Map</title>
    <link href="http://pengw00.github.io/2019/05/31/ACM-ICPC-Road-Map/"/>
    <id>http://pengw00.github.io/2019/05/31/ACM-ICPC-Road-Map/</id>
    <published>2019-05-31T19:00:45.000Z</published>
    <updated>2019-06-01T03:36:49.782Z</updated>
    
    <content type="html"><![CDATA[<h3 id="The-necessary-Topics-and-Algorithms"><a href="#The-necessary-Topics-and-Algorithms" class="headerlink" title="The necessary Topics and Algorithms."></a>The necessary Topics and Algorithms.</h3><p><img src="https://github.com/pengw00/pengw00.github.io/raw/master/image/Competitive-Programming.jpg" alt="image"></p><h4 id="Elementary-Data-structure"><a href="#Elementary-Data-structure" class="headerlink" title="Elementary Data structure"></a>Elementary Data structure</h4><ul><li>array</li><li>stack</li><li>queue</li><li>string</li><li>heap</li><li>hash</li></ul><h4 id="Advanced-Data-Structrue"><a href="#Advanced-Data-Structrue" class="headerlink" title="Advanced Data Structrue"></a>Advanced Data Structrue</h4><ul><li>Priority Queue</li><li>Binary Indexed Tree or Fenwick Tree</li><li>Segment Tree(RMQ, Range Sum and Lazy Propagation)</li><li>K-D tree(insert, minimum, delete)</li><li>Union Find Disjoint Set(cycle Detection and by range or path compression)</li><li>Tries</li><li>Interval Tree</li></ul><h4 id="Sorting-and-Search"><a href="#Sorting-and-Search" class="headerlink" title="Sorting and Search"></a>Sorting and Search</h4><ul><li>binary Search</li><li>Qucik Sort(Quick Select)</li><li>Merge Sort</li><li>Order Statistics</li></ul><h4 id="String-Manipulation"><a href="#String-Manipulation" class="headerlink" title="String Manipulation"></a>String Manipulation</h4><ul><li>KMP algorithm</li><li>Rabin Karp</li><li>Z’s algorithm</li><li>Aho Corasick String Matching</li></ul><h4 id="C-skillset"><a href="#C-skillset" class="headerlink" title="C++ skillset"></a>C++ skillset</h4><h4 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Longest Common Subsequence</span><br><span class="line">Longest Increasing Subsequence</span><br><span class="line">Edit Distance</span><br><span class="line">Minimum Partition</span><br><span class="line">Ways to Cover a Distance</span><br><span class="line">Longest Path In Matrix</span><br><span class="line">Subset Sum Problem</span><br><span class="line">Optimal Strategy for a Game</span><br><span class="line">0-1 Knapsack Problem</span><br><span class="line">Assembly Line Scheduling</span><br><span class="line">Optimal Binary Search Tree</span><br></pre></td></tr></table></figure><h4 id="backtracking"><a href="#backtracking" class="headerlink" title="backtracking"></a>backtracking</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Rat in a Maze</span><br><span class="line">N Queen Problem</span><br><span class="line">Subset Sum</span><br><span class="line">m Coloring Problem</span><br><span class="line">Hamiltonian Cycle</span><br></pre></td></tr></table></figure><h4 id="Graph-Algorithms"><a href="#Graph-Algorithms" class="headerlink" title="Graph Algorithms"></a>Graph Algorithms</h4><p>One of the most important topic which you can not ignore if preparing for ACM – ICPC.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Breadth First Search (BFS)</span><br><span class="line">Depth First Search (DFS)</span><br><span class="line">Shortest Path from source to all vertices **Dijkstra**</span><br><span class="line">Shortest Path from every vertex to every other vertex **Floyd Warshall**</span><br><span class="line">Minimum Spanning tree **Prim**</span><br><span class="line">Minimum Spanning tree **Kruskal**</span><br><span class="line">Topological Sort</span><br><span class="line">Johnson’s algorithm</span><br><span class="line">Articulation Points (or Cut Vertices) in a Graph</span><br><span class="line">Bridges in a graph</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;The-necessary-Topics-and-Algorithms&quot;&gt;&lt;a href=&quot;#The-necessary-Topics-and-Algorithms&quot; class=&quot;headerlink&quot; title=&quot;The necessary Topics a
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://pengw00.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>stepsToBuildSpringbootRESTAPI</title>
    <link href="http://pengw00.github.io/2019/05/31/stepsToBuildSpringbootRESTAPI/"/>
    <id>http://pengw00.github.io/2019/05/31/stepsToBuildSpringbootRESTAPI/</id>
    <published>2019-05-31T15:47:31.000Z</published>
    <updated>2019-05-31T16:14:01.276Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Using <a href="http://start.spring.io" target="_blank" rel="noopener">http://start.spring.io</a> to initialize: web, jpa, mysql, devtools for basic dependency</p></li><li><p>Configure application.properties file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">## Spring DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</span><br><span class="line">spring.datasource.url = jdbc:mysql://localhost:3306/notes_app?useSSL=false</span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Hibernate Properties</span><br><span class="line"># The SQL dialect makes Hibernate generate better SQL for the chosen database</span><br><span class="line">spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="line"></span><br><span class="line"># Hibernate ddl auto (create, create-drop, validate, update)</span><br><span class="line">spring.jpa.hibernate.ddl-auto = update</span><br></pre></td></tr></table></figure></li></ul><p>The last two properties are for hibernate. Spring Boot uses Hibernate as the default JPA implementation.</p><p>The property spring.jpa.hibernate.ddl-auto is used for database initialization. I’ve used the value “update” for this property.</p><p>It does two things -</p><ul><li><p>When you define a domain model, a table will automatically be created in the database and the fields of the domain model will be mapped to the corresponding columns in the table.</p></li><li><p>Any change to the domain model will also trigger an update to the table. For example, If you change the name or type of a field, or add another field to the model, then all these changes will be reflected in the mapped table as well.</p></li></ul><p>Using update for spring.jpa.hibernate.ddl-auto property is fine for development. But, For production, You should keep the value of this property to “validate”, and use a database migration tool like Flyway for managing changes in the database schema.</p><ul><li>Set up data model mapping to table</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.example.easynotes.model;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonIgnoreProperties;</span><br><span class="line">import org.springframework.data.annotation.CreatedDate;</span><br><span class="line">import org.springframework.data.annotation.LastModifiedDate;</span><br><span class="line">import org.springframework.data.jpa.domain.support.AuditingEntityListener;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import javax.validation.constraints.NotBlank;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">@Table(name = &quot;notes&quot;)</span><br><span class="line">@EntityListeners(AuditingEntityListener.class)</span><br><span class="line">@JsonIgnoreProperties(value = &#123;&quot;createdAt&quot;, &quot;updatedAt&quot;&#125;, </span><br><span class="line">        allowGetters = true)</span><br><span class="line">public class Note implements Serializable &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="line">    private Long id;</span><br><span class="line"></span><br><span class="line">    @NotBlank</span><br><span class="line">    private String title;</span><br><span class="line"></span><br><span class="line">    @NotBlank</span><br><span class="line">    private String content;</span><br><span class="line"></span><br><span class="line">    @Column(nullable = false, updatable = false)</span><br><span class="line">    @Temporal(TemporalType.TIMESTAMP)</span><br><span class="line">    @CreatedDate</span><br><span class="line">    private Date createdAt;</span><br><span class="line"></span><br><span class="line">    @Column(nullable = false)</span><br><span class="line">    @Temporal(TemporalType.TIMESTAMP)</span><br><span class="line">    @LastModifiedDate</span><br><span class="line">    private Date updatedAt;</span><br><span class="line"></span><br><span class="line">    // Getters and Setters ... (Omitted for brevity)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>annotated createdAt and updatedAt fields with @CreatedDate and @LastModifiedDate annotations respectively.</p><p>what we want is that these fields should automatically get populated whenever we create or update an entity.</p><p>To achieve this, we need to do two things -</p><ol><li><p>Add Spring Data JPA’s AuditingEntityListener to the domain model.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EntityListeners(AuditingEntityListener.class)</span><br></pre></td></tr></table></figure></li><li><p>Enable JPA Auditing in the main application.</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.example.easynotes;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.data.jpa.repository.config.EnableJpaAuditing;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableJpaAuditing</span><br><span class="line">public class EasyNotesApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(EasyNotesApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Creating-NoteRepository-to-access-data-from-the-database"><a href="#Creating-NoteRepository-to-access-data-from-the-database" class="headerlink" title="Creating NoteRepository to access data from the database"></a>Creating NoteRepository to access data from the database</h3><ol><li>Spring Data JPA with paRepository interface with methods for CRUD operations, First, Create a new package called repository inside the base package com.example.easynotes. Then, create an interface called NoteRepository and extend it from JpaRepository.<br>This is different from nodejs or golang. but why we need this interface. apparently it give us the method, which manipulate the java object in a collection. in mongodb, it is the schema!</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.example.easynotes.repository;</span><br><span class="line"></span><br><span class="line">import com.example.easynotes.model.Note;</span><br><span class="line">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public interface NoteRepository extends JpaRepository&lt;Note, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Data JPA has a bunch of other interesting features like Query methods (dynamically creating queries based on method names), Criteria API, Specifications, QueryDsl etc.<br>strongly recommend to checkout the Spring Data JPA’s documentation to learn more.</p><h3 id="Creating-Custom-Business-Exception"><a href="#Creating-Custom-Business-Exception" class="headerlink" title="Creating Custom Business Exception"></a>Creating Custom Business Exception</h3><p>The APIs will throw a ResourceNotFoundException whenever a Note with a given id is not found in the database.</p><p>Following is the definition of ResourceNotFoundException. (I’ve created a package named exception inside com.example.easynotes to store this exception class) -</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.example.easynotes.exception;</span><br><span class="line"></span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"></span><br><span class="line">@ResponseStatus(value = HttpStatus.NOT_FOUND)</span><br><span class="line">public class ResourceNotFoundException extends RuntimeException &#123;</span><br><span class="line">    private String resourceName;</span><br><span class="line">    private String fieldName;</span><br><span class="line">    private Object fieldValue;</span><br><span class="line"></span><br><span class="line">    public ResourceNotFoundException( String resourceName, String fieldName, Object fieldValue) &#123;</span><br><span class="line">        super(String.format(&quot;%s not found with %s : &apos;%s&apos;&quot;, resourceName, fieldName, fieldValue));</span><br><span class="line">        this.resourceName = resourceName;</span><br><span class="line">        this.fieldName = fieldName;</span><br><span class="line">        this.fieldValue = fieldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getResourceName() &#123;</span><br><span class="line">        return resourceName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getFieldName() &#123;</span><br><span class="line">        return fieldName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object getFieldValue() &#123;</span><br><span class="line">        return fieldValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice the use of @ResponseStatus annotation in the above exception class. This will cause Spring boot to respond with the specified HTTP status code whenever this exception is thrown from your controller.</p><h3 id="Creating-NoteController"><a href="#Creating-NoteController" class="headerlink" title="Creating NoteController"></a>Creating NoteController</h3><p>This is final step as router will wrap inside and mapping with the controller.<br>which is almost the same as nodejs rest api or golang api. but using anotation.  </p><p>First, create a new package controller inside com.example.easynotes. Then, create a new class NoteController.java with the following contents.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.example.easynotes.controller;</span><br><span class="line"></span><br><span class="line">import com.example.easynotes.exception.ResourceNotFoundException;</span><br><span class="line">import com.example.easynotes.model.Note;</span><br><span class="line">import com.example.easynotes.repository.NoteRepository;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.http.ResponseEntity;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line">import javax.validation.Valid;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/api&quot;)</span><br><span class="line">public class NoteController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    NoteRepository noteRepository;</span><br><span class="line"></span><br><span class="line">    // Get All Notes</span><br><span class="line"></span><br><span class="line">    // Create a new Note</span><br><span class="line"></span><br><span class="line">    // Get a Single Note</span><br><span class="line"></span><br><span class="line">    // Update a Note</span><br><span class="line"></span><br><span class="line">    // Delete a Note</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>@RestController annotation is a combination of Spring’s @Controller and @ResponseBody annotations.</p><p>The @Controller annotation is used to define a controller and the @ResponseBody annotation is used to indicate that the return value of a method should be used as the response body of the request.</p><p>@RequestMapping(“/api”) declares that the url for all the apis in this controller will start with /api.</p><p>Let’s now look at the implementation of all the apis one by one.</p><h4 id="1-Get-All-Notes-GET-api-notes"><a href="#1-Get-All-Notes-GET-api-notes" class="headerlink" title="1. Get All Notes (GET /api/notes)"></a>1. Get All Notes (GET /api/notes)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Get All Notes</span><br><span class="line">@GetMapping(&quot;/notes&quot;)</span><br><span class="line">public List&lt;Note&gt; getAllNotes() &#123;</span><br><span class="line">    return noteRepository.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above method is pretty straightforward. It calls JpaRepository’s findAll() method to retrieve all the notes from the database and returns the entire list.</p><p>Also, The @GetMapping(“/notes”) annotation is a short form of @RequestMapping(value=”/notes”, method=RequestMethod.GET).</p><h4 id="2-Create-a-new-Note-POST-api-notes"><a href="#2-Create-a-new-Note-POST-api-notes" class="headerlink" title="2. Create a new Note (POST /api/notes)"></a>2. Create a new Note (POST /api/notes)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/notes&quot;)</span><br><span class="line">public Note createNote(@Valid @RequestBody Note note)&#123;</span><br><span class="line">return nodeRepository.save(note);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The @RequestBody annotation is used to bind the request body with a method parameter.<br>The @Valid annotation makes sure that the request body is valid. Remember, we had marked Note’s title and content with @NotBlank annotation in the Note model?<br>so if the req body does not have a title or content, then spring will return a 400 badrequest error to client. </p><h4 id="3-get-a-single-Note-get-api-note-id"><a href="#3-get-a-single-Note-get-api-note-id" class="headerlink" title="3. get a single Note(get/api/note/{id})"></a>3. get a single Note(get/api/note/{id})</h4><p>@GetMapping(“/notes/{id}”)<br>public Note getNoteById(@PathVarible(value = “id”) Long nodeId){<br>    return noteRespository.findById(noteId).<br>        orElseThrow(() -&gt; new ResourceNotFoundException(“Note”, “id”, noteId));<br>} </p><p>The @PathVariable annotation, as the name suggests, is used to bind a path variable with a method parameter.</p><p>we are throwing a ResourceNotFoundException whenever a Note with the given id is not found in the above method. </p><p>This will cause Spring Boot to return a 404 Not Found error to the client (Remember, we had added a @ResponseStatus(value = HttpStatus.NOT_FOUND) annotation to the ResourceNotFoundException class).</p><h3 id="4-Update-a-item-PUT-api-notes-id"><a href="#4-Update-a-item-PUT-api-notes-id" class="headerlink" title="4. Update a item(PUT /api/notes/{id})"></a>4. Update a item(PUT /api/notes/{id})</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// Update a Note</span><br><span class="line">@PutMapping(&quot;/notes/&#123;id&#125;&quot;)</span><br><span class="line">public Note updateNote(@PathVariable(value = &quot;id&quot;) Long noteId,</span><br><span class="line">                                        @Valid @RequestBody Note noteDetails) &#123;</span><br><span class="line"></span><br><span class="line">    Note note = noteRepository.findById(noteId)</span><br><span class="line">            .orElseThrow(() -&gt; new ResourceNotFoundException(&quot;Note&quot;, &quot;id&quot;, noteId));</span><br><span class="line"></span><br><span class="line">    note.setTitle(noteDetails.getTitle());</span><br><span class="line">    note.setContent(noteDetails.getContent());</span><br><span class="line"></span><br><span class="line">    Note updatedNote = noteRepository.save(note);</span><br><span class="line">    return updatedNote;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Delete-a-Note-DELETE-api-notes-noteId"><a href="#5-Delete-a-Note-DELETE-api-notes-noteId" class="headerlink" title="5. Delete a Note (DELETE /api/notes/{noteId})"></a>5. Delete a Note (DELETE /api/notes/{noteId})</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@DeleteMapping(&quot;notes/&#123;id&#125;&quot;)</span><br><span class="line">public Repository&lt;?&gt; deleteNote(@PathVariable(value = &quot;id&quot;) Long noteId)&#123;</span><br><span class="line">Note note noteRepository.findById(noteId)</span><br><span class="line">.orElseThrow(() -&gt; new ResourceNotFoundException(&quot;Note&quot;, &quot;id&quot;, noteId));</span><br><span class="line">noteRepository.delete(note);</span><br><span class="line"></span><br><span class="line">return ResponseEntity.ok().build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Running-the-app"><a href="#Running-the-app" class="headerlink" title="Running the app"></a>Running the app</h3><p>Command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn spring-boot:run</span><br></pre></td></tr></table></figure></p><p>Test the api with postman, which is same with golang as well as nodejs and python. </p><p>Still, having query about tranction! what if the sql operation involve in transaction<br>and need to rollback! that will be next….</p><p><a href="https://www.callicoder.com/spring-boot-rest-api-tutorial-with-mysql-jpa-hibernate/" target="_blank" rel="noopener">reference link</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using &lt;a href=&quot;http://start.spring.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://start.spring.io&lt;/a&gt; to initialize: web, jpa, mysql,
      
    
    </summary>
    
    
      <category term="Springboot" scheme="http://pengw00.github.io/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>systemDesignInterview</title>
    <link href="http://pengw00.github.io/2019/05/30/systemDesignInterview/"/>
    <id>http://pengw00.github.io/2019/05/30/systemDesignInterview/</id>
    <published>2019-05-30T05:17:56.000Z</published>
    <updated>2019-05-30T18:55:18.102Z</updated>
    
    <content type="html"><![CDATA[<p>My question</p><ol><li>Design Pastebin, a website where you can store and share text online for a set period of time.</li></ol><p>Note: Bit.ly is a similar service, with the distinction that Pastebin requires storing the paste contents instead of the original unshortened URL.</p><ul><li>note: Use it to share thoughts and resources, such as:</li></ul><ul><li>Features scope</li><li>API design</li><li>Pseudo code for specific components</li><li>Data model/schema</li><li>Back-of-the-envelope calculations</li><li>Reference links</li><li>Link to whiteboard or diagram such as <a href="https://sketchboard.me/new" target="_blank" rel="noopener">https://sketchboard.me/new</a></li></ul><ul><li>hints: interview structure</li><li>Establish the feature scope and constraints</li><li>Describe high-level architecture</li><li>Drill Down: design and scale core components</li><li>Scaling the design</li><li>Tradeoffs and future improvements</li></ul><h3 id="Note-and-Solution"><a href="#Note-and-Solution" class="headerlink" title="Note and Solution"></a>Note and Solution</h3><p>text -&gt; pastebin  no expire time</p><p>build a restful api with post method store text in the dabase</p><p>api and then when hit api return text in brower. </p><p>txt file, service parse the text file, get string, and store in the backend. </p><p>txt -&gt; api -&gt; user want the text, url get list of text or one recent text</p><p>front end -&gt; save txt file -&gt; backend -&gt; id-&gt; bit.ly service -&gt; url for text </p><ol><li>user table<br> user id</li></ol><p>2 text table<br>    text id<br>    text content<br>    date </p><p>solution1: url for txt -&gt; backend -&gt; response with txt file</p><ul><li>solution2: optimized high level design<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">client -&gt;(LB) server -&gt; readApi-&gt; cache  duplicate</span><br><span class="line">          server    readApi                  DB</span><br><span class="line">                                             DB</span><br><span class="line">                                             ...</span><br><span class="line">                                             ...</span><br><span class="line">          server       -&gt; writeApi-&gt;  (master and slave DB) </span><br><span class="line">nosql</span><br></pre></td></tr></table></figure></li></ul><p>Pasterbin use case<br>Review this <a href="https://github.com/donnemartin/system-design-primer/tree/master/solutions/system_design/pastebin#design-pastebincom-or-bitly" target="_blank" rel="noopener">article</a> to learn about the use cases, high level design, core components and scale of a system like Pastebin.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;My question&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Design Pastebin, a website where you can store and share text online for a set period of time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Not
      
    
    </summary>
    
    
      <category term="SystemDesign" scheme="http://pengw00.github.io/tags/SystemDesign/"/>
    
  </entry>
  
  <entry>
    <title>leetcode671SecondMinNodeInBinaryTree</title>
    <link href="http://pengw00.github.io/2019/05/29/leetcode671SecondMinNodeInBinaryTree/"/>
    <id>http://pengw00.github.io/2019/05/29/leetcode671SecondMinNodeInBinaryTree/</id>
    <published>2019-05-29T18:18:00.000Z</published>
    <updated>2019-05-29T18:33:39.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Leetcode671-Second-Minimum-Node-In-a-Binary-Tree"><a href="#Leetcode671-Second-Minimum-Node-In-a-Binary-Tree" class="headerlink" title="Leetcode671. Second Minimum Node In a Binary Tree"></a>Leetcode671. Second Minimum Node In a Binary Tree</h3><p>//implementing in sort of bussiness logic in control component in<br>//flexibly used in front end or backend!!!</p><p>Analysis:</p><ol><li>using dfs or bfs, search the val in range (min1, ans), update ans = val if val in (min1, ans); </li><li>using dfs with divide and conque, dfs to get left and right of the subtree,  and only recursion on the condition of root.val == root.left.val or root.val == root.right.val;</li></ol><ul><li>solution one<h4 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h4></li></ul><figure class="highlight plain"><figcaption><span>solution&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">int min1;</span><br><span class="line">long ans = Long.MAX_VALUE;</span><br><span class="line">public int findSecondMinimumValue(TreeNode root)&#123;</span><br><span class="line">if(root==null) return -1;</span><br><span class="line">dfs(root);</span><br><span class="line">return ans ==Long.MAX_VALUE?-1:(int)ans;</span><br><span class="line">&#125;</span><br><span class="line">//once root.val &gt; min1, we never drill deeply</span><br><span class="line">//only root.val == min1, we dfs left and right</span><br><span class="line">private void dfs(TreeNode root)&#123;</span><br><span class="line">if(root!=null)&#123;</span><br><span class="line">if(root.val&gt;min1 &amp;&amp; root.val &lt; ans)&#123;</span><br><span class="line">ans = root.val;</span><br><span class="line">&#125;else if(root.val == min1)&#123;</span><br><span class="line">dfs(root.left);</span><br><span class="line">dfs(root.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class solution&#123;</span><br><span class="line">public int findSecondMinimumValue(TreeNode root)&#123;</span><br><span class="line">if(root==null) return -1;</span><br><span class="line">int rootval = root.val;</span><br><span class="line">long ans = Long.MAX_VALUE;</span><br><span class="line">Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">queue.add(root);</span><br><span class="line">while(!queue.isEmpty())&#123;</span><br><span class="line">TreeNode tmp = queue.poll();</span><br><span class="line">if(tmp.left != rootval &amp;&amp; head.val &lt; ans)&#123;</span><br><span class="line">ans = head.val;</span><br><span class="line">&#125;</span><br><span class="line">if(tmp.left != null)&#123;</span><br><span class="line">queue.add(tmp.left);</span><br><span class="line">queue.add(tmp.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return ans == Long.MAX_VALUE ? -1: ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>solution two <h3 id="divide-and-conquer-with-dfs"><a href="#divide-and-conquer-with-dfs" class="headerlink" title="divide and conquer with dfs"></a>divide and conquer with dfs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//only left.val == root.val or right.val == root.val will be dfs</span><br><span class="line">//be familiar to implement condition returnning in order.</span><br><span class="line">class solution&#123;</span><br><span class="line">public int findSecondMinimumValue(TreeNode root)&#123;</span><br><span class="line">if(root==null) return -1;</span><br><span class="line">if(root.left==null &amp;&amp; root.right==null) return -1;</span><br><span class="line">int left = root.left.val;</span><br><span class="line">int right = root.right.val;</span><br><span class="line">if(root.left.val == root.val)&#123;</span><br><span class="line">left = findSecondMinimumValue(root.left);</span><br><span class="line">&#125;</span><br><span class="line">if(root.right.val == root.val)&#123;</span><br><span class="line">right = findSecondMinimumValue(root.right);</span><br><span class="line">&#125;</span><br><span class="line">if(left!=-1 &amp;&amp; right != -1)&#123;</span><br><span class="line">return Math.min(left, rigth);</span><br><span class="line">&#125;</span><br><span class="line">if(left != -1)&#123;</span><br><span class="line">return left;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Leetcode671-Second-Minimum-Node-In-a-Binary-Tree&quot;&gt;&lt;a href=&quot;#Leetcode671-Second-Minimum-Node-In-a-Binary-Tree&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
