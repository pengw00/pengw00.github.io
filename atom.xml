<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pengw00&#39;s Tech Road</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pengw00.github.io/"/>
  <updated>2019-05-20T14:47:12.465Z</updated>
  <id>http://pengw00.github.io/</id>
  
  <author>
    <name>pengw00</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode804</title>
    <link href="http://pengw00.github.io/2019/05/20/leetcode804/"/>
    <id>http://pengw00.github.io/2019/05/20/leetcode804/</id>
    <published>2019-05-20T13:55:50.000Z</published>
    <updated>2019-05-20T14:47:12.465Z</updated>
    
    <content type="html"><![CDATA[<p>Logic:<br>Get the average of the array, then backtrack the subarray with the same average.<br>trick: be careful with sum * number % length; not only sum % length:<br>eg: 10 / 4 =&gt; 5/2, even sum % length !=0 , it still works!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class solution&#123;</span><br><span class="line">public boolean splitArraySameAverage(int[] A)&#123;</span><br><span class="line">int len = A.length;</span><br><span class="line">if(len==1) return false;</span><br><span class="line">int s = 0;</span><br><span class="line">for(int i: A)&#123;</span><br><span class="line">s += i;</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(A);</span><br><span class="line">for(int i = 1; i &lt;= len/2; i++)&#123;</span><br><span class="line">if((s * i % len == 0) &amp; (backtracking(A, s * i /len, i, 0)) return true;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public boolean backtrack(int[] A, int target, int k, int start)&#123;</span><br><span class="line">if(k==0) return target==0;</span><br><span class="line">if(A[start] &gt; target/k) return false;</span><br><span class="line">for(int i = start; i &lt; A.length - k + 1; i++)&#123;</span><br><span class="line">if(i &gt; start &amp;&amp; A[i]==A[i-1]) continue;</span><br><span class="line">if(backtrack(A, target - A[i], k -1, i + 1)) return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Logic:&lt;br&gt;Get the average of the array, then backtrack the subarray with the same average.&lt;br&gt;trick: be careful with sum * number % lengt
      
    
    </summary>
    
    
      <category term="Dynamic Programming" scheme="http://pengw00.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>singleton_code_demo</title>
    <link href="http://pengw00.github.io/2019/05/02/singleton-code-demo/"/>
    <id>http://pengw00.github.io/2019/05/02/singleton-code-demo/</id>
    <published>2019-05-02T04:59:31.000Z</published>
    <updated>2019-05-02T05:04:15.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SingleTon-basic-logic"><a href="#SingleTon-basic-logic" class="headerlink" title="SingleTon basic logic"></a>SingleTon basic logic</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class SingleTonClass &#123;</span><br><span class="line">private static SingleTonClass obj = null;</span><br><span class="line">private SingleTonClass()&#123;</span><br><span class="line">      /*Private Constructor will prevent </span><br><span class="line">       * the instantiation of this class directly*/</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static SingleTonClass objectCreationMethod()&#123;</span><br><span class="line">/*This logic will ensure that no more than</span><br><span class="line"> * one object can be created at a time */</span><br><span class="line">if(obj==null)&#123;</span><br><span class="line">    obj= new SingleTonClass();</span><br><span class="line">&#125;</span><br><span class="line">        return obj;</span><br><span class="line">   &#125;</span><br><span class="line">   public void display()&#123;</span><br><span class="line">System.out.println(&quot;Singleton class Example&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   public static void main(String args[])&#123;</span><br><span class="line">//Object cannot be created directly due to private constructor </span><br><span class="line">        //This way it is forced to create object via our method where</span><br><span class="line">        //we have logic for only one object creation</span><br><span class="line">SingleTonClass myobject= SingleTonClass.objectCreationMethod();</span><br><span class="line">myobject.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SingleTon-basic-logic&quot;&gt;&lt;a href=&quot;#SingleTon-basic-logic&quot; class=&quot;headerlink&quot; title=&quot;SingleTon basic logic&quot;&gt;&lt;/a&gt;SingleTon basic logic&lt;/
      
    
    </summary>
    
    
      <category term="Java" scheme="http://pengw00.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>sass/scss</title>
    <link href="http://pengw00.github.io/2019/04/17/sass-scss/"/>
    <id>http://pengw00.github.io/2019/04/17/sass-scss/</id>
    <published>2019-04-17T18:36:41.000Z</published>
    <updated>2019-04-17T19:58:58.039Z</updated>
    
    <content type="html"><![CDATA[<p>为什么使用SASS/SCSS？</p><p>易维护，更方便的定制<br>对于一个大型或者稍微有规模的UI来说，如果需要替换下整体风格，或者是某个字体的像素值，比如我们经常会遇到panel，window以及portal共用一个背景色，这个时候按照常规的方式，我们需要一个个定位到元素使用的class，然后逐个替换，SASS提供了变量的方式，你可以把某个样式作为一个变量，然后各个class引用这个变量即可，修改时，我们只需修改对应的变量。<br>对于编程人员的友好<br>对于一个没有前端基础的编程人员，写css样式是一件非常痛苦的事情，他们会感觉到各种约束，为什么我不能定一个变量来避免那些类似“变量”的重复书写？为什么我不能继承上个class的样式定义？。。。SASS/SCSS正是帮编程人员解开了这些疑惑，让css看起来更像是一门编程语言。<br>效率的提升<br>对于一个前端开发人员来说，我不熟悉编程，也不关注css是否具有的一些编程语言特性，但这不是你放弃他的理由，css3的发展，加之主流浏览器的兼容性不一，很多浏览器都有自己的兼容hack，很多时候我们需要针对不同的浏览器写一堆的hack，这种浪费时间的重复劳动就交给SASS处理去吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为什么使用SASS/SCSS？&lt;/p&gt;
&lt;p&gt;易维护，更方便的定制&lt;br&gt;对于一个大型或者稍微有规模的UI来说，如果需要替换下整体风格，或者是某个字体的像素值，比如我们经常会遇到panel，window以及portal共用一个背景色，这个时候按照常规的方式，我们需要一个个定
      
    
    </summary>
    
    
      <category term="Front-end" scheme="http://pengw00.github.io/tags/Front-end/"/>
    
  </entry>
  
  <entry>
    <title>react component communication</title>
    <link href="http://pengw00.github.io/2019/04/17/react-component-communication/"/>
    <id>http://pengw00.github.io/2019/04/17/react-component-communication/</id>
    <published>2019-04-17T15:02:23.000Z</published>
    <updated>2019-04-17T15:29:27.493Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/lizhipeng123321/article/details/80018003" target="_blank" rel="noopener">https://blog.csdn.net/lizhipeng123321/article/details/80018003</a></p><p>总结<br>本文总结了 React 中组件的几种通信方式，分别是：</p><p>父组件向子组件通信：使用 props<br>子组件向父组件通信：使用 props 回调<br>跨级组件间通信：使用 context 对象<br>非嵌套组件间通信：使用事件订阅<br>事实上，在组件间进行通信时，这些通信方式都可以使用，区别只在于使用相应的通信方式的复杂程度和个人喜好，选择最合适的那一个。</p><p>比如，通过事件订阅模式通信不止可以应用在非嵌套组件间，还可以用于跨级组件间，非嵌套组件间通信也可以使用 context 等。关键是选择最合适的方式。</p><p>当然，自己实现组件间的通信还是太难以管理了，因此出现了很多状态管理工具，如 flux、redux 等，使用这些工具使得组件间的通信更容易追踪和管理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/lizhipeng123321/article/details/80018003&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lizhipeng12
      
    
    </summary>
    
    
      <category term="react" scheme="http://pengw00.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react context api</title>
    <link href="http://pengw00.github.io/2019/04/16/react-context-api/"/>
    <id>http://pengw00.github.io/2019/04/16/react-context-api/</id>
    <published>2019-04-16T05:25:24.000Z</published>
    <updated>2019-04-17T15:02:44.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-contect-api-state-manage"><a href="#react-contect-api-state-manage" class="headerlink" title="react contect api state manage"></a>react contect api state manage</h1><h2 id="When-Should-I-Use-Context"><a href="#When-Should-I-Use-Context" class="headerlink" title="When Should I Use Context?"></a>When Should I Use Context?</h2><p>I would recommend reaching for Context when you find yourself passing props down through three or more levels in your component tree. You might notice that you have renamed your props, making it challenging to determine the data’s origin. You might consider implementing context if a bunch of your components know about irrelevant data.</p><p>Rule of thumb: if you start to feel irritated by how long it takes to determine where data is coming from, introduce Context.</p><p>Do not hesitate to still use the other tools you have available, like prop drilling and redux. While Context can make it easier to pass props around in certain scenarios, it doesn’t give you access to some of the benefits redux offers, and it’s a more complicated abstraction than prop drilling.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;react-contect-api-state-manage&quot;&gt;&lt;a href=&quot;#react-contect-api-state-manage&quot; class=&quot;headerlink&quot; title=&quot;react contect api state manage&quot;&gt;
      
    
    </summary>
    
    
      <category term="react" scheme="http://pengw00.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>transaction meaning</title>
    <link href="http://pengw00.github.io/2019/04/15/transaction-meaning/"/>
    <id>http://pengw00.github.io/2019/04/15/transaction-meaning/</id>
    <published>2019-04-16T02:48:08.000Z</published>
    <updated>2019-04-16T04:31:59.034Z</updated>
    
    <content type="html"><![CDATA[<p>经典文章：<a href="https://blog.csdn.net/popvip44/article/details/71487425" target="_blank" rel="noopener">https://blog.csdn.net/popvip44/article/details/71487425</a></p><h1 id="Definition-What-does-Transaction-mean"><a href="#Definition-What-does-Transaction-mean" class="headerlink" title="Definition - What does Transaction mean?"></a>Definition - What does Transaction mean?</h1><p>A transaction, in the context of a database, is a logical unit that is independently executed for data retrieval or updates. In relational databases, database transactions must be atomic, consistent, isolated and durable–summarized as the ACID acronym.</p><p>Transactions are completed by COMMIT or ROLLBACK SQL statements.</p><p>which indicate a transaction’s beginning or end.<br>The ACID acronym defines the properties of a database transaction, as follows:</p><ol><li><p>Atomicity: A transaction must be fully complete, saved (committed) or completely undone (rolled back). A sale in a retail store database illustrates a scenario which explains atomicity, e.g., the sale consists of an inventory reduction and a record of incoming cash. Both either happen together or do not happen - it’s all or nothing.</p></li><li><p>Consistency: The transaction must be fully compliant with the state of the database as it was prior to the transaction. In other words, the transaction cannot break the database’s constraints. For example, if a database table’s Phone Number column can only contain numerals, then consistency dictates that any transaction attempting to enter an alphabetical letter may not commit.</p></li></ol><p>Isolation: Transaction data must not be available to other transactions until the original transaction is committed or rolled back.</p><p>Durability: Transaction data changes must be available, even in the event of database failure.</p><p>评论要点：<br>金融类应用非常适用，尤其是要求超高并发的。</p><p>不过实际环境下这类应用又要求安全可靠性，所以一般要配合多种数据存储方式。</p><p>Mongodb碎片、依赖内存，所以如果出现某些特殊意外可能会出现数据遗失；</p><p>关系型数据库虽然具备事务处理，可靠程度高，但性能不占优。<br>1楼：<br>例如一个金融股票系统，用mysql存储历史数据，Mongodb临时存储当天分时数据，加快读写。晚上收盘后再把Mongodb数据整理写入mysql。</p><p>适合：<br>楼2: 某种数据提取十分频繁，你又不想在oracle里面join来join去浪费处理时间，然后你就存在mongodb里面把以前在oracle中要join的几个列存成一个列合并在一个列上然后查的时候直接查一个列出来 说白了就是节约时间：eg :{name:leilei,warehouse:beijing, order:23} ,比如这三个字段以前分散在oracle的好几个表里面你要取得时候要join,现在你发现这个信息用户访问十分频繁你存的时候就存着三个j在mongo里面，这样就不用去oracle里join拿了而且又没有事务又没有锁理论上相对快</p><p>3楼：不过说白了，其实关系型数据库够用了，那些使用nosql的个人以为没必要。获取他们设计的程序有问题或许不会调优数据库 导致性能低下所以要尝尝新玩意吧</p><p>8楼： 适合树型数据，比如无限分类，网易评论盖楼，多级权限  这种用传统关联表做的话要么递归查询，要么要写很多额外的代码， 用mogodb只要拼字符串把键名拼对了就可以了</p><p>15楼： 存日志之类的，比方osc的动态，把各类动态组装好直接存，以后就可以直接读出来解析</p><h2 id="classic-review："><a href="#classic-review：" class="headerlink" title="classic review："></a>classic review：</h2><p>The purpose of a transaction is to make sure that the whole database stays consistent while multiple operations take place. But in contrary to most relational databases, MongoDB isn’t designed to run on a single host. It is designed to be set up as a cluster of multiple shards where each shard is a replica-sets of multiple servers (optionally at different geographical locations).</p><p>A transaction can potentially affect lots of hosts of the database. That means that the transaction would have to be synchronized between all of these hosts. This would mean quite a lot of overhead and would scale very badly when increasing the size of the database by adding more servers.</p><p>MongoDB does not have support for traditional locking or complex transactions with rollback. MongoDB aims to be lightweight, fast, and predictable in its performance. This is similar to the MySQL MyISAM autocommit model. By keeping transaction support extremely simple, MongoDB can provide greater performance especially for partitioned or replicated systems with a number of database server processes.</p><p>CAP定理<br>维基百科，自由的百科全书<br>跳到导航跳到搜索<br>在理论计算机科学中，CAP定理（CAP theorem），又被称作布鲁尔定理（Brewer’s theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点：[1][2]</p><p>一致性（Consistency） （等同于所有节点访问同一份最新的数据副本）<br>可用性（Availability）（每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据）<br>分区容错性（Partition tolerance）（以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择[3]。）</p><p>分布式系统只能满足三项中的两项而不可能满足全部三项[4]。理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经典文章：&lt;a href=&quot;https://blog.csdn.net/popvip44/article/details/71487425&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/popvip44/arti
      
    
    </summary>
    
    
      <category term="database" scheme="http://pengw00.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>ngrx for flux</title>
    <link href="http://pengw00.github.io/2019/04/12/ngrx-for-flux/"/>
    <id>http://pengw00.github.io/2019/04/12/ngrx-for-flux/</id>
    <published>2019-04-12T05:22:31.000Z</published>
    <updated>2019-04-12T21:26:36.711Z</updated>
    
    <content type="html"><![CDATA[<p>github: <a href="https://github.com/SantiagoGdaR/angular-ngrx/blob/master/src/app/app-routing.module.ts" target="_blank" rel="noopener">https://github.com/SantiagoGdaR/angular-ngrx/blob/master/src/app/app-routing.module.ts</a></p><p>What is NGRX<br>NGRX is a group of libraries “inspired” by the Redux pattern which in turn is “inspired” by the Flux pattern. Being a little more concise, this means that redux pattern is a simplified version of the Flux pattern and NGRX is an angular/rxjs version of the redux pattern.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What do I mean with “angular/rxjs” version of redux… The “angular” part is because ngrx is a library to use within an angular application. The “rxjs” part is because the implementation of ngrx works around a rxjs flow. This means that it works using observables and the different observable operators provided by “rxjs”.</span><br></pre></td></tr></table></figure></p><p>The main purpose of this pattern is<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">to provide a predictable state container, based on three main principles.</span><br></pre></td></tr></table></figure></p><p>Let’s go through the three principles of the Redux pattern and point out the most important benefits they provide.</p><p>Single source of truth<br>In the case of a redux/ngrx architecture, this means that the state of your whole application is <figure class="highlight plain"><figcaption><span>in an object tree within a single store.```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Within a single store? We are going to talk later about stores, but in a general definition, they have the responsibility of holding the state and applying changes to it when they are told to do so (when an action is dispatched, we are also going to talk about them later).</span><br><span class="line"></span><br><span class="line">The benefits of having a single source of truth are plenty, but for me, the most interesting one (because is the one that is going to impact on any angular app) is the following:</span><br><span class="line"></span><br><span class="line">When you are building an angular app ``` usually you have the state split and handle in multiple services ```. ``` As your app growth keeping track of your state changes starts to get messy and hard to debug and maintain. Having a single source of truth resolves this problem since the state is handled only in one object and in one place, so debugging or adding changes becomes way easier.</span><br></pre></td></tr></table></figure></p><h2 id="State-is-read-only"><a href="#State-is-read-only" class="headerlink" title="State is read-only"></a>State is read-only</h2><p>You are never going to change the state directly instead you are going to dispatch actions. These actions describe what’s happening (can be things like getting, adding, removing, updating the state).</p><p>####Dispatch an action?… We are going to talk about actions later but for a general point of view, they are identifiers of an operation on your application and they can be triggered (or dispatched) to tell the application to execute the operation that the action represents.####</p><p>By avoiding to update the state from different places and having a centralized place to make changes, that responds to specific actions, you get a lot of benefits. Just to mention the most important ones:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You know that any change to the state is going to happen only in one place. This has a great impact on debugging and testing.</span><br><span class="line">You know that if a certain action is dispatched the operation in the state is always the same. Again this impacts directly in debugging and testing.</span><br></pre></td></tr></table></figure><h2 id="Changes-are-made-with-pure-functions"><a href="#Changes-are-made-with-pure-functions" class="headerlink" title="Changes are made with pure functions"></a>Changes are made with pure functions</h2><p>The operation triggered by dispatching an action is going to be a pure function called, within the redux architecture, reducers.</p><p>These reducers (remember that they are just pure functions) receive an action and the state, depending on the action dispatched (usually with a switch statement) they execute an operation and return a new state object.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">State in a redux app is immutable! So when a reducer changes something in the state, it returns a new state object.</span><br></pre></td></tr></table></figure><p>The benefits of using pure functions are well known, like the fact that they are immediately testable if you pass the same arguments you are going to get the same result.</p><p>This approach also allows us to navigate between different instances of our state using Redux/ngrx dev tools and see what changed between instances and who change it, among other things. So using pure functions and returning new instances of the state has also a great impact on debugging.</p><p>But the main benefit, in my opinion, is that by binding all our components inputs to state properties we can change the change detection strategy to on push, and this is going to be a boost on performance for the application.</p><h2 id="where-is-the-example"><a href="#where-is-the-example" class="headerlink" title="where is the example???"></a>where is the example???</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This approach also allows us to navigate between different instances of our state using Redux/ngrx dev tools and see what changed between instances and who change it, among other things. So using pure functions and returning new instances of the state has also a great impact on debugging.</span><br></pre></td></tr></table></figure><p>##<br>But the main benefit, in my opinion, is that by binding all our components inputs to state properties we can change the change detection strategy to on push, and this is going to be a boost on performance for the application.</p><p>## </p><h1 id="Great…-so-what-are-the-benefits-of-using-NGRX"><a href="#Great…-so-what-are-the-benefits-of-using-NGRX" class="headerlink" title="Great… so what are the benefits of using NGRX"></a>Great… so what are the benefits of using NGRX</h1><p>We have already mentioned most of them out while talking about the redux pattern principles. But let’s point out the most important benefits of using the redux pattern in an application (in my opinion):</p><p>Since we have a single source of truth and you can’t directly change the state, applications are going to behave more consistently.<br>Using the redux pattern gives us a lot of cool features to make debugging easier.<br>Applications become easier to test since we are introducing pure functions to handle changes in the state and also because both, ngrx and rxjs, have a lot’s great features for testing.<br>As soon as you feel comfortable with using ngrx, understanding the flow of data in your applications becomes incredibly easy and predictable.</p><h2 id="and-the-cons-are"><a href="#and-the-cons-are" class="headerlink" title="and the cons are"></a>and the cons are</h2><p>NGRX has, of course, a learning curve. Is not a big one, but not that small either, and I think it requires some experience or deep understanding of some program patters. Any mid-seniority dev should be ok but for a junior might be a little confusing at first.<br>For me, it feels a little verbose. So every time you add some property to the state, you need to add the actions, the dispatchers, you may need to update or add the selectors, the effects if any, update the store. And also you start piping (concatenating) rxjs operators and observables all over the place.<br>NGRX is not part of the angular core libraries and is not supported by Google, at least not directly because there are ngrx contributors that are part of the Angular team. Just something to consider since you are adding a library that is going to be a big dependency for your app.</p><h2 id="When-to-use-NGRX"><a href="#When-to-use-NGRX" class="headerlink" title="When to use NGRX"></a>When to use NGRX</h2><p>So, in a general opinion ngrx should be used in medium/big projects were managing the state starts to become hard to maintain and overwhelming. Some other people, more fanatic of the pattern is going to say something like “if you have a state you have NGRX”.</p><p>I do agree that it should be considered to be used in medium or big projects when you have a considerable state and a bunch of components using this state but you have to consider that Angular by itself provides plenty of solutions for managing the state and if you have a strong front-end angular team, then maybe you don’t need to bother about ngrx.</p><p>That being said I consider that a strong Angular team may also decide to include ngrx to the solution because they know all the power of the redux pattern and also the power added by rxjs operators, and they feel comfortable working with both…</p><p>That being said I consider that a strong Angular team may also decide to include ngrx to the solution because they know all the power of the redux pattern and also the power added by rxjs operators, and they feel comfortable working with both…</p><p>If you were expecting a simple answer to decide when to use ngrx, you are not going to obtain it, and don’t trust anyone giving you this answer from outside your organization or team. The decision depends on studying the pros and cons, understanding your team and considering their opinion.</p><h2 id="NGRX-Actions-Reducers-Selectors-Store-and-Effects"><a href="#NGRX-Actions-Reducers-Selectors-Store-and-Effects" class="headerlink" title="NGRX Actions, Reducers, Selectors, Store, and Effects"></a>NGRX Actions, Reducers, Selectors, Store, and Effects</h2><p>These are the core building units of the ngrx flow. Each of them takes care of a part of the process of starting an operation to changing our state and retrieving data.</p><p><img src="https://github.com/pengw00/pengw00.github.io/raw/master/image/ngrx.png" alt="image"></p><p>###<br><a href="https://medium.com/frontend-fun/angular-ngrx-a-clean-and-clear-introduction-4ed61c89c1fc" target="_blank" rel="noopener">https://medium.com/frontend-fun/angular-ngrx-a-clean-and-clear-introduction-4ed61c89c1fc</a></p><p>###</p><h4 id="payload-the-type-of-this-property-depends-on-what-type-of-data-this-action-needs-to-send-to-the-reducer-In-the-case-of-the-previous-example-is-going-to-be-a-string-containing-the-user-name-Not-all-actions-needs-a-payload"><a href="#payload-the-type-of-this-property-depends-on-what-type-of-data-this-action-needs-to-send-to-the-reducer-In-the-case-of-the-previous-example-is-going-to-be-a-string-containing-the-user-name-Not-all-actions-needs-a-payload" class="headerlink" title="payload: the type of this property depends on what type of data this action needs to send to the reducer. In the case of the previous example, is going to be a string containing the user name. Not all actions needs a payload."></a>payload: the type of this property depends on what type of data this action needs to send to the reducer. In the case of the previous example, is going to be a string containing the user name. Not all actions needs a payload.</h4><p>###</p><ol><li>view dispatch a actions. </li></ol><p>In the store object, you have a function to dispatch (trigger) actions. Actions are classes that implemenets the NGRX Action interface. These Action classes have two properties (let’s take as an example an action class called GetUserName):type: it’s a read only string describing what the action stand for. For example: ‘[User] Get User Name’</p><p>2.1. If this action doesn’t trigger an effect then a reducer is going to analyze the action (usually using a switch statement) and return a new state that’s is going to be the result of merging the old state with the value that changed by calling the action.</p><p>Reducers…<br>Reducers are pure functions accepting two arguments, the previous state and an Action. When an Action is dispatched ngrx goes through all the reducers passing as arguments the previous state and the Action, in the order that the reducers where created, until it finds a case for that action.</p><p>2.2. If an effect gets triggered by dispatching an action is because some side effects are going to happen before calling the reducer. This can probably be something like calling an HTTP service to get data.</p><p>Effects…<br>Effects, on the ngrx libraries ecosystem, allow us to deal with side-effects caused from dispatching an action outside angular components or the ngrx store.</p><p>The Effects listen if any action is dispatched, then, similar to what reducers do, it checks if the action is one of the actions type it has a case for.<br>Then is going to perform a side-effect, usually getting or sending data to an API.<br>Finally is going to emit another action, usually, an action referring to the result-state of the side effect (success, error, etc), then a reducer is going to enter in the scene as we already mention in the ngrx flow.</p><p>2.2.1. After the effect is done (side effects are finished) a new “state-result” action gets fired by the effect (it can be that the side effects succeeded or failed), and we are back to point 2.1.</p><h2 id="why-we-need-selector"><a href="#why-we-need-selector" class="headerlink" title="why we need selector"></a>why we need selector</h2><p>###<br> Now the Store has a new state. The state can be a big object tree, so ngrx introduces selectors to be able to use only the slices of the object that we need in a specific component.</p><p> As we mentioned before the state tree can become quite a big object, it doesn’t make sense to have all that object on places where we only need part of it.</p><p> NGRX store provides us the function “select” to obtain slices of our store. But what if we need to apply some logic to that slice before using the data in the components.</p><p>  They allow us to decouple any state slice data transformation from the components.<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The store “select” function accepts an an argument a pure function, this pure function is our selector.</span><br></pre></td></tr></table></figure></p><p>###</p><h2 id="NGRX-example"><a href="#NGRX-example" class="headerlink" title="NGRX example"></a>NGRX example</h2><p>Our example is going to have a list of users, the user detail page and some initial configuration information that you need to get when the app starts. We are going to be able to implement some important ngrx flows.</p><p>These are the things that we are going to do:</p><p>Installation of the library<br>Folder structure for the store<br>Create State and initial values<br>Create Actions<br>Create Reducers<br>Create Effects<br>Create Selectors<br>Setting everything up<br>Using the store in some components</p><h2 id="1-Installation-of-the-library"><a href="#1-Installation-of-the-library" class="headerlink" title="1. Installation of the library"></a>1. Installation of the library</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new angular-ngrx --style=scss</span><br></pre></td></tr></table></figure><p>Let’s add the ngrx libraries that we are going to use:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @ngrx/core @ngrx/store @ngrx/effects @ngrx/store-devtools @ngrx/router-store --save</span><br></pre></td></tr></table></figure></p><p>We are installing almost all the libraries of the ngrx ecosystem. Most of them are quite clear about their purpose like core, store, effects, but there are a couple that you may wonder what they are for.</p><h3 id="store-devtools-Some-powerful-tooling-for-debugging"><a href="#store-devtools-Some-powerful-tooling-for-debugging" class="headerlink" title="store-devtools. Some powerful tooling for debugging."></a>store-devtools. Some powerful tooling for debugging.</h3><h3 id="router-store-Keeps-the-state-of-the-angular-router-in-the-store"><a href="#router-store-Keeps-the-state-of-the-angular-router-in-the-store" class="headerlink" title="router-store. Keeps the state of the angular router in the store."></a>router-store. Keeps the state of the angular router in the store.</h3><h2 id="Folder-structure-for-the-Store"><a href="#Folder-structure-for-the-Store" class="headerlink" title="Folder structure for the Store"></a>Folder structure for the Store</h2><p>Let’s start by discussing the file structure of the store. This file structure and all the store configuration should exist within the core module of your application but in our example, we don’t have one so the store is going to exist within our app module (the steps are pretty much the same if you are doing it in your core module).</p><p><img src="https://github.com/pengw00/pengw00.github.io/raw/master/image/folder.png" alt="image"></p><p>The declaration of the reducer receive the state and, in this case, the user actions and returns an IUserState.<br>Using a switch statement we generate cases for each possible action type.<br>Each case returns a new object that is the result of merging the old state and the new value.<br>All reducers have a default result that just returns the state without any changes.</p><p>You probably already notice that in the reducers we are not handling all the actions that we have created. This is because we are going to handle the missing actions in effects because these actions have side effects.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;github: &lt;a href=&quot;https://github.com/SantiagoGdaR/angular-ngrx/blob/master/src/app/app-routing.module.ts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;h
      
    
    </summary>
    
    
      <category term="angular" scheme="http://pengw00.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>TDD concept</title>
    <link href="http://pengw00.github.io/2019/04/11/TDD-concept/"/>
    <id>http://pengw00.github.io/2019/04/11/TDD-concept/</id>
    <published>2019-04-12T03:26:17.000Z</published>
    <updated>2019-04-17T21:01:30.100Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://medium.com/javascript-scene/unit-testing-react-components-aeda9a44aae2" target="_blank" rel="noopener">https://medium.com/javascript-scene/unit-testing-react-components-aeda9a44aae2</a></p><p>Favor pure components for UI code: given same props, always render the same component. If you need state from the app, you can wrap those pure components with a container component which manages state and side-effects.<br>Isolate application logic/business rules in pure reducer functions.<br>Isolate side effects using container components.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://medium.com/javascript-scene/unit-testing-react-components-aeda9a44aae2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.co
      
    
    </summary>
    
    
      <category term="Design pattern" scheme="http://pengw00.github.io/tags/Design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Jest</title>
    <link href="http://pengw00.github.io/2019/04/11/Jest/"/>
    <id>http://pengw00.github.io/2019/04/11/Jest/</id>
    <published>2019-04-11T13:56:24.000Z</published>
    <updated>2019-04-12T03:14:41.571Z</updated>
    
    <content type="html"><![CDATA[<p>Run:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev react-test-renderer</span><br></pre></td></tr></table></figure></p><p>Setup without Create React App</p><p>If you have an existing application you’ll need to install a few packages to make everything work well together. We are using the babel-jest package and the react babel preset to transform our code inside of the test environment.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev jest babel-jest @babel/preset-env @babel/preset-react react-test-renderer</span><br></pre></td></tr></table></figure><p>Example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;react&quot;: &quot;&lt;current-version&gt;&quot;,</span><br><span class="line">    &quot;react-dom&quot;: &quot;&lt;current-version&gt;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel/preset-env&quot;: &quot;&lt;current-version&gt;&quot;,</span><br><span class="line">    &quot;@babel/preset-react&quot;: &quot;&lt;current-version&gt;&quot;,</span><br><span class="line">    &quot;babel-jest&quot;: &quot;&lt;current-version&gt;&quot;,</span><br><span class="line">    &quot;jest&quot;: &quot;&lt;current-version&gt;&quot;,</span><br><span class="line">    &quot;react-test-renderer&quot;: &quot;&lt;current-version&gt;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;jest&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  // babel.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [&apos;@babel/preset-env&apos;, &apos;@babel/preset-react&apos;],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// Link.react.js</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">const STATUS = &#123;</span><br><span class="line">  HOVERED: &apos;hovered&apos;,</span><br><span class="line">  NORMAL: &apos;normal&apos;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default class Link extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">    this._onMouseEnter = this._onMouseEnter.bind(this);</span><br><span class="line">    this._onMouseLeave = this._onMouseLeave.bind(this);</span><br><span class="line"></span><br><span class="line">    this.state = &#123;</span><br><span class="line">      class: STATUS.NORMAL,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _onMouseEnter() &#123;</span><br><span class="line">    this.setState(&#123;class: STATUS.HOVERED&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _onMouseLeave() &#123;</span><br><span class="line">    this.setState(&#123;class: STATUS.NORMAL&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;a</span><br><span class="line">        className=&#123;this.state.class&#125;</span><br><span class="line">        href=&#123;this.props.page || &apos;#&apos;&#125;</span><br><span class="line">        onMouseEnter=&#123;this._onMouseEnter&#125;</span><br><span class="line">        onMouseLeave=&#123;this._onMouseLeave&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;this.props.children&#125;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>example: </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Run:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="React" scheme="http://pengw00.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>leetcode380InsertDeleteGetRandom</title>
    <link href="http://pengw00.github.io/2019/04/10/leetcode380InsertDeleteGetRandom/"/>
    <id>http://pengw00.github.io/2019/04/10/leetcode380InsertDeleteGetRandom/</id>
    <published>2019-04-10T16:16:16.000Z</published>
    <updated>2019-04-12T03:15:41.871Z</updated>
    
    <content type="html"><![CDATA[<p>Leetcode 380 insert delete getRandom O(1)</p><p>Folowup: duplicated number is allowed.<br><code>`</code><br>public class RandomizedSet{<br>    ArrayList<integer> nums;</integer></p><p>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Leetcode 380 insert delete getRandom O(1)&lt;/p&gt;
&lt;p&gt;Folowup: duplicated number is allowed.&lt;br&gt;&lt;code&gt;`&lt;/code&gt;&lt;br&gt;public class RandomizedSet{&lt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>babel+gulp+ESlint</title>
    <link href="http://pengw00.github.io/2019/04/09/babel-gulp-ESlint/"/>
    <id>http://pengw00.github.io/2019/04/09/babel-gulp-ESlint/</id>
    <published>2019-04-10T01:12:05.000Z</published>
    <updated>2019-04-10T16:40:52.948Z</updated>
    
    <content type="html"><![CDATA[<p>Use Babel in Build tools<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev gulp </span><br><span class="line">$ npm install --save-dev gulp-babel</span><br></pre></td></tr></table></figure></p><p>Following gulp code demonstrates how to compile all JS files in a src/js directory into ES5 JS files and output to a dist/js directory.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&quot;gulp&quot;);</span><br><span class="line">var babel = require(&quot;gulp-babel&quot;);</span><br><span class="line"></span><br><span class="line">gulp.task(&quot;default&quot;, function () &#123;</span><br><span class="line">    return gulp.src(&quot;src/js/*.js&quot;)</span><br><span class="line">        .pipe(babel())</span><br><span class="line">        .pipe(gulp.dest(&quot;dist/js&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Use Babel in Build tools&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="JS" scheme="http://pengw00.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>stack&amp;calculator problem(recursive a little bit)</title>
    <link href="http://pengw00.github.io/2019/04/06/stack-calculator-problem-recursive-a-little-bit/"/>
    <id>http://pengw00.github.io/2019/04/06/stack-calculator-problem-recursive-a-little-bit/</id>
    <published>2019-04-06T06:57:25.000Z</published>
    <updated>2019-04-06T06:58:21.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stack-amp-calculator-problem"><a href="#stack-amp-calculator-problem" class="headerlink" title="stack&amp;calculator problem"></a>stack&amp;calculator problem</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;stack-amp-calculator-problem&quot;&gt;&lt;a href=&quot;#stack-amp-calculator-problem&quot; class=&quot;headerlink&quot; title=&quot;stack&amp;amp;calculator problem&quot;&gt;&lt;/a&gt;st
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>背包问题 </title>
    <link href="http://pengw00.github.io/2019/04/06/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E2%80%9C/"/>
    <id>http://pengw00.github.io/2019/04/06/背包问题“/</id>
    <published>2019-04-06T06:22:15.000Z</published>
    <updated>2019-04-06T06:23:11.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背包问题及dp"><a href="#背包问题及dp" class="headerlink" title="背包问题及dp"></a>背包问题及dp</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背包问题及dp&quot;&gt;&lt;a href=&quot;#背包问题及dp&quot; class=&quot;headerlink&quot; title=&quot;背包问题及dp&quot;&gt;&lt;/a&gt;背包问题及dp&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://pengw00.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>find celebrity</title>
    <link href="http://pengw00.github.io/2019/04/06/find-celebrity/"/>
    <id>http://pengw00.github.io/2019/04/06/find-celebrity/</id>
    <published>2019-04-06T04:42:24.000Z</published>
    <updated>2019-04-06T04:48:52.976Z</updated>
    
    <content type="html"><![CDATA[<p>这道题类似于997 find the town judge。<br>但可以采用graph的方法，topological的bfs方法，计算每个点的入度和出度，找出那个入读为n-1的就是解。<br>另一个种方法是find celebrity的方法，先定义i=0；遍历找出一个candidate， 再遍历判断是否这个candidate满足谁都认识他和他不认识任何人两个条件，如果可以100%确定就是他。<br>废话不说：coding：<br>方法1: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int findJudge(int N, vector&lt;vector&lt;int&gt;&gt;&amp; trust) &#123;</span><br><span class="line">  vector&lt;vector&lt;int&gt;&gt; knows(N + 1, vector&lt;int&gt;(N + 1));</span><br><span class="line">  for (auto &amp;t : trust) knows[t[0]][t[1]] = 1;</span><br><span class="line">  return findCelebrity(N, knows);</span><br><span class="line">&#125;</span><br><span class="line">int findCelebrity(int n, vector&lt;vector&lt;int&gt;&gt;&amp; knows, int i = 1) &#123;</span><br><span class="line">  for (auto j = i + 1; j &lt;= n; ++j) if (knows[i][j]) i = j;</span><br><span class="line">  for (auto j = 1; j &lt; i; ++j) if (knows[i][j]) return -1;</span><br><span class="line">  for (auto j = 1; j &lt;= n; ++j) if (i != j &amp;&amp; !knows[j][i]) return -1;</span><br><span class="line">  return i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：<br>directed graph：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int findJudge(int N, vector&lt;vector&lt;int&gt;&gt;&amp; trust) &#123;</span><br><span class="line">        vector&lt;int&gt; count(N + 1, 0);</span><br><span class="line">        for (auto&amp; t : trust)</span><br><span class="line">            count[t[0]]--, count[t[1]]++;</span><br><span class="line">        for (int i = 1; i &lt;= N; ++i) &#123;</span><br><span class="line">            if (count[i] == N - 1) return i;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这道题类似于997 find the town judge。&lt;br&gt;但可以采用graph的方法，topological的bfs方法，计算每个点的入度和出度，找出那个入读为n-1的就是解。&lt;br&gt;另一个种方法是find celebrity的方法，先定义i=0；遍历找出一个ca
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>viewEncasulation</title>
    <link href="http://pengw00.github.io/2019/04/04/viewEncasulation/"/>
    <id>http://pengw00.github.io/2019/04/04/viewEncasulation/</id>
    <published>2019-04-04T23:13:16.000Z</published>
    <updated>2019-04-04T23:13:16.379Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>babel and webpack</title>
    <link href="http://pengw00.github.io/2019/04/04/babel-and-webpack/"/>
    <id>http://pengw00.github.io/2019/04/04/babel-and-webpack/</id>
    <published>2019-04-04T18:23:42.000Z</published>
    <updated>2019-04-04T18:36:30.366Z</updated>
    
    <content type="html"><![CDATA[<p>#Babel and webpack</p><h2 id="Babel-is-Javacsript-compiler"><a href="#Babel-is-Javacsript-compiler" class="headerlink" title="Babel is Javacsript compiler."></a>Babel is Javacsript compiler.</h2><p>webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging ##</p><p>In this unit, you modify the existing application and use some new ECMAScript 6 features. You then set up a build environment using Babel and Webpack.</p><p>Step 1: using new ECMAScript 6 Features</p><p>in app.js with arrow functions and let %!#$!#</p><p>Step 2: Setup Babel and Webpack<br>install webpack and babel<br>in folder create webpack.config.js:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line"> var webpack = require(&apos;webpack&apos;);</span><br><span class="line"> module.exports = &#123;</span><br><span class="line">     entry: &apos;./js/app.js&apos;,</span><br><span class="line">     output: &#123;</span><br><span class="line">         path: path.resolve(__dirname, &apos;build&apos;),</span><br><span class="line">         filename: &apos;app.bundle.js&apos;</span><br><span class="line">     &#125;,</span><br><span class="line">     module: &#123;</span><br><span class="line">         loaders: [</span><br><span class="line">             &#123;</span><br><span class="line">                 test: /\.js$/,</span><br><span class="line">                 loader: &apos;babel-loader&apos;,</span><br><span class="line">                 query: &#123;</span><br><span class="line">                     presets: [&apos;es2015&apos;]</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         ]</span><br><span class="line">     &#125;,</span><br><span class="line">     stats: &#123;</span><br><span class="line">         colors: true</span><br><span class="line">     &#125;,</span><br><span class="line">     devtool: &apos;source-map&apos;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p><p> Step 4: </p><p> package.json in your favorite code editor. In the scripts section, add a script named webpack that builds your application using Webpack and Babel. The scripts section should now look like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;webpack&quot;: &quot;webpack&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;http-server&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><ol start="5"><li>Create build folder to the compile version of the application<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The build process will fail if you don’t create the build directory</span><br></pre></td></tr></table></figure></li></ol><p>Step next:  Build and Run</p><ol><li>npm run webpack</li></ol><p>open index.html modified the <script> tag to load the build/app.bundle.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;build/app.bundle.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p></script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Babel and webpack&lt;/p&gt;
&lt;h2 id=&quot;Babel-is-Javacsript-compiler&quot;&gt;&lt;a href=&quot;#Babel-is-Javacsript-compiler&quot; class=&quot;headerlink&quot; title=&quot;Babel is J
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://pengw00.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>js null vs undefined</title>
    <link href="http://pengw00.github.io/2019/04/04/js-null-vs-undefined/"/>
    <id>http://pengw00.github.io/2019/04/04/js-null-vs-undefined/</id>
    <published>2019-04-04T15:19:28.000Z</published>
    <updated>2019-04-04T15:33:14.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="null-vs-undefined"><a href="#null-vs-undefined" class="headerlink" title="null vs undefined"></a>null vs undefined</h1><p>What is null?<br>There are two features of null you should understand:</p><pre><code>null is an empty or non-existent value.null must be assigned.</code></pre><p>ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let a = null;</span><br><span class="line">console.log(a);</span><br><span class="line">// null</span><br></pre></td></tr></table></figure></p><p>Undefined most typically means a variable has been declared, but not defined. For example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let b;</span><br><span class="line">console.log(b);</span><br><span class="line">// undefined</span><br><span class="line"></span><br><span class="line">let c = undefined;</span><br><span class="line">console.log(c);</span><br><span class="line">// undefined</span><br></pre></td></tr></table></figure></p><p>Finally, when looking up non-existent properties in an object, you will receive undefined:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var d = &#123;&#125;;</span><br><span class="line">console.log(d.fake);</span><br><span class="line">// undefined</span><br></pre></td></tr></table></figure></p><p>Here’s a full list for six falsy values:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">0 (zero)</span><br><span class="line">“” (empty string)</span><br><span class="line">null</span><br><span class="line">undefined</span><br><span class="line">NaN (Not A Number)</span><br></pre></td></tr></table></figure></p><p>Interestingly enough, when using typeof to test null, it returns object:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let a = null;</span><br><span class="line">let b;</span><br><span class="line">console.log(typeof a);</span><br><span class="line">// object</span><br><span class="line">console.log(typeof b);</span><br><span class="line">// undefined</span><br></pre></td></tr></table></figure></p><p>Null !== undefined<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null !== undefined</span><br></pre></td></tr></table></figure></p><p>But, and this may surprise you, null loosely equals undefined.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null == undefined</span><br></pre></td></tr></table></figure></p><p>a great example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let logHi = (str = &apos;hi&apos;) =&gt; &#123;</span><br><span class="line">  console.log(str);</span><br></pre></td></tr></table></figure></p><p>This function requires one parameter and sets the default of that parameter to hi if it isn’t supplied. Here’s what that looks like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">logHi();</span><br><span class="line">// hi</span><br><span class="line">logHi(&apos;bye&apos;);</span><br><span class="line">// bye</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>With default parameters, undefined will use the default while null does not.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logHi(undefined);</span><br><span class="line">// hi</span><br><span class="line">logHi(null);</span><br><span class="line">// null</span><br></pre></td></tr></table></figure></p><p>Summary<br>null is an assigned value. It means nothing.<br>undefined typically means a variable has been declared but not defined yet.<br>null and undefined are falsy values.<br>null and undefined are both primitives. However an error shows that typeof null = object.<br>null !== undefined but null == undefined.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;null-vs-undefined&quot;&gt;&lt;a href=&quot;#null-vs-undefined&quot; class=&quot;headerlink&quot; title=&quot;null vs undefined&quot;&gt;&lt;/a&gt;null vs undefined&lt;/h1&gt;&lt;p&gt;What is nu
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://pengw00.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>didmount&amp;&amp;willunmount</title>
    <link href="http://pengw00.github.io/2019/04/04/didmount-willunmount/"/>
    <id>http://pengw00.github.io/2019/04/04/didmount-willunmount/</id>
    <published>2019-04-04T14:21:11.000Z</published>
    <updated>2019-04-04T14:49:13.907Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">export default class A extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">    &#125;</span><br><span class="line">    scroll1（）&#123;&#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        window.addEventListener(&apos;scroll&apos;, this.srcoll1.bind(this));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    componentWillUnmount()&#123;</span><br><span class="line">        window.removeEventListener(&apos;scroll&apos;, this.srcoll1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>when using event handler in render(), need to bind this to the function<br>inside constructor, it will be global. otherwise, everytime inside render() we need to bind this when we use the method everytime, it will be awaste of time.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">export default class A extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.scroll1 = this.scroll1.bind(this)</span><br><span class="line">    &#125;</span><br><span class="line">    scroll1（）&#123;&#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        window.addEventListener(&apos;scroll&apos;, this.scroll1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    componentWillUnmount()&#123;</span><br><span class="line">        window.removeEventListener(&apos;scroll&apos;, this.scroll1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>bind方法，顾名思义，就是绑定的意思，到底是怎么绑定然后怎么用呢，下面就来说说我对这个方法的理解。</p><p>bind的使用和call，apply的区别：都是将方法的主人绑定，this指向全局object。<br>bind will not be executed imediately while call, aply will execute right away.<br>为什么要创建绑定函数，就是当我们调用某些函数的时候是要在特定环境下才能调用到，所以我们就要把函数放在特定环境下，就是使用bind把函数绑定到特定的所需的环境下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="React" scheme="http://pengw00.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>topological sort template</title>
    <link href="http://pengw00.github.io/2019/04/04/topological-sort-template/"/>
    <id>http://pengw00.github.io/2019/04/04/topological-sort-template/</id>
    <published>2019-04-04T04:46:18.000Z</published>
    <updated>2019-04-04T21:15:45.716Z</updated>
    
    <content type="html"><![CDATA[<p>2.怎么得出拓扑序？</p><p>有两种方法，分别基于BFS和DFS，时间复杂度都是O(|V| + |E|)。<br>Topological Sort: DFS and BFS<br>DFS:<br>据说这是神书《算法导论》中提到的算法：用深度搜索来遍历整个图，采用一个数组来保存每个顶点完成的时间，这样这个数组就存放了按先后顺序访问完成的顶点了。然后我们按照顶点访问的完成时间从大到小排序，得到的就是一个拓扑序了，具体证明如下（来自其他博客）：&amp;……%¥¥……&amp;&amp;</p><p>Coding:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; topologicalSort(int n, vector&lt;pair&lt;int, int&gt; &gt;&amp; edges) &#123;</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        stack&lt;int&gt; s;</span><br><span class="line">        int * isVisited = new int[n];</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            isVisited[i] = 0;</span><br><span class="line">        &#125; </span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            if (!isVisited[i]) dfs(edges, s, isVisited, i);</span><br><span class="line">        &#125;</span><br><span class="line">        while (!s.empty()) &#123;</span><br><span class="line">            res.push_back(s.top());</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    void dfs(vector&lt;pair&lt;int, int&gt; &gt;&amp; edges, stack&lt;int&gt; &amp; s, int * isVisited, int u) &#123;</span><br><span class="line">        isVisited[u] = 1;</span><br><span class="line">        for (int i = 0; i &lt; edges.size(); i++) &#123;</span><br><span class="line">            if (edges[i].first == u &amp;&amp; !isVisited[edges[i].second]) &#123;</span><br><span class="line">                dfs(edges, s, isVisited, edges[i].second);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s.push(u);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>BFS:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; topologicalSort(int n, vector&lt;pair&lt;int, int&gt; &gt;&amp; edges) &#123;</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        vector&lt;vector&lt;int&gt; &gt; newedges(n, vector&lt;int&gt;());</span><br><span class="line">        queue&lt;int&gt; q;</span><br><span class="line">        vector&lt;int&gt; in_degree(n, 0);</span><br><span class="line">        for (int i = 0; i &lt; edges.size(); i++) &#123;</span><br><span class="line">            in_degree[edges[i].second]++;</span><br><span class="line">            newedges[edges[i].first].push_back(edges[i].second);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            if (in_degree[i] == 0) &#123;</span><br><span class="line">                q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        while (!q.empty()) &#123;</span><br><span class="line">            int front = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            res.push_back(front);</span><br><span class="line">            for (int i = 0; i &lt; newedges[front].size(); i++) &#123;</span><br><span class="line">                in_degree[newedges[front][i]]--;</span><br><span class="line">                if (in_degree[newedges[front][i]] == 0) q.push(newedges[front][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>4.抛开这道题目——有环情况的判断</p><p>可以利用上面的dfs方法，比如isVisited这个数组，我们可以多增一种情况，比如0为未访问，1为已访问，-1为正在访问，当dfs搜索时遇到了一条边终止顶点对应的isVisited元素为-1时，就说明图中有环了（为-1说明我们是从这个顶点开始dfs的，现在又遇到了这个顶点…）。</p><p>另外一种判断图是否有环的方法，借助bfs（dfs也可，但既然用了dfs，直接用上面的方法好了），假如“生成拓扑序”后，还有顶点不在这个“拓扑序”里面，则图就有环了（加双引号是因为不能真正称作“拓扑序”啊）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2.怎么得出拓扑序？&lt;/p&gt;
&lt;p&gt;有两种方法，分别基于BFS和DFS，时间复杂度都是O(|V| + |E|)。&lt;br&gt;Topological Sort: DFS and BFS&lt;br&gt;DFS:&lt;br&gt;据说这是神书《算法导论》中提到的算法：用深度搜索来遍历整个图，采用一个数
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://pengw00.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>路径选择的dp问题之三角形最小路径和</title>
    <link href="http://pengw00.github.io/2019/04/03/%E8%B7%AF%E5%BE%84%E9%80%89%E6%8B%A9%E7%9A%84dp%E9%97%AE%E9%A2%98%E4%B9%8B%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <id>http://pengw00.github.io/2019/04/03/路径选择的dp问题之三角形最小路径和/</id>
    <published>2019-04-04T03:16:36.000Z</published>
    <updated>2019-04-04T04:16:37.558Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://blog.csdn.net/xdzhangzhenhao/article/details/81356095" target="_blank" rel="noopener">https://blog.csdn.net/xdzhangzhenhao/article/details/81356095</a><br><a href="http://www.cnblogs.com/shizhh/p/5302852.html" target="_blank" rel="noopener">http://www.cnblogs.com/shizhh/p/5302852.html</a> 动态规划</p><ol start="120"><li>三角形最小路径和</li></ol><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p><p>例如，给定三角形：</p><p>[<br>     [2],<br>    [3,4],<br>   [6,5,7],<br>  [4,1,8,3]<br>]<br>自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。</p><p>如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分.暂时没想到。。。（可能是用in-place方法）可行。</p><p>这道题类似于hmm的路径中选择概率最大的乘织。<br>采用topdown的dp 方法，最顶端的点决定于左右下方两侧的点的minsum，不能采用bottomup的方法。因为可能出现local最优值。<br>思路是经过当前节点的最小路径为左右节点的路径的最小值加自身，从上往下递归（top down），如果从下往上选，这个思路将是错的，因为你的局部最小并不可以确定最优会经过这里，所以从源头定点开始。<br>采用递归的方法构造，minsum(trangle, 0, 0).<br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class Solution1 &#123;</span><br><span class="line"> </span><br><span class="line">private:</span><br><span class="line"> </span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; memo;</span><br><span class="line">//cache</span><br><span class="line">int m;// 行数</span><br><span class="line"> </span><br><span class="line">// i,j代表当前节点的索引</span><br><span class="line">int minPathSum(vector&lt;vector&lt;int&gt;&gt;&amp; triangle, int i, int j) &#123;</span><br><span class="line"> </span><br><span class="line">if (i == m - 1)</span><br><span class="line">return triangle[i][j];</span><br><span class="line"> </span><br><span class="line">// 相同结构子问题的递归</span><br><span class="line">if (memo[i][j] == -1) &#123;</span><br><span class="line">memo[i][j] = min(minPathSum(triangle, i + 1, j), minPathSum(triangle, i + 1, j + 1)) + triangle[i][j];</span><br><span class="line">cout &lt;&lt;&quot;memo[&quot;&lt;&lt;i&lt;&lt;&quot;][&quot;&lt;&lt;j&lt;&lt;&quot;] : &quot;&lt;&lt; memo[i][j] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return memo[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">int minimumTotal(vector&lt;vector&lt;int&gt;&gt;&amp; triangle) &#123;</span><br><span class="line"> </span><br><span class="line">if (triangle.size() == 0)</span><br><span class="line">return 0;</span><br><span class="line"> </span><br><span class="line">// triangle中应该都是正数吧</span><br><span class="line">int res;</span><br><span class="line">m = triangle.size();</span><br><span class="line">//构造cache容器</span><br><span class="line">for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">vector&lt;int&gt; tmp(triangle[i].size(), -1);</span><br><span class="line">memo.push_back(tmp);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">res = minPathSum(triangle, 0, 0);</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>//犹记得当日的nlp课程的hmm状态转移方法，yangsky算法，一个句子在一个概率字典里找出最有可能的点。当时查找路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/xdzhangzhenhao/article/details/81356095&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/xdzhang
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://pengw00.github.io/tags/algorithm/"/>
    
  </entry>
  
</feed>
