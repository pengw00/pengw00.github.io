<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>David w00&#39;s Tech Road</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pengw00.github.io/"/>
  <updated>2019-09-01T21:55:11.630Z</updated>
  <id>http://pengw00.github.io/</id>
  
  <author>
    <name>David w00</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dockerize MySQL server for REST API</title>
    <link href="http://pengw00.github.io/2019/09/01/Dockerize-MySQL-server-for-REST-API/"/>
    <id>http://pengw00.github.io/2019/09/01/Dockerize-MySQL-server-for-REST-API/</id>
    <published>2019-09-01T19:46:20.000Z</published>
    <updated>2019-09-01T21:55:11.630Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Dockerize MySQL server<br>A. launch a docker in local<br>B. Hosting the MySQL server in Docker container in IMAGE<br>C. Listening to the host port of MySQL server in local by whatever like Springboot<br>Rest API or Django Rest API</li></ol><p>Command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name=mysql-server --env=&quot;MYSQL_ROOT_PASSWORD=123456&quot; mysql</span><br><span class="line"># This runs on a detached mode</span><br><span class="line"># Open port 3306:3306</span><br><span class="line"># Name of the server: mysql-server</span><br><span class="line"># root password: 123456</span><br><span class="line"># Container is created from mysql image</span><br></pre></td></tr></table></figure></p><p>Notes: Check what other app is listening to the port on 3306<br>Command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-p 12345:3306</span><br><span class="line"># This is one method to check for the port on MAC OS</span><br><span class="line">netstat -vanp tcp | grep 3306</span><br></pre></td></tr></table></figure></p><p>– If you cannot connect to MySQL from another docker and got this error:<br><figure class="highlight plain"><figcaption><span>to load authentication plugin 'caching_sha2_password'. ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Then you can add the parameter below when running the container.</span><br><span class="line">It is because the newer version of MySQL uses caching_sha2_password instead of mysql_native_password</span><br><span class="line"></span><br><span class="line">``` mysqld --default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure></p><p>– you can access the MySQL through your host<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Through Host </span><br><span class="line">mysql -host 127.0.0.1 -P 3306 -protocol=tcp -u root -p</span><br><span class="line"></span><br><span class="line"># Through container</span><br><span class="line">Docker exec -ti mysql-server bash</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></p><p>Create user and database for connection</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE databaseName;</span><br><span class="line">CREATE USER &apos;dnguyen&apos;@&apos;localhost&apos; IDENITIFIED BY &apos;123456&apos;;</span><br><span class="line">GRANT ALL PRIVALEGES ON databaseName.* TO &apos;dnguyen&apos;@&apos;localhost&apos;;</span><br><span class="line">FLUSH PRIVALEGES;</span><br><span class="line">QUIT</span><br></pre></td></tr></table></figure><p>If you are using Django, here is what you need to put in the settings.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">      &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;databaseName&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;dnguyen&apos;, # or root</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;123456&apos;,</span><br><span class="line">        &apos;HOST&apos;: &apos;127.0.0.1&apos;,</span><br><span class="line">        &apos;PORT&apos;: &apos;3306&apos;, # or 12345</span><br><span class="line">        &apos;OPTIONS&apos;: &#123;</span><br><span class="line">            # Tell MySQLdb to connect with &apos;utf8mb4&apos; character set</span><br><span class="line">            &apos;charset&apos;: &apos;utf8mb4&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>That is that.</p><p>//Resources for mySQL and docker commands to practice.<br>//With Docker-composer set up docker-compose1.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:5.6</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_DATABASE: findeasily</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 88888888</span><br><span class="line">    volumes:</span><br><span class="line">      - mysql_data:/var/lib/mysql/data</span><br><span class="line">  redis:</span><br><span class="line">    image: &apos;redis:5.0-alpine&apos;</span><br><span class="line">    command: redis-server --requirepass 88888888</span><br><span class="line">    ports:</span><br><span class="line">      - &apos;6379:6379&apos;</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  mysql_data:</span><br></pre></td></tr></table></figure></p><p>or docker-compose2.yml<br>‘’’<br>version: ‘2’</p><p>services:</p><p>  mysql:<br>    image: mariadb:10.1.19<br>    ports:</p><pre><code>  - 8083:3306volumes:  - ./mysql:/var/lib/mysqlenvironment:  MYSQL_ROOT_PASSWORD: wp</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">So when you luanch the docker: ``` docker-compose up</span><br></pre></td></tr></table></figure><p>Access the mysql db with command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -p findeasily  --protocol=tcp -u root -p</span><br></pre></td></tr></table></figure></p><p>for the first docker-compose1.yml.</p><p>And for second docker-compose2.yml, we can access the mysql database with<br>Command like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br><span class="line">mysql -P 8083 --protocol=tcp -u root -p</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;Dockerize MySQL server&lt;br&gt;A. launch a docker in local&lt;br&gt;B. Hosting the MySQL server in Docker container in IMAGE&lt;br&gt;C. Listening t
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://pengw00.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Difference between patch and put in http request</title>
    <link href="http://pengw00.github.io/2019/08/31/Difference-between-patch-and-put-in-http-request/"/>
    <id>http://pengw00.github.io/2019/08/31/Difference-between-patch-and-put-in-http-request/</id>
    <published>2019-08-31T21:41:31.000Z</published>
    <updated>2019-09-01T16:44:47.734Z</updated>
    
    <content type="html"><![CDATA[<p>One explaining:<br>HTTP PUT method only allows a complete replacement of a document. A PATCH request on the other hand, is used to make changes to part of the resource at a location.</p><p>Second Explaining:<br>PATCH is a method which enclosed entity contains a set of instructions describing how a resource currently residing on the origin server should be modified to produce a new version. patch : patch request says . only send the data which one you want to update and it won’t effecting or changing other data</p><p>Third explaining:<br>The main difference between the PUT and PATCH method is that the PUT method uses the request URI to supply a modified version of the requested resource which replaces the original version of the resource whereas the PATCH method supplies a set of instructions to modify the resource.</p><p>Medium:<br> a PUT request always contains a full resource. This is necessary because, a necessary quality of PUT requests is idempotence — the quality of producing the same result even if the same request is made multiple times.</p><p> We could simply choose to send the data we need and have our server code update resources appropriately, but then, we’d loose the idempotence and its benefits such as reliable caching of responses on the network and reliable updates of resources from retries when the original request fails. </p><p> EDIT: Responses to PUT requests are not cacheable. If a PUT request finds a response in a cache infrastructure, that response (cache entry) should be treated as stale.<br>Patch:<br> A PATCH request on the other hand, is used to make changes to part of the resource at a location. That is, it PATCHES the resource — changing its properties. It is used to make minor updates to resources and it’s not required to be idempotent.</p><p> If we continue with our example above, we could easily add a new window to the house on plot 1 without having to ship a whole new house. All we have to do is ship the window and PATCH up the old house with a new window. Below is an example of the payload we’d have to send.<br> put:<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  address: &apos;plot 1&apos;,</span><br><span class="line">  owner: &apos;segun&apos;,</span><br><span class="line">  type: &apos;duplex&apos;,</span><br><span class="line">  color: &apos;green&apos;,</span><br><span class="line">  rooms: &apos;5&apos;,</span><br><span class="line">  kitchens: &apos;1&apos;,</span><br><span class="line">  windows: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>patch:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> windows: 21</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Since-PATCH-is-not-idempotent-failed-requests-are-not-automatically-re-attempted-on-the-network-Also-if-a-PATCH-request-is-made-to-a-non-existent-url-e-g-attempting-to-replace-the-front-door-of-a-non-existent-building-it-should-simply-fail-without-creating-a-new-resource-unlike-PUT-which-would-create-a-new-one-using-the-payload-Come-to-think-of-it-it’ll-be-odd-having-a-lone-door-at-a-house-address"><a href="#Since-PATCH-is-not-idempotent-failed-requests-are-not-automatically-re-attempted-on-the-network-Also-if-a-PATCH-request-is-made-to-a-non-existent-url-e-g-attempting-to-replace-the-front-door-of-a-non-existent-building-it-should-simply-fail-without-creating-a-new-resource-unlike-PUT-which-would-create-a-new-one-using-the-payload-Come-to-think-of-it-it’ll-be-odd-having-a-lone-door-at-a-house-address" class="headerlink" title="Since PATCH is not idempotent, failed requests are not automatically re-attempted on the network. Also, if a PATCH request is made to a non-existent url e.g attempting to replace the front door of a non-existent building, it should simply fail without creating a new resource unlike PUT, which would create a new one using the payload. Come to think of it, it’ll be odd having a lone door at a house address"></a>Since PATCH is not idempotent, failed requests are not automatically re-attempted on the network. Also, if a PATCH request is made to a non-existent url e.g attempting to replace the front door of a non-existent building, it should simply fail without creating a new resource unlike PUT, which would create a new one using the payload. Come to think of it, it’ll be odd having a lone door at a house address</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One explaining:&lt;br&gt;HTTP PUT method only allows a complete replacement of a document. A PATCH request on the other hand, is used to make c
      
    
    </summary>
    
    
      <category term="Http" scheme="http://pengw00.github.io/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>leetcode.975 Odd Even Jump</title>
    <link href="http://pengw00.github.io/2019/08/01/leetcode-975-Odd-Even-Jump/"/>
    <id>http://pengw00.github.io/2019/08/01/leetcode-975-Odd-Even-Jump/</id>
    <published>2019-08-02T04:39:43.000Z</published>
    <updated>2019-08-02T05:47:28.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dynamic-Programming"><a href="#dynamic-Programming" class="headerlink" title="dynamic Programming"></a>dynamic Programming</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public int oddEvenJumps(int[] A) &#123;</span><br><span class="line">        int N = A.length;</span><br><span class="line">        if (N &lt;= 1) return N;</span><br><span class="line">        boolean[] odd = new boolean[N];</span><br><span class="line">        boolean[] even = new boolean[N];</span><br><span class="line">        odd[N-1] = even[N-1] = true;</span><br><span class="line"></span><br><span class="line">        TreeMap&lt;Integer, Integer&gt; vals = new TreeMap();</span><br><span class="line">        vals.put(A[N-1], N-1);</span><br><span class="line">        for (int i = N-2; i &gt;= 0; --i) &#123;</span><br><span class="line">            int v = A[i];</span><br><span class="line">            if (vals.containsKey(v)) &#123;</span><br><span class="line">                odd[i] = even[vals.get(v)];</span><br><span class="line">                even[i] = odd[vals.get(v)];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Integer lower = vals.lowerKey(v);</span><br><span class="line">                Integer higher = vals.higherKey(v);</span><br><span class="line"></span><br><span class="line">                if (lower != null)</span><br><span class="line">                    even[i] = odd[vals.get(lower)];</span><br><span class="line">                if (higher != null) &#123;</span><br><span class="line">                    odd[i] = even[vals.get(higher)];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            vals.put(v, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int ans = 0;</span><br><span class="line">        for (boolean b: odd)</span><br><span class="line">            if (b) ans++;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;dynamic-Programming&quot;&gt;&lt;a href=&quot;#dynamic-Programming&quot; class=&quot;headerlink&quot; title=&quot;dynamic Programming&quot;&gt;&lt;/a&gt;dynamic Programming&lt;/h2&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Contest 147 Jul 27 2019</title>
    <link href="http://pengw00.github.io/2019/07/28/Leetcode-Contest-147-Jul-27-2019/"/>
    <id>http://pengw00.github.io/2019/07/28/Leetcode-Contest-147-Jul-27-2019/</id>
    <published>2019-07-28T15:13:37.000Z</published>
    <updated>2019-07-28T15:24:35.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="No-1-DP-problem"><a href="#No-1-DP-problem" class="headerlink" title="No.1 DP problem"></a>No.1 DP problem</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int tribonacci(int n) &#123;</span><br><span class="line">        if(n==0) return 0;</span><br><span class="line">        if(n==1) return 1;</span><br><span class="line">        if(n==2) return 1;</span><br><span class="line">        int[] dp = new int[n+1];</span><br><span class="line">        dp[0] = 0;</span><br><span class="line">        dp[1] = 1;</span><br><span class="line">        dp[2] = 1;</span><br><span class="line">        for(int i = 3; i &lt;= n; i++)&#123;</span><br><span class="line">            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="No-2-Alphebatic"><a href="#No-2-Alphebatic" class="headerlink" title="No.2 Alphebatic"></a>No.2 Alphebatic</h3><p>//Be careful to process from the<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string alphabetBoardPath(string target) &#123;</span><br><span class="line">        int r = 0, c = 0;</span><br><span class="line">        string moves = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        for (char letter : target) &#123;</span><br><span class="line">            int row = (letter - &apos;a&apos;) / 5, col = (letter - &apos;a&apos;) % 5;</span><br><span class="line"></span><br><span class="line">            while (c &gt; col) &#123;</span><br><span class="line">                moves += &apos;L&apos;;</span><br><span class="line">                c--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            while (r &gt; row) &#123;</span><br><span class="line">                moves += &apos;U&apos;;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            while (r &lt; row) &#123;</span><br><span class="line">                moves += &apos;D&apos;;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            while (c &lt; col) &#123;</span><br><span class="line">                moves += &apos;R&apos;;</span><br><span class="line">                c++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            moves += &apos;!&apos;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return moves;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="No-3-Most-number-of-Largest-grid-border"><a href="#No-3-Most-number-of-Largest-grid-border" class="headerlink" title="No.3 Most number of Largest grid border"></a>No.3 Most number of Largest grid border</h3><p>// accumulated grid solution </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int findLargestSquare(vector&lt;vector&lt;int&gt;&gt;&amp; mat) </span><br><span class="line">    &#123; </span><br><span class="line">    int max = 0; int m = mat.size() , n = mat[0].size();</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; hor(m,vector&lt;int&gt; (n,0)) , ver(m,vector&lt;int&gt; (n,0));</span><br><span class="line">   </span><br><span class="line">    for (int i=0; i&lt;m; i++) &#123; </span><br><span class="line">        for (int j=0; j&lt;n; j++) &#123; </span><br><span class="line">            if (mat[i][j] == 1) </span><br><span class="line">            &#123; </span><br><span class="line">                hor[i][j] = (j==0)? 1: hor[i][j-1] + 1;   // auxillary horizontal array</span><br><span class="line">                ver[i][j] = (i==0)? 1: ver[i-1][j] + 1;  // auxillary vertical array</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">        </span><br><span class="line">    for (int i = m-1; i&gt;=0; i--) &#123; </span><br><span class="line">        for (int j = n-1; j&gt;=0; j--) &#123; </span><br><span class="line">            int small = min(hor[i][j], ver[i][j]);  // choose smallest of horizontal and vertical value</span><br><span class="line">            while (small &gt; max) &#123; </span><br><span class="line">                if (ver[i][j-small+1] &gt;= small &amp;&amp;  hor[i-small+1][j] &gt;= small)  // check if square exists with &apos;small&apos; length</span><br><span class="line">                    max = small; </span><br><span class="line">                small--; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    return max*max; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;No-1-DP-problem&quot;&gt;&lt;a href=&quot;#No-1-DP-problem&quot; class=&quot;headerlink&quot; title=&quot;No.1 DP problem&quot;&gt;&lt;/a&gt;No.1 DP problem&lt;/h3&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode.528 Random Pick with Weight</title>
    <link href="http://pengw00.github.io/2019/07/25/leetcode-528-Random-Pick-with-Weight/"/>
    <id>http://pengw00.github.io/2019/07/25/leetcode-528-Random-Pick-with-Weight/</id>
    <published>2019-07-25T05:15:39.000Z</published>
    <updated>2019-07-25T05:19:11.827Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JS-version"><a href="#JS-version" class="headerlink" title="JS version"></a>JS version</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var solution = function(w)&#123;</span><br><span class="line">this.map = new Map();</span><br><span class="line">this.sum = 0;</span><br><span class="line">for(let i = 0; i &lt; w.length; i++)&#123;</span><br><span class="line">this.sum += w[i];</span><br><span class="line">this.map.set(this.sum, i);</span><br><span class="line">this.keys = [...this.map.keys()].sort((a, b) =&gt; a-b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">solution.prototype.pickIndex = function()&#123;</span><br><span class="line">const r = parseInt(Math.random() * this.sum);</span><br><span class="line">for(const key of this.keys)&#123;</span><br><span class="line">if(r &lt; key)&#123;</span><br><span class="line">return this.map.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;JS-version&quot;&gt;&lt;a href=&quot;#JS-version&quot; class=&quot;headerlink&quot; title=&quot;JS version&quot;&gt;&lt;/a&gt;JS version&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode_Contest_146</title>
    <link href="http://pengw00.github.io/2019/07/21/Leetcode-Contest-146/"/>
    <id>http://pengw00.github.io/2019/07/21/Leetcode-Contest-146/</id>
    <published>2019-07-22T03:14:20.000Z</published>
    <updated>2019-07-23T03:50:37.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1128-Number-of-Equivalent-Domino-Pairs"><a href="#1128-Number-of-Equivalent-Domino-Pairs" class="headerlink" title="1128. Number of Equivalent Domino Pairs"></a>1128. Number of Equivalent Domino Pairs</h2><p>check a list of dominoes, to see the number of pairs.<br>Ex: Input: dominoes = [[1, 2], [2,1], [3, 4], [5, 6]];<br>Outout: 1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">int numEquivDominoPairs(vector&lt;vector&lt;int&gt;&gt;&amp; dominoes)&#123;</span><br><span class="line">map&lt;pair&lt;int, int&gt;, int&gt; freq;</span><br><span class="line">long long total = 0;</span><br><span class="line">for(vector&lt;int&gt; domino: dominoes)&#123;</span><br><span class="line">if(domino[0] &gt; domino[1])&#123;</span><br><span class="line">swap(domino[0], domino[1]);</span><br><span class="line">&#125;</span><br><span class="line">total += freq[make_pair(domino[0], domino[1])]++;</span><br><span class="line">&#125; </span><br><span class="line">return total;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="leetcode-1129-Shortest-Path-with-Alternating-Colors"><a href="#leetcode-1129-Shortest-Path-with-Alternating-Colors" class="headerlink" title="leetcode.1129 Shortest Path with Alternating Colors"></a>leetcode.1129 Shortest Path with Alternating Colors</h2><p>BFS: 1 = red, 2 = blue, 0 = root-edge(special case)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public int[] shortestAlternatingPaths(int n, int[][] red_edges, int[][] blue_edges)&#123;</span><br><span class="line">List&lt;Integer&gt;[] res = new ArrayList[n], blues = new ArrayList[n];</span><br><span class="line">for(int[] e: red_edges)&#123;</span><br><span class="line">if(reds[e[0]]==null) reds[e[0]] = new ArrayList&lt;&gt;();</span><br><span class="line">reds[e[0]].add(e[1]);</span><br><span class="line"> &#125;</span><br><span class="line"> for(int[] e: blue_edges)&#123;</span><br><span class="line"> if(blues[e[0]]==null) blue[e[0]] = new ArrayList&lt;&gt;();</span><br><span class="line"> blues[e[0]].add(e[1]);</span><br><span class="line"> &#125;</span><br><span class="line"> Queue&lt;int[]&gt; q = new LinkedList&lt;&gt;();</span><br><span class="line"> int[] res = new int[n];</span><br><span class="line"> Arrays.fill(res, -1);</span><br><span class="line"> q.add(new int[]&#123;0, 0&#125;);</span><br><span class="line"> int moves = 0;</span><br><span class="line"> Set&lt;String&gt; seen = new HashSet&lt;&gt;();</span><br><span class="line"> while(!q.isEmpty())&#123;</span><br><span class="line"> int size = queue.size()&#123;</span><br><span class="line"> for(int i = 0; i &lt; size; i++)&#123;</span><br><span class="line"> int curr = q.remove();</span><br><span class="line"> String key = curr[0] + &quot; &quot; + curr[1];</span><br><span class="line"> if(seen.contains(key)) continue;</span><br><span class="line"> seen.add(key);</span><br><span class="line"> if(curr[1] == 2 || curr[1] == 0)</span><br><span class="line"> if(reds[curr[0]] != null)&#123;</span><br><span class="line"> for(int child: reds[curr[0]])</span><br><span class="line"> q.add(new int[]&#123;child, 1&#125;);</span><br><span class="line"> &#125; </span><br><span class="line"> if(curr[1]==1 || curr[1] == 0)</span><br><span class="line"> if(blues[curr[0]] != null)</span><br><span class="line"> for(int child: blues[curr[0]])</span><br><span class="line"> q.add(new int[]&#123;child, 2&#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> moves++;</span><br><span class="line"> &#125;</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Leetcode popular answers. initialize all nodes as unreachable(-1)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1128-Number-of-Equivalent-Domino-Pairs&quot;&gt;&lt;a href=&quot;#1128-Number-of-Equivalent-Domino-Pairs&quot; class=&quot;headerlink&quot; title=&quot;1128. Number of 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode.76 Minimum window string</title>
    <link href="http://pengw00.github.io/2019/06/29/leetcode-76-Minimum-window-string/"/>
    <id>http://pengw00.github.io/2019/06/29/leetcode-76-Minimum-window-string/</id>
    <published>2019-06-29T14:13:56.000Z</published>
    <updated>2019-06-29T14:39:31.167Z</updated>
    
    <content type="html"><![CDATA[<p>This Pro, at the first time I think of two pointer construct slidding windows, using map<br>but I find that it is so hard to continue with keep track of the status of  T string in the map. </p><p>the idea is constructed a window, using two pointer, begin &amp; end, end go forward, when the windows first contain the target word, begin pointer start go right, and once the map[c] ==0, it means that this char is from T. so we make map[c]++, and invalid the counter for next window.<br>the core code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">string minWindow(string s, string t)&#123;</span><br><span class="line">vector&lt;int&gt; map(128, 0);</span><br><span class="line">for(auto c: t) map[c]++;</span><br><span class="line">int counter = t.size(), begin = 0, end = 0, d = INT_MAX, head = 0;</span><br><span class="line">while(end &lt; s.size())&#123;</span><br><span class="line">if(map[s[end++]]-- &gt; 0) counter--; //this is hard to read, it means that every time it will //decrease</span><br><span class="line">while(counter==0)&#123;</span><br><span class="line">if(end-begin &lt; d) d = end - (head = begin);</span><br><span class="line">if(map[s[begin++]]++==0) counter++; //invalid the counter</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return d==INT_MAX?&quot;&quot;:s.substr(head, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>// here is the template for most substr problem using sliding window solution:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">int findSubstring(string s)&#123;</span><br><span class="line">        vector&lt;int&gt; map(128,0);</span><br><span class="line">        int counter; // check whether the substring is valid</span><br><span class="line">        int begin=0, end=0; //two pointers, one point to tail and one  head</span><br><span class="line">        int d; //the length of substring</span><br><span class="line"></span><br><span class="line">        for() &#123; /* initialize the hash map here */ &#125;</span><br><span class="line"></span><br><span class="line">        while(end&lt;s.size())&#123;</span><br><span class="line"></span><br><span class="line">            if(map[s[end++]]-- ?)&#123;  /* modify counter here */ &#125;</span><br><span class="line"></span><br><span class="line">            while(/* counter condition */)&#123; </span><br><span class="line">                 </span><br><span class="line">                 /* update d here if finding minimum*/</span><br><span class="line"></span><br><span class="line">                //increase begin to make it invalid/valid again</span><br><span class="line">                </span><br><span class="line">                if(map[s[begin++]]++ ?)&#123; /*modify counter here*/ &#125;</span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            /* update d here if finding maximum*/</span><br><span class="line">        &#125;</span><br><span class="line">        return d;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>//One thing needs to be mentioned is that when asked to find maximum substring, we should update maximum after the inner while loop to guarantee that the substring is valid. On the other hand, when asked to find minimum substring, we should update minimum inside the inner while loop.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int lengthOfLongestSubstring(string s) &#123;</span><br><span class="line">        vector&lt;int&gt; map(128,0);</span><br><span class="line">        int counter=0, begin=0, end=0, d=0; </span><br><span class="line">        while(end&lt;s.size())&#123;</span><br><span class="line">            if(map[s[end++]]++&gt;0) counter++; </span><br><span class="line">            while(counter&gt;0) if(map[s[begin++]]--&gt;1) counter--;</span><br><span class="line">            d=max(d, end-begin); //while valid, update d</span><br><span class="line">        &#125;</span><br><span class="line">        return d;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This Pro, at the first time I think of two pointer construct slidding windows, using map&lt;br&gt;but I find that it is so hard to continue wit
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Dry:Don&#39;t Repeat Yourself</title>
    <link href="http://pengw00.github.io/2019/06/11/Dry-Don-t-Repeat-Yourself/"/>
    <id>http://pengw00.github.io/2019/06/11/Dry-Don-t-Repeat-Yourself/</id>
    <published>2019-06-12T04:21:59.000Z</published>
    <updated>2019-06-12T04:23:05.960Z</updated>
    
    <content type="html"><![CDATA[<p>Don’t repeat yourself (DRY, or sometimes do not repeat yourself) is a principle of software development aimed at reducing repetition of software patterns,[1] replacing it with abstractions or using data normalization to avoid redundancy.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Don’t repeat yourself (DRY, or sometimes do not repeat yourself) is a principle of software development aimed at reducing repetition of s
      
    
    </summary>
    
    
      <category term="DesignPattern" scheme="http://pengw00.github.io/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 987. Vertical Order Traversal of a Binary Tree</title>
    <link href="http://pengw00.github.io/2019/06/09/Leetcode-987-Vertical-Order-Traversal-of-a-Binary-Tree/"/>
    <id>http://pengw00.github.io/2019/06/09/Leetcode-987-Vertical-Order-Traversal-of-a-Binary-Tree/</id>
    <published>2019-06-09T20:28:10.000Z</published>
    <updated>2019-06-09T19:28:10.254Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 146. LRU cache</title>
    <link href="http://pengw00.github.io/2019/06/09/Leetcode-146-LRU-cache/"/>
    <id>http://pengw00.github.io/2019/06/09/Leetcode-146-LRU-cache/</id>
    <published>2019-06-09T05:15:22.000Z</published>
    <updated>2019-06-09T04:15:22.111Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 967. Numbers With Same Consecutive Differences</title>
    <link href="http://pengw00.github.io/2019/06/08/Leetcode-967-Numbers-With-Same-Consecutive-Differences/"/>
    <id>http://pengw00.github.io/2019/06/08/Leetcode-967-Numbers-With-Same-Consecutive-Differences/</id>
    <published>2019-06-09T02:00:10.000Z</published>
    <updated>2019-06-09T02:14:00.799Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Solution 1</li></ul><p>Logic: BFS level by level, the previous level is diffrent from other level by the length, DP for state transformation. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Java:</span><br><span class="line">public int[] numsSameConsecDiff(int N, int K) &#123;</span><br><span class="line">        List&lt;Integer&gt; cur = Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);</span><br><span class="line">        for (int i = 2; i &lt;= N; ++i) &#123;</span><br><span class="line">            List&lt;Integer&gt; cur2 = new ArrayList&lt;&gt;();</span><br><span class="line">            for (int x : cur) &#123;</span><br><span class="line">                int y = x % 10;</span><br><span class="line">                if (x &gt; 0 &amp;&amp; y + K &lt; 10)</span><br><span class="line">                    cur2.add(x * 10 + y + K);</span><br><span class="line">                if (x &gt; 0 &amp;&amp; K &gt; 0 &amp;&amp; y - K &gt;= 0)</span><br><span class="line">                    cur2.add(x * 10 + y - K);</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur2;</span><br><span class="line">        &#125;</span><br><span class="line">        return cur.stream().mapToInt(j-&gt;j).toArray();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>C++:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; numsSameConsecDiff(int N, int K) &#123;</span><br><span class="line">        vector&lt;int&gt; cur = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 0&#125;;</span><br><span class="line">        for (int i = 2; i &lt;= N; ++i) &#123;</span><br><span class="line">            vector&lt;int&gt; cur2;</span><br><span class="line">            for (int x : cur) &#123;</span><br><span class="line">                int y = x % 10;</span><br><span class="line">                if (x &gt; 0 &amp;&amp; y + K &lt; 10)</span><br><span class="line">                    cur2.push_back(x * 10 + y + K);</span><br><span class="line">                if (x &gt; 0 &amp;&amp; K &gt; 0 &amp;&amp; y - K &gt;= 0)</span><br><span class="line">                    cur2.push_back(x * 10 + y - K);</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur2;</span><br><span class="line">        &#125;</span><br><span class="line">        return cur;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><ul><li>Solution 2: dfs find the path to construct a number and until all the number is added.</li></ul><p>Below are two different coding style for DFS. The point is that which one is more efficiency.<br>In C++ solution, it start from 1 to 9, and the dfs path is directly find the num+K or num-K, as goes further.<br>the Java solution start from the 0 case, and dfs by 0 to 9 check every possible case. </p><h5 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; numsSameConsecDiff(int N, int K)&#123;</span><br><span class="line">//base case from 1</span><br><span class="line">if(N==1) return &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;</span><br><span class="line">vector&lt;int&gt; res;</span><br><span class="line">//from 1 ... dfs, because 0 can not be in the front</span><br><span class="line">for(auto num = 1; num &lt;= 9; ++num)&#123;</span><br><span class="line">dfs(num, N-1, K, res);</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//dfs method</span><br><span class="line">void dfs(int num, int N, int K, vector&lt;int&gt; &amp;res)&#123;</span><br><span class="line">//terinal cases</span><br><span class="line">if(N==0) res.push_back(num);</span><br><span class="line">else&#123;</span><br><span class="line">//two path to find the final possible number</span><br><span class="line">if(num%10 + K&lt;=9) dfs(num*10 + num%10 + K, N-1, K, res);</span><br><span class="line">if(nums10 -K &gt;= 0) dfs(nums*10 + num%10 -K, N-1, K, res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public int[] numsSameConsecDiff(int N, int K) &#123;</span><br><span class="line">        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        if(N==0)</span><br><span class="line">            return new int[0];</span><br><span class="line">        if(N==1)</span><br><span class="line">list.add(0);      // edge case</span><br><span class="line">        dfs(N, K, list, 0);</span><br><span class="line">        return list.stream().mapToInt(i-&gt;i).toArray();   //list.toArray(new int[list.size()]); doesn&apos;t work for primitives</span><br><span class="line">    &#125;</span><br><span class="line">    public void dfs(int N, int K, List&lt;Integer&gt; list, int number)&#123;</span><br><span class="line">        if(N == 0)&#123;   // base case, if you have added enough number of integers then append it to list; Here N is used as the total digits in temporary number </span><br><span class="line">            list.add(number);</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=0; i&lt;10; ++i)&#123;</span><br><span class="line">            if(i==0 &amp;&amp; number ==0)    // Do not add 0 at begining of a number</span><br><span class="line">                continue;</span><br><span class="line">            else if(number == 0 &amp;&amp; i!=0)&#123;     // base case, we add all the digits when we do not have any previous digit to check if difference = K</span><br><span class="line">                dfs(N-1, K, list, i);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                if(Math.abs((number%10) - i )==K)&#123;</span><br><span class="line">                    dfs(N-1, K, list, number*10+i);    // General dfs to add the digit at the units place and reducing the number of digits by 1.</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Solution 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logic: BFS level by level, the previous level is diffrent from other level by the length, DP for state tra
      
    
    </summary>
    
    
      <category term="leetcodeDynamicProgramming" scheme="http://pengw00.github.io/tags/leetcodeDynamicProgramming/"/>
    
  </entry>
  
  <entry>
    <title>Inorder traversal iterative solution for multiple questions for Leetcode BST problem</title>
    <link href="http://pengw00.github.io/2019/06/06/Inorder-traversal-iterative-solution-for-multiple-questions-for-Leetcode-BST-problem/"/>
    <id>http://pengw00.github.io/2019/06/06/Inorder-traversal-iterative-solution-for-multiple-questions-for-Leetcode-BST-problem/</id>
    <published>2019-06-06T18:18:20.000Z</published>
    <updated>2019-06-06T17:38:02.412Z</updated>
    
    <content type="html"><![CDATA[<ul><li>for tree inorder traversal, we have many different coding solution: recursion and iterative with stack mainly. </li></ul><h4 id="Iterative-stack-for-basic-inorder-traversal"><a href="#Iterative-stack-for-basic-inorder-traversal" class="headerlink" title="Iterative stack for basic inorder traversal"></a>Iterative stack for basic inorder traversal</h4><p>leetcode 94. Binary Tree Inorder Traversal</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Integer&gt; inorderTraversal(TreeNode root)&#123;</span><br><span class="line">List&lt;Integer&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">if(root == null) return res;</span><br><span class="line">Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</span><br><span class="line">while(root != null || !stack.empty())&#123;</span><br><span class="line">while(root != null)&#123;</span><br><span class="line">stack.push(root);</span><br><span class="line">root = root.left;</span><br><span class="line">&#125;</span><br><span class="line">root = stack.pop();</span><br><span class="line">res.add(root.val);</span><br><span class="line">root = root.right;</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Use this basic structure to find the kth smallest node<h6 id="Leetcode-230-Kth-Smallest-Element-in-a-BST"><a href="#Leetcode-230-Kth-Smallest-Element-in-a-BST" class="headerlink" title="Leetcode 230. Kth Smallest Element in a BST"></a>Leetcode 230. Kth Smallest Element in a BST</h6></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public int KthSmallest(TreeNode root, int k)&#123;</span><br><span class="line">Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</span><br><span class="line">while(root != null || !stack.isEmpty())&#123;</span><br><span class="line">//go all the way down to the left bottom if root is valid</span><br><span class="line">while(root != null)&#123;</span><br><span class="line">stack.push(root);</span><br><span class="line">root = root.left;</span><br><span class="line">&#125;</span><br><span class="line">//pop the top and get the value and then go the left</span><br><span class="line">root = stack.pop();</span><br><span class="line">if(--k == 0) break;</span><br><span class="line">root = root.right;</span><br><span class="line">&#125;</span><br><span class="line">return root.val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Leetcode-98-Validate-Binary-Search-Tree"><a href="#Leetcode-98-Validate-Binary-Search-Tree" class="headerlink" title="Leetcode 98. Validate Binary Search Tree"></a>Leetcode 98. Validate Binary Search Tree</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public boolean isValidBST(TreeNode root)&#123;</span><br><span class="line">if(root == null) return true;</span><br><span class="line">Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();</span><br><span class="line">TreeNode pre = null;</span><br><span class="line">while(root != null || !stack.empty())&#123;</span><br><span class="line">while(root != null)&#123;</span><br><span class="line">stack.push(root);</span><br><span class="line">root = root.left;</span><br><span class="line">&#125;</span><br><span class="line">root = stack.pop();</span><br><span class="line">if(pre != null &amp;&amp; root.val &lt;= pre.val) return false;</span><br><span class="line">pre = root;</span><br><span class="line">root =root.right;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;for tree inorder traversal, we have many different coding solution: recursion and iterative with stack mainly. &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode.333 Largest BST Subtree</title>
    <link href="http://pengw00.github.io/2019/06/06/Leetcode-333-Largest-BST-Subtree/"/>
    <id>http://pengw00.github.io/2019/06/06/Leetcode-333-Largest-BST-Subtree/</id>
    <published>2019-06-06T16:22:40.000Z</published>
    <updated>2019-06-06T16:34:38.011Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it.</li></ul><p><strong> Note: </strong><br>A subtree must include all of its descendants.</p><h4 id="Similar-to-Leetcode-98"><a href="#Similar-to-Leetcode-98" class="headerlink" title="Similar to Leetcode.98"></a>Similar to Leetcode.98</h4><p><strong> Test Case </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: [10,5,15,1,8,null,7]</span><br><span class="line"></span><br><span class="line">   10 </span><br><span class="line">   / \ </span><br><span class="line">  5  15 </span><br><span class="line"> / \   \ </span><br><span class="line">1   8   7</span><br><span class="line"></span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The Largest BST Subtree in this case is the highlighted one.</span><br><span class="line">             The return value is the subtree&apos;s size, which is 3.</span><br></pre></td></tr></table></figure></p><p><strong>Follow up:</strong><br>Can you figure out ways to solve it with O(n) time complexity?</p><p><strong> logic </strong> </p><ul><li><ol><li>dfs, get the information from bottom(top down), should return the max value in the left node and the min value in the right node.</li></ol></li><li><ol start="2"><li>a inner class is useful for the data</li></ol></li><li><p>inner class:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Res&#123;</span><br><span class="line">        int size;</span><br><span class="line">        int lower;</span><br><span class="line">        int upper;</span><br><span class="line">        Res(int size, int lower, int upper)&#123;</span><br><span class="line">            this.size = size;</span><br><span class="line">            this.lower = lower;</span><br><span class="line">            this.upper = upper;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>main method:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public int largestBSTSubtree(TreeNode root) &#123;</span><br><span class="line">        if(root==null) return 0;</span><br><span class="line">        dfs(root);</span><br><span class="line">        return max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>dfs treversal</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private Res dfs(TreeNode root)&#123;</span><br><span class="line">    //fullfill the tree rule but the size = 0</span><br><span class="line">    if(root==null) &#123;return new Res(0, Integer.MAX_VALUE, Integer.MIN_VALUE);&#125;</span><br><span class="line">    Res left = dfs(root.left);</span><br><span class="line">    Res right = dfs(root.right);</span><br><span class="line">    //not fullfill the tree rule and size = -1 and the lower and upper is 0;</span><br><span class="line">    if(left.size==-1 || right.size == -1 || root.val &lt;= left.upper || root.val &gt;= right.lower)</span><br><span class="line">        return new Res(-1, 0, 0);</span><br><span class="line">    int size = left.size + 1 + right.size;</span><br><span class="line">    max = Math.max(size, max);</span><br><span class="line">    return new Res(size, Math.min(left.lower, root.val), Math.max(right.upper, root.val));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>the other way is to use parent as para in the dfs instead of use max and min value.</p><h3 id="Leetcode-98-Validate-the-BST-tree"><a href="#Leetcode-98-Validate-the-BST-tree" class="headerlink" title="Leetcode.98 Validate the BST tree"></a>Leetcode.98 Validate the BST tree</h3><p>DFS search</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Solution&#123;</span><br><span class="line">    public boolean isValidBST(root, long minVal, long maxVal)&#123;</span><br><span class="line">        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    private boolean isValidBST(TreeNode root, long minVal, long maxVal)&#123;</span><br><span class="line">        if(root==null) return true;</span><br><span class="line">        if(root.val &gt;= maxVal || root.val &lt;= minVal) return false;</span><br><span class="line">        return isValidBST(root.left, minVal, root.val) &amp;&amp; isValidBST(root.right, root.val, maxVal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Design a transportation payment method</title>
    <link href="http://pengw00.github.io/2019/06/05/Design-a-transportation-payment-method/"/>
    <id>http://pengw00.github.io/2019/06/05/Design-a-transportation-payment-method/</id>
    <published>2019-06-05T17:30:09.000Z</published>
    <updated>2019-06-05T19:46:52.230Z</updated>
    
    <content type="html"><![CDATA[<p>For example design a payment system for New York’s MTA. Tell how you would handle thousands of requests per second. Also how will you handle the different notifications systems such as text alert. How would you handle faults? Was asked this on an onsite round.</p><p><a href="https://leetcode.com/discuss/interview-question/system-design/305388/design-a-transportation-payment-system" target="_blank" rel="noopener">https://leetcode.com/discuss/interview-question/system-design/305388/design-a-transportation-payment-system</a></p><h3 id="One-solution"><a href="#One-solution" class="headerlink" title="One solution"></a>One solution</h3><p>Basically you need to build two services, one to handle payment and one to handle notifications (can be email, whatsapp, text, etc.).</p><p>Payment system’s responsibility to only deduct the payment using any of the payment gateways and call notification service to notify client. Payment needs to be done real-time and you have to handle client request through some HTTP API, so that you can show gateway page, amount, confirmation etc. After user consent is given you process the payment and queue a message to notification system to send alert. For payments, you can use any noSQL database, since we don’t have any relation as such and you get fast read/write.</p><p>Notification service’s responsibility to notify users through channels. Notifications can be near realtime, so you can make use of queue/worker, so that you can autoscale your workers whenever there are more messages in queue. Workers are responsible for sending alerts. More workers you have, faster you process notifications to users. You can even distinguish different workers for different communication channel and scale them separately. As database you can use any noSQL, cause I don’t see any relation as such.</p><p>You should ask more specific questions to interviewer during system design rounds to understand the scenario better.</p><ul><li><p>Replies<br>using SQL or noSQL</p></li><li><p>For payments it needs to be SQL . you want to maintain consistency in such highly atomic operations.</p></li><li>Need backup servers and replica in case some application servers or database severs fail.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For example design a payment system for New York’s MTA. Tell how you would handle thousands of requests per second. Also how will you han
      
    
    </summary>
    
    
      <category term="SystemDesign" scheme="http://pengw00.github.io/tags/SystemDesign/"/>
    
  </entry>
  
  <entry>
    <title>Ways to center CSS element</title>
    <link href="http://pengw00.github.io/2019/06/05/Ways-to-center-CSS-element/"/>
    <id>http://pengw00.github.io/2019/06/05/Ways-to-center-CSS-element/</id>
    <published>2019-06-05T16:23:32.000Z</published>
    <updated>2019-06-06T01:37:26.379Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-Most-common-one-Use-parent-and-child-div-as-well-as-text-align-center"><a href="#1-Most-common-one-Use-parent-and-child-div-as-well-as-text-align-center" class="headerlink" title="1. Most common one, Use parent and child div as well as text-align: center"></a>1. Most common one, Use parent and child div as well as text-align: center</h4><p><em>first, enclose the div you want to center with a parent element(wrapper or containner)</em>second, set the text-align: center to the parent element. </p><ul><li>third, set the target div to display: inline-block.</li></ul><p>By default, the div dispaly property is block, which will span the div to the whole<br>width of the page. By setting the display to inline-block, it ensure the div to the width which we set. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.blue-square-container &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blue-square &#123;</span><br><span class="line">  background-color: #0074D9;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Margin-Auto-Method"><a href="#Margin-Auto-Method" class="headerlink" title="Margin Auto Method"></a>Margin Auto Method</h4><ul><li><p>do not need a parent element.</p><h6 id="simply-apply-“margin-0-auto”-to-our-yellow-box-as-long-as-we-have-a-defined-width"><a href="#simply-apply-“margin-0-auto”-to-our-yellow-box-as-long-as-we-have-a-defined-width" class="headerlink" title="simply apply “margin: 0 auto” to our yellow box, as long as we have a defined width."></a>simply apply “margin: 0 auto” to our yellow box, as long as we have a defined width.</h6></li><li><p>“margin: 0 auto” is shorthand for setting the top and bottom margins to zero, and the left and right margins to auto.</p></li></ul><p>The width is important, since without the width defined, the browser will not<br>able to render the left and right margins to center the element. By setting the width the vbrowser will automatically distribute the right amount of margin on either side of the element.</p><p>The “0” portion can be set to any number of pixels you want for the top and bottom margins.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.yellow-square &#123;</span><br><span class="line">  background-color: #FFDC00;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another cool trick is just setting either margin-left to auto or margin-right to auto, which allows us to push our div to either the right or left side of the page, respectively (give this a try!).</p><h4 id="Absolute-Positioning-Method"><a href="#Absolute-Positioning-Method" class="headerlink" title="Absolute Positioning Method"></a>Absolute Positioning Method</h4><p>Absolute positioning an element allows us to essentially place the element wherever we want it on the page…with one drawback.</p><h5 id="Absolute-positioning-removes-the-element-from-the-flow-of-the-page"><a href="#Absolute-positioning-removes-the-element-from-the-flow-of-the-page" class="headerlink" title="Absolute positioning removes the element from the flow of the page."></a>Absolute positioning removes the element from the flow of the page.</h5><p>there are three steps we need to remember:</p><ul><li>1.Set the element’s position property to absolute</li><li>2.Apply “left: 50%” to the element</li><li>3.Set a margin-left of half of the element’s width(negative adjust)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.green-square &#123;</span><br><span class="line">  background-color: #3D9970;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 50%;</span><br><span class="line">  margin-left: -50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Transform-Translate-Method"><a href="#Transform-Translate-Method" class="headerlink" title="Transform/Translate Method"></a>Transform/Translate Method</h4><p>*Up until now we’ve only dealt with centering things horizontally, but what if we want to put something right in the middle of the page? both horizontally and vertically.</p><ul><li>transform property set as translate can shift the x and y axios.</li></ul><p>so the code like this, set both the left and top edge to 50%; and shift negative -50% for both sides.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.red-square &#123;</span><br><span class="line">  background-color: #FF4136;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By setting the top property to 50% as well, I’m telling the browser to line up the top edge of our red square with the middle of the page vertically. But like in the previous example, we don’t want the edges to be lined up with the center, we want the center of our square to fit right on top of the center of our page.</p><p>There are many cool things you can do with transform, such as translating, rotating, and scaling animations, but for this example, we’ll be using translate.</p><p>We give the transform property “transform: translate(-50%, -50%)” and voila!</p><p>Our red square is centered both horizontally and vertically!</p><p>I love this method, because regardless of what the width or the height of our element is, it will always be in the center of the page.</p><p>This method is used frequently in responsive design and doesn’t require margins to be defined, like in the absolute positioning method.</p><h4 id="Flexbox-Method"><a href="#Flexbox-Method" class="headerlink" title="Flexbox Method"></a>Flexbox Method</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">html,</span><br><span class="line">body &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.purple-square-container &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.purple-square &#123;</span><br><span class="line">  background-color: #B10DC9;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 300px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The four steps to centering horizontally and vertically with Flexbox are the following:</p><ul><li>HTML, body, and parent container need to have a height of 100%</li><li>Set display to flex on parent container</li><li>Set align-items to center on parent container</li><li>Set justify-content to center on parent container</li></ul><p>Setting display to flex on the parent defines it as a flex container.</p><p>By setting align-items to center, we’re saying that the children or flex items are to be centered vertically within the parent.</p><p>Justify-content works in the same way, but in the horizontal direction for our example.</p><p>This method goes well because again, it’s both responsive and doesn’t require any margin calculations.</p><p>A tutorial about <a href="https://flexboxfroggy.com/" target="_blank" rel="noopener">flexbox</a></p><p><a href="https://www.freecodecamp.org/news/how-to-center-things-with-style-in-css-dc87b7542689/" target="_blank" rel="noopener">source link</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-Most-common-one-Use-parent-and-child-div-as-well-as-text-align-center&quot;&gt;&lt;a href=&quot;#1-Most-common-one-Use-parent-and-child-div-as-wel
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://pengw00.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Redux-starter-kit usage</title>
    <link href="http://pengw00.github.io/2019/06/05/Redux-starter-kit-usage/"/>
    <id>http://pengw00.github.io/2019/06/05/Redux-starter-kit-usage/</id>
    <published>2019-06-05T14:02:13.000Z</published>
    <updated>2019-06-05T14:41:28.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><ul><li>Use redux-starter-kit to general boilerplate code for redux to faster the development for react app. <h5 id="setup-store-is-anoying"><a href="#setup-store-is-anoying" class="headerlink" title="setup store is anoying"></a>setup store is anoying</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; applyMiddleware, compose, createStore &#125; from &apos;redux&apos;;</span><br><span class="line">import &#123; composeWithDevTools &#125; from &apos;redux-devtools-extension&apos;;</span><br><span class="line">import thunkMiddleware from &apos;redux-thunk&apos;</span><br><span class="line"></span><br><span class="line">import monitorReducersEnhancer from &apos;./enhancers/monitorReducers&apos;;</span><br><span class="line">import loggerMiddleware from &apos;./middleware/logger&apos;;</span><br><span class="line">import rootReducer from &apos;./reducers&apos;</span><br><span class="line"></span><br><span class="line">export default function configureStore(preloadedState) &#123;</span><br><span class="line">  const middlewares = [loggerMiddleware, thunkMiddleware];</span><br><span class="line">  const middlewareEnhancer = applyMiddleware(...middlewares);</span><br><span class="line"></span><br><span class="line">  const enhancers = [middlewareEnhancer, monitorReducersEnhancer];</span><br><span class="line">  const composedEnhancers = composeWithDevTools(...enhancers);</span><br><span class="line"></span><br><span class="line">  const store = createStore(rootReducer, preloadedState, composedEnhancers);</span><br><span class="line"></span><br><span class="line">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; module.hot) &#123;</span><br><span class="line">    module.hot.accept(&apos;./reducers&apos;, () =&gt; store.replaceReducer(rootReducer));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>typically you will first create the const action type and action creaters in two different file2.<br>For example: you have a container component that has a button that when clicked, dispatches an action thru a bound action creator. To see how Redux handles this action (e.g. state changes via reducer and side effect via middleware), you would typically do the following steps:</li></ol><p>Go to the file where the action creator was defined and see what action type constant is being used.<br>Go to the reducer file where the action type constant you found in the previous step is being used and see how the action is being handled via the switch statement in your reducer.<br>If you have a middleware like redux-saga, you would go to the saga file and also look for the the action-type constant and see how the action is being handled. Also in this file, you would normally see both the action type constant and action creator being imported.</p><h5 id="two-seperate-files-for-action-type-and-creaters"><a href="#two-seperate-files-for-action-type-and-creaters" class="headerlink" title="two seperate files for action type and creaters"></a>two seperate files for action type and creaters</h5><p>the first steps const and creaters is anoying, right?</p><p>What if you could skip step one and just use your action creator to handle an action in your reducers and middleware? What if you could reduce the amount of files that are being imported/used and just have one file that represents an action?</p><h5 id="Problem-Touching-4-files-to-implement-a-simple-state"><a href="#Problem-Touching-4-files-to-implement-a-simple-state" class="headerlink" title="Problem Touching 4 files to implement a simple state"></a>Problem Touching 4 files to implement a simple state</h5><p>Have you added a state in your component using redux and you end up touching constants.js, actions.js, reducer.js and container-component.js? What more if you have a middleware for side-effect like saga?</p><p>This process can be tedious for implementing things that are so simple. Also, having too many files just make your code fragmented that it ends up difficult to reason about.</p><p>What if you could increase cohesion by bundling these pieces together into an isolated, self-contained module?</p><h3 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h3><p>Addressing Problems above with Redux Starter Kit<br>Redux Starter Kit is a library created by the same team who maintains Redux, and it offers a set of tools to make using Redux easier. Now, let’s see how this library can solve the 3 problems we mentioned above.</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><ul><li>configureStore<br>Redux Starter Kit has a configureStore function that abstract a lot of boilerplate code (like we had on Problem #1) and adds some defaults to make setting up a Redux store a breeze</li></ul><p>Setup store will be like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; configureStore &#125; from &apos;redux-starter-kit&apos;;</span><br><span class="line">import rootReducer from &apos;./reducers&apos;;</span><br><span class="line"></span><br><span class="line">const store = configureStore(&#123; reducer: rootReducer &#125;); </span><br><span class="line"></span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure></p><p>configureStore also allows you to pass some options so you could customize your store:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; configureStore, getDefaultMiddleware &#125; from &apos;redux-starter-kit&apos;;</span><br><span class="line">import monitorReducersEnhancer from &apos;./enhancers/monitorReducers&apos;; </span><br><span class="line">import loggerMiddleware from &apos;./middleware/logger&apos;;</span><br><span class="line">import rootReducer from &apos;./reducers&apos;;</span><br><span class="line"></span><br><span class="line">const store = configureStore(&#123; </span><br><span class="line">   reducer: rootReducer, </span><br><span class="line">   middleware: [loggerMiddleware, …getDefaultMiddleware()],</span><br><span class="line">   preloadedState, </span><br><span class="line">   enhancers: [monitorReducersEnhancer],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ul><li>createAction</li></ul><p>This library has a createAction function that combines action type and action creator declarations into one, so you don’t have to create 2 separate files (constant.js and some-action.js).</p><p>This function returns an action creator that exposes a .type property so you can use it in your reducer and middleware to handle dispatched action. Here is an example of have you would create an action creator using createAction and how you can use the .type property in a reducer and saga:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// todo-actions.js</span><br><span class="line">import &#123; createAction &#125; from &apos;redux-starter-kit&apos;;</span><br><span class="line"></span><br><span class="line">// Create an action creator</span><br><span class="line">export const addTodo = createAction(&apos;TODO/ADD_TODO&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// todo-reducers.js</span><br><span class="line">import &#123; addTodo &#125; from &apos;./todo-actions&apos;;</span><br><span class="line"></span><br><span class="line">export function todosReducer(state = [], action) &#123;</span><br><span class="line">  switch(action.type) &#123;</span><br><span class="line">    // Use the action creator&apos;s type property to handle action</span><br><span class="line">    case addTodo.type: </span><br><span class="line">      return state.concat(action.payload);   </span><br><span class="line">    default: </span><br><span class="line">      return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// todo-sagas.js</span><br><span class="line">import &#123; addTodo &#125; from &apos;./todo-actions&apos;;</span><br><span class="line"></span><br><span class="line">function* addTodoSaga(&#123; payload &#125;) &#123;</span><br><span class="line">  // Some side effects</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Use the action creator&apos;s type property to handle action</span><br><span class="line">export default takeLatest(addTodo.type, addTodoSaga);</span><br><span class="line">By getting rid of the constant file for your action type, we reduce the amount of mappings we have to make between your React component and your Redux files when debugging. Plus, less files to import!</span><br><span class="line"></span><br><span class="line">* Solution to Problem #3 — createSlice</span><br><span class="line"></span><br><span class="line">Redux Starter Kit has a createSlice that allows you to put together pieces in Redux that are logically related to each other into a module.</span><br><span class="line"></span><br><span class="line">Think of it as putting together pieces that works on a slice of state in the Redux state tree.</span><br><span class="line"></span><br><span class="line">Example:</span><br></pre></td></tr></table></figure><p>import { createSlice } from ‘redux-starter-kit’;</p><p>const todoSlice = createSlice({<br>  slice: ‘todos’,<br>  initialState: [],<br>  reducers: {<br>    addTodo(state, action) =&gt; [ …state, action.payload],<br>    removeTodo(state, action) =&gt; state.filter(todo =&gt; todo !== action.payload),<br>  },<br>});</p><p>// Extract the action creators object and the reducer<br>export const { actions, reducer } = todoSlice;</p><p>// Export the reducer, either as a default or named export<br>export default reducer;<br><code>`</code></p><p>Isn’t that better than creating 4 files for just a single state?</p><p>To know more about the concept behind createSlice, take a look at the “Redux Ducks” pattern.<br><a href="https://github.com/erikras/ducks-modular-redux" target="_blank" rel="noopener">https://github.com/erikras/ducks-modular-redux</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why?&quot;&gt;&lt;/a&gt;Why?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Use redux-starter-kit to general boilerplate code for redu
      
    
    </summary>
    
    
      <category term="Redux" scheme="http://pengw00.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode.485&amp;487&amp;1004 Max Consecutive One</title>
    <link href="http://pengw00.github.io/2019/06/04/Leetcode-485-487-1004-Max-Consecutive-One/"/>
    <id>http://pengw00.github.io/2019/06/04/Leetcode-485-487-1004-Max-Consecutive-One/</id>
    <published>2019-06-04T21:31:11.000Z</published>
    <updated>2019-06-04T21:38:39.536Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Max-Consecutive-One-serials"><a href="#Max-Consecutive-One-serials" class="headerlink" title="Max Consecutive One serials"></a>Max Consecutive One serials</h4><p>Find the longest consective subarray<br><em>Time: O(n)</em>Space: O(1) max and cur_max</p><p>*Leetcode.485 findMaxConsecutiveOnes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public int findMaxConsecutiveOnes(int[] nums)&#123;</span><br><span class="line">int max, cur_max;</span><br><span class="line">for(int i = 0; i &lt; nums.length; i++)&#123;</span><br><span class="line">max = Math.max(max, cur_max= nums[i]==0?0:cur_max+1);</span><br><span class="line">&#125;</span><br><span class="line">return max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Leetcode-487-findMaxConsecutiveOnesII"><a href="#Leetcode-487-findMaxConsecutiveOnesII" class="headerlink" title="Leetcode.487 findMaxConsecutiveOnesII"></a>Leetcode.487 findMaxConsecutiveOnesII</h4><ul><li>condition: if you can flip at most one 0.</li><li>Follow up: What if the input numbers come in one by one as an infinite stream? In other words, you can’t store all numbers coming from the stream as it’s too large to hold in memory. Could you solve it efficiently?</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int findMaxConsecutiveOnesII()&#123;</span><br><span class="line">int max = 0, zero = 0;</span><br><span class="line">for(int l = 0, h = 0; h &lt; nums.length; h++)&#123;</span><br><span class="line">if(nums[h] == 0) zero++;</span><br><span class="line">while(zero &gt; 1)&#123;</span><br><span class="line">if(nums[l++]==0)&#123;</span><br><span class="line">zero--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">max = Math.max(max, h-l+1);</span><br><span class="line">&#125;</span><br><span class="line">return max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Leetcode-1004-findMaxConsecutiveOnesIII"><a href="#Leetcode-1004-findMaxConsecutiveOnesIII" class="headerlink" title="Leetcode.1004 findMaxConsecutiveOnesIII"></a>Leetcode.1004 findMaxConsecutiveOnesIII</h4><ul><li>condition: if you can flip at most k times.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int findMaxConsecutiveOnes(int[] nums) &#123;</span><br><span class="line">        int max = 0, zero = 0, k = 1; // flip at most k zero</span><br><span class="line">        for (int l = 0, h = 0; h &lt; nums.length; h++) &#123;</span><br><span class="line">            if (nums[h] == 0)                                           </span><br><span class="line">                zero++;</span><br><span class="line">            while (zero &gt; k)</span><br><span class="line">                if (nums[l++] == 0)</span><br><span class="line">                    zero--;                                     </span><br><span class="line">            max = Math.max(max, h - l + 1);</span><br><span class="line">        &#125;                                                               </span><br><span class="line">        return max;             </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Max-Consecutive-One-serials&quot;&gt;&lt;a href=&quot;#Max-Consecutive-One-serials&quot; class=&quot;headerlink&quot; title=&quot;Max Consecutive One serials&quot;&gt;&lt;/a&gt;Max C
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode.272 Closest Binary Search</title>
    <link href="http://pengw00.github.io/2019/06/04/leetcode-272-Closest-Binary-Search/"/>
    <id>http://pengw00.github.io/2019/06/04/leetcode-272-Closest-Binary-Search/</id>
    <published>2019-06-04T19:38:40.000Z</published>
    <updated>2019-06-04T18:58:04.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dfs-amp-amp-stack-merge-sort-mothodology-for-the-optimal-solution"><a href="#dfs-amp-amp-stack-merge-sort-mothodology-for-the-optimal-solution" class="headerlink" title="dfs &amp;&amp; stack + merge sort mothodology for the optimal solution"></a>dfs &amp;&amp; stack + merge sort mothodology for the optimal solution</h1><ul><li>Analysis<br>Implement two stack, one store the value less than target in increase order by inorder dfs.</li></ul><p>like the root = [4, 2, 5, 1, 3], target = 3.3 =&gt; stack1: 1, 2, 3(top); stack2: 4, 5(top)</p><p>so the inorder basically has two version: </p><ul><li>right part, which get larger value. skip small value</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void inorder1(TreeNode root, double target, Stack&lt;Integer&gt; stack)&#123;</span><br><span class="line">if(root==null) return;</span><br><span class="line">//dfs traversal the right path</span><br><span class="line">inorder1(root.right, target, stack);</span><br><span class="line">// if the root value less then target, no need to go deeper since it is bst</span><br><span class="line">if(root.val &lt;= target) return;</span><br><span class="line">stack.push(root.val);</span><br><span class="line">inorder1(root.left, target, stack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>left part, get the small part, skip the bigger one.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void inorder2(TreeNode root, double target, Stack&lt;Integer&gt; stack)&#123;</span><br><span class="line">if(root==null) return;</span><br><span class="line">//dfs traversal the right path</span><br><span class="line">inorder1(root.left, target, stack);</span><br><span class="line">// if the root value less then target, no need to go deeper since it is bst</span><br><span class="line">if(root.val &gt; target) return;</span><br><span class="line">stack.push(root.val);</span><br><span class="line">inorder1(root.right, target, stack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Combine those two parts together since just the differ just focus on traversal order</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void inorder(TreeNode root, double target, boolean reverse, Stack&lt;Integer&gt; stack)&#123;</span><br><span class="line">        if(root == null) return;</span><br><span class="line">        inorder(reverse ? root.right:root.left, target, reverse, stack);</span><br><span class="line">        if((reverse &amp;&amp; root.val&lt;=target) || (!reverse &amp;&amp; root.val &gt; target)) return;</span><br><span class="line">        stack.push(root.val);</span><br><span class="line">        inorder(reverse ? root.left : root.right, target, reverse, stack);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>Final solution: </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;Integer&gt; closestKValues(TreeNode root, double target, int k) &#123;</span><br><span class="line">        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; s1 = new Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; s2 = new Stack&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        inorder1(root, target, s1);</span><br><span class="line">        inorder2(root,target, s2);</span><br><span class="line">        // inorder(root, target, false, s1);</span><br><span class="line">        // inorder(root, target, true, s2);</span><br><span class="line">        </span><br><span class="line">        while(k-- &gt; 0)&#123;</span><br><span class="line">            if(s1.isEmpty()) res.add(s2.pop());</span><br><span class="line">            else if(s2.isEmpty()) res.add(s1.pop());</span><br><span class="line">            else if(Math.abs(s1.peek() - target) &lt; Math.abs(s2.peek() - target)) res.add(s1.pop());</span><br><span class="line">            else res.add(s2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void inorder(TreeNode root, double target, boolean reverse, Stack&lt;Integer&gt; stack)&#123;</span><br><span class="line">        if(root == null) return;</span><br><span class="line">        inorder(reverse ? root.right:root.left, target, reverse, stack);</span><br><span class="line">        if((reverse &amp;&amp; root.val&lt;=target) || (!reverse &amp;&amp; root.val &gt; target)) return;</span><br><span class="line">        stack.push(root.val);</span><br><span class="line">        inorder(reverse ? root.left : root.right, target, reverse, stack);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void inorder1(TreeNode root, double target, Stack&lt;Integer&gt; stack)&#123;</span><br><span class="line">        if(root==null) return;</span><br><span class="line">        inorder1(root.right, target, stack);</span><br><span class="line">        if(root.val&lt;=target) return;</span><br><span class="line">        stack.push(root.val);</span><br><span class="line">        inorder1(root.left, target, stack);</span><br><span class="line">    &#125;</span><br><span class="line">    private void inorder2(TreeNode root, double target, Stack&lt;Integer&gt; stack)&#123;</span><br><span class="line">        if(root==null) return;</span><br><span class="line">        inorder2(root.left, target, stack);</span><br><span class="line">        if(root.val&gt;target) return;</span><br><span class="line">        stack.push(root.val);</span><br><span class="line">        inorder2(root.right, target, stack);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dfs-amp-amp-stack-merge-sort-mothodology-for-the-optimal-solution&quot;&gt;&lt;a href=&quot;#dfs-amp-amp-stack-merge-sort-mothodology-for-the-optima
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ Help Decouple System</title>
    <link href="http://pengw00.github.io/2019/06/04/ActiveMQ-Help-Decouple-System/"/>
    <id>http://pengw00.github.io/2019/06/04/ActiveMQ-Help-Decouple-System/</id>
    <published>2019-06-04T18:34:47.000Z</published>
    <updated>2019-06-04T17:37:33.756Z</updated>
    
    <content type="html"><![CDATA[<ol><li>应用1：异步处理才能应用解耦<br>用户注册后发送邮件/短信<br>传统:50+50+50<br>MQ异步处理：50+5</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;应用1：异步处理才能应用解耦&lt;br&gt;用户注册后发送邮件/短信&lt;br&gt;传统:50+50+50&lt;br&gt;MQ异步处理：50+5&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
    
      <category term="ActiveMQ" scheme="http://pengw00.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Contest 139</title>
    <link href="http://pengw00.github.io/2019/06/01/Leetcode-Contest-139/"/>
    <id>http://pengw00.github.io/2019/06/01/Leetcode-Contest-139/</id>
    <published>2019-06-02T04:56:09.000Z</published>
    <updated>2019-06-02T03:57:07.914Z</updated>
    
    <content type="html"><![CDATA[<ul><li><ol start="1071"><li>Greatest Common Divisor of Strings</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;ol start=&quot;1071&quot;&gt;
&lt;li&gt;Greatest Common Divisor of Strings&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
