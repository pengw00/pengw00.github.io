<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>David w00&#39;s Tech Road</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pengw00.github.io/"/>
  <updated>2020-02-15T06:19:43.342Z</updated>
  <id>http://pengw00.github.io/</id>
  
  <author>
    <name>David w00</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring-boot-transaction</title>
    <link href="http://pengw00.github.io/2020/02/15/spring-boot-transaction/"/>
    <id>http://pengw00.github.io/2020/02/15/spring-boot-transaction/</id>
    <published>2020-02-15T06:14:02.000Z</published>
    <updated>2020-02-15T06:19:43.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Transaction-anotation"><a href="#Transaction-anotation" class="headerlink" title="Transaction anotation"></a>Transaction anotation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">At a high level, when a class declares @Transactional on itself or its members, Spring creates a proxy that implements the same interface(s) as the class you’re annotating. In other words, Spring wraps the bean in the proxy and the bean itself has no knowledge of it. A proxy provides a way for Spring to inject behaviors before, after, or around method calls into the object being proxied.</span><br><span class="line"></span><br><span class="line">Internally, its the same as using a transaction advice (using AOP), where a proxy is created first and is invoked before/after the target bean’s method.</span><br><span class="line"></span><br><span class="line">The generated proxy object is supplied with a TransactionInterceptor, which is created by Spring. So when the @Transactional method is called from client code, the TransactionInterceptor gets invoked first from the proxy object, which begins the transaction and eventually invokes the method on the target bean. When the invocation finishes, the TransactionInterceptor commits/rolls back the transaction accordingly.</span><br></pre></td></tr></table></figure><h2 id="Understanding-Propagate-and-readOnly-annotation-attributes"><a href="#Understanding-Propagate-and-readOnly-annotation-attributes" class="headerlink" title="Understanding Propagate and readOnly annotation attributes"></a>Understanding Propagate and readOnly annotation attributes</h2><p>Transaction propagation is REQUIRED by default, which means that the same transaction will propagate from a transactional caller to transactional callee. It will create a new transaction or reuse the one if available. For example, if a read-only transaction calls a read-write transaction method, the whole transaction will be read-only.</p><p>Depending on the transaction propagation attribute (like for REQUIRES_NEW), sometimes the existing transaction is suspended/paused at some point, a new one is always started and eventually committed, and after that the first transaction is resumed.</p><h2 id="Isolation-Level"><a href="#Isolation-Level" class="headerlink" title="Isolation Level"></a>Isolation Level</h2><p>Read Uncommitted – Allows dirty reads, when a transaction is not yet committed by a thread and another thread is reading the dirty data.<br>Read Committed – Does not allow dirty reads. Only lets a thread to read values which have already been committed by other running transactions in another threads.<br>Repeatable Read – If the same data is read twice in the same transaction, it will always be the same. This level guarantees that any data once read cannot change.<br>Serializable – Transactions occur with locking at all levels (read, range and write locking), because of which they are executed in a fixed sequence. It doesn’t allow concurrent transactions and leads to a performance hit.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Transaction-anotation&quot;&gt;&lt;a href=&quot;#Transaction-anotation&quot; class=&quot;headerlink&quot; title=&quot;Transaction anotation&quot;&gt;&lt;/a&gt;Transaction anotation&lt;/
      
    
    </summary>
    
    
      <category term="spring-boot" scheme="http://pengw00.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>ms-interview-alg</title>
    <link href="http://pengw00.github.io/2020/01/16/ms-interview-alg/"/>
    <id>http://pengw00.github.io/2020/01/16/ms-interview-alg/</id>
    <published>2020-01-17T03:23:29.000Z</published>
    <updated>2020-01-18T03:02:57.375Z</updated>
    
    <content type="html"><![CDATA[<p>最新2019/12月面筋</p><h2 id="no-1"><a href="#no-1" class="headerlink" title="no.1"></a>no.1</h2><p>在code里面找错，两个人，给两个数组分别表示他们喜欢的数，X， Y，找到一个highestIndex表示拥有他们两人喜欢的数的最多的。<br>类似max network。<br>【1， 2， 3， 4】， 【2， 3， 4， 3】<br>算法： 建立一个map，遍历保存每个index为key，value为</p><h2 id="No-2"><a href="#No-2" class="headerlink" title="No.2"></a>No.2</h2><p>给一个string只有两个字母会出现，找最少次数砍掉这两个字母还可以保持它们的alphabetaical order</p><h2 id="No。3"><a href="#No。3" class="headerlink" title="No。3"></a>No。3</h2><p>给一串字母，有重复，算出砍掉最少的字母让这段字母不会有三个同样的字母连续。<br>采用cnt方法计算连续的字符</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最新2019/12月面筋&lt;/p&gt;
&lt;h2 id=&quot;no-1&quot;&gt;&lt;a href=&quot;#no-1&quot; class=&quot;headerlink&quot; title=&quot;no.1&quot;&gt;&lt;/a&gt;no.1&lt;/h2&gt;&lt;p&gt;在code里面找错，两个人，给两个数组分别表示他们喜欢的数，X， Y，找到一个hig
      
    
    </summary>
    
    
      <category term="coding" scheme="http://pengw00.github.io/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Concurrency in Golang</title>
    <link href="http://pengw00.github.io/2019/12/18/Concurrency-in-Golang/"/>
    <id>http://pengw00.github.io/2019/12/18/Concurrency-in-Golang/</id>
    <published>2019-12-19T03:36:55.000Z</published>
    <updated>2019-12-19T05:53:43.493Z</updated>
    
    <content type="html"><![CDATA[<h3 id="understand-the-concept-of-parallelism-and-concurrency"><a href="#understand-the-concept-of-parallelism-and-concurrency" class="headerlink" title="understand the concept of parallelism and concurrency"></a>understand the concept of parallelism and concurrency</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;understand-the-concept-of-parallelism-and-concurrency&quot;&gt;&lt;a href=&quot;#understand-the-concept-of-parallelism-and-concurrency&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="golang" scheme="http://pengw00.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang tutorial</title>
    <link href="http://pengw00.github.io/2019/12/18/golang-tutorial/"/>
    <id>http://pengw00.github.io/2019/12/18/golang-tutorial/</id>
    <published>2019-12-19T03:08:58.000Z</published>
    <updated>2019-12-19T03:33:31.121Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>go object pass by value, so it won’t affect the original object</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  func UpdateEmployee(empDetails Employee)&#123;</span><br><span class="line">  empDetails.Name = &quot;Anshul&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var newEmp = Employee&#123; Name: : &quot;Mayank&quot;, Age: 40, Destination: &quot;Developer&quot;&#125;</span><br><span class="line"></span><br><span class="line">UpdateEmployee(newEmp);</span><br><span class="line">fmt.println(newEmp)</span><br></pre></td></tr></table></figure><ol start="2"><li>if you want pass go object by reference, you need to use reference syntax, * and &amp;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> func UpdateEmployee(empDetail *Employee)&#123;</span><br><span class="line"> empDetail.Name = &quot;Anshul&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> var newEmployee = Employee&#123;Name: &quot;fdfdsf&quot;, Age: 40, Destination: &quot;fdfdsfdsf&quot;&#125;;</span><br><span class="line"></span><br><span class="line"> UpdateEmployee(&amp;newEmployee);</span><br><span class="line"> //&amp; is used to extract the reference of a object</span><br><span class="line"> // * is used to attacked the reference of an object.</span><br><span class="line"></span><br><span class="line"> //the original object sent to the function updated</span><br><span class="line"></span><br><span class="line"> fmt.Println(newEmployee.Name);</span><br></pre></td></tr></table></figure></li></ol><p>if using the new keyword to create a new object, it will returns the address of the object. that is reference.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> type Employee struct &#123;</span><br><span class="line">  Name string</span><br><span class="line">  Age int</span><br><span class="line">  Designation string</span><br><span class="line">  Salary int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var newEmployee = new(Employee)</span><br><span class="line"></span><br><span class="line">fmt.Println(newEmployee.Name)</span><br></pre></td></tr></table></figure></li></ol><p>*1 But one thing need to point out is that we’re using the new keyword, we can’t provide the default values to the object properties. When the object is created, Golang provides the default values to the object properties. In the above case, the access to the Name property will return an empty string (“”).</p><p>So Any changes made to the input object parameter will be reflected in the original object.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func UpdateEmployee(empDetials *Employee) &#123;</span><br><span class="line">  empDetails.Name = &quot;Anshul&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var newEmployee = new(Employee)</span><br><span class="line"></span><br><span class="line">newEmployee.Name = &quot;Mayank&quot;</span><br><span class="line">newEmployee.Age = 30</span><br><span class="line"></span><br><span class="line">UpdateEmployee(newEmployee)</span><br><span class="line"></span><br><span class="line">fmt.Println(newEmployee.Name)</span><br></pre></td></tr></table></figure><p>In the above case, the object reference is returned from the new keyword. Therefore, while invoking the function, we don’t need to use &amp; to send the reference of the object.</p><p>*2 Adding a Function to the Struct<br>The struct not only defines the properties associated with the object but also represents the behavior of the object. We can add functions to the struct that can add behavior to it. The code to associate a function to the struct is pretty different in Golang.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type Employee struct &#123;</span><br><span class="line">  Name string</span><br><span class="line">  Age int</span><br><span class="line">  Designation string</span><br><span class="line">  Salary int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (emp Employee) ShowDetails() &#123;</span><br><span class="line">  fmt.Println(&quot;User Name: &quot;, emp.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In the above code, we’re adding a new function that’s bound to the Employee struct. We need to explicitly bind the function to the struct. This function defined can then take the reference of the object created using emp.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type Employee struct &#123;</span><br><span class="line">  Name string</span><br><span class="line">  Age int</span><br><span class="line">  Designation string</span><br><span class="line">  Salary int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (emp Employee) ShowDetails() &#123;</span><br><span class="line">  fmt.Println(&quot;User Name: &quot;, emp.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var newEmployee = new(Employee)</span><br><span class="line">newEmployee.Name = &quot;Mayank&quot;</span><br><span class="line"></span><br><span class="line">newEmployee.ShowDetails()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;go object pass by value, so it won’t affect the original object&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
      <category term="golang" scheme="http://pengw00.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Cherry Pickup</title>
    <link href="http://pengw00.github.io/2019/12/01/Cherry-Pickup/"/>
    <id>http://pengw00.github.io/2019/12/01/Cherry-Pickup/</id>
    <published>2019-12-01T17:37:25.000Z</published>
    <updated>2019-12-01T18:44:20.827Z</updated>
    
    <content type="html"><![CDATA[<ul><li>741.Cherry Pickup *</li></ul><ol><li><p>DP problem, but greedy solution is track mistake. only lead to a local optimul solution. Here is a counter example: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grid = [[1,1,1,0,1],</span><br><span class="line">        [0,0,0,0,0],</span><br><span class="line">        [0,0,0,0,0],</span><br><span class="line">        [0,0,0,0,0],</span><br><span class="line">        [1,0,1,1,1]].</span><br></pre></td></tr></table></figure></li><li><p>the right way is to setup two round trip DP, since the back trip will depand on the first one, we minimize the variables to 3, k, j p. No bull shit, let’s get started!<br>We have to maintain two points for round trips.<br>(i, j) and (p, q). This will have three constraits:</p></li><li>i &lt; p &amp;&amp; j &gt; q</li><li>i == p &amp;&amp; j == q</li><li>i &gt; p &amp;&amp; j &lt; q</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public int cherryPickup(int[][] grid) &#123;</span><br><span class="line">    int N = grid.length, M = (N &lt;&lt; 1) - 1;</span><br><span class="line">    int[][] dp = new int[N][N];</span><br><span class="line">    dp[0][0] = grid[0][0];</span><br><span class="line">    </span><br><span class="line">    for (int n = 1; n &lt; M; n++) &#123;</span><br><span class="line">for (int i = N - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">for (int p = N - 1; p &gt;= 0; p--) &#123;</span><br><span class="line">int j = n - i, q = n - p;</span><br><span class="line">                </span><br><span class="line">if (j &lt; 0 || j &gt;= N || q &lt; 0 || q &gt;= N || grid[i][j] &lt; 0 || grid[p][q] &lt; 0) &#123;</span><br><span class="line">                    dp[i][p] = -1;</span><br><span class="line">                    continue;</span><br><span class="line">                 &#125;</span><br><span class="line"> </span><br><span class="line"> if (i &gt; 0) dp[i][p] = Math.max(dp[i][p], dp[i - 1][p]);</span><br><span class="line"> if (p &gt; 0) dp[i][p] = Math.max(dp[i][p], dp[i][p - 1]);</span><br><span class="line"> if (i &gt; 0 &amp;&amp; p &gt; 0) dp[i][p] = Math.max(dp[i][p], dp[i - 1][p - 1]);</span><br><span class="line"> </span><br><span class="line"> if (dp[i][p] &gt;= 0) dp[i][p] += grid[i][j] + (i != p ? grid[p][q] : 0)</span><br><span class="line">             &#125;</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return Math.max(dp[N - 1][N - 1], 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;741.Cherry Pickup *&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;DP problem, but greedy solution is track mistake. only lead to a local optimul solution.
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://pengw00.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>System design for instagram</title>
    <link href="http://pengw00.github.io/2019/11/16/System-design-for-instagram/"/>
    <id>http://pengw00.github.io/2019/11/16/System-design-for-instagram/</id>
    <published>2019-11-16T21:56:25.000Z</published>
    <updated>2019-11-17T01:30:35.498Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Use-cases-and-function"><a href="#Use-cases-and-function" class="headerlink" title="Use cases and function:"></a>Use cases and function:</h3><ol><li>user can upload/download/view image and video.</li><li>user can search image/video based on title.</li><li>user can follow others.</li><li>can generate new feeds for user with the users they follow(kinds of timeline).</li></ol><h4 id="Non-functional-requirements"><a href="#Non-functional-requirements" class="headerlink" title="Non-functional requirements"></a>Non-functional requirements</h4><ol><li>Higher availability</li><li>For new Feeds, system can tolerate 200ms latency.</li><li>Lower requirement for consistency, user can not view new feeds for a moment which is a little bit acceptable.</li><li>High reliability, which the new post can never be lost.</li></ol><h3 id="Top-will-not-covered"><a href="#Top-will-not-covered" class="headerlink" title="Top will not covered:"></a>Top will not covered:</h3><ol><li>tagging image.</li><li>search image/video by tags.</li><li>describe image/video.</li><li>recommend followed users.</li><li>feddback and advices.</li></ol><h3 id="3th-consideration"><a href="#3th-consideration" class="headerlink" title="3th consideration"></a>3th consideration</h3><ol><li>read-heavy system, so make sure the system can get the image or video quickly.</li><li>high mount of image, so management the image/video storage efficiently can be really a reason for our focus.</li><li>latency that users view image or video should meet the requirement for that.</li><li>data should be highly 100% reliability, if user upload a image, it should never be lost if not deleted by creater.</li></ol><h3 id="4th"><a href="#4th" class="headerlink" title="4th"></a>4th</h3><p>Storage estimation</p><ol><li>active users 1 million per day, totally 100 million users total.</li><li>2 million iamge/video per day uploaded.</li><li>avg image 200 KB</li><li>2000000 * 200 KB = 400GB</li><li>400G * 365 ~= 142.5 TB</li></ol><h3 id="5th"><a href="#5th" class="headerlink" title="5th"></a>5th</h3><p>So we have two senarios:</p><ol><li><p>upload iamge, 2. search image</p><h4 id="we-need-Object-storage-Database-another-topic-about-OSD-we-might-need-to-cover"><a href="#we-need-Object-storage-Database-another-topic-about-OSD-we-might-need-to-cover" class="headerlink" title="we need Object-storage Database (another topic about OSD we might need to cover)"></a>we need Object-storage Database (another topic about OSD we might need to cover)</h4><h4 id="we-might-need-some-RDBS-database-to-store-metadata"><a href="#we-might-need-some-RDBS-database-to-store-metadata" class="headerlink" title="we might need some RDBS database to store metadata"></a>we might need some RDBS database to store metadata</h4><h3 id="6th-data-model"><a href="#6th-data-model" class="headerlink" title="6th. data model"></a>6th. data model</h3><p>user table: for info, upload iamge, follow users<br>phone model: for save info for image/video, we need to index PhotoId and CreationDate, because we want to get the most recent image.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> Photo  &#123;</span><br><span class="line"> UserId int</span><br><span class="line"> PhonePath: varChar(256)</span><br><span class="line"> PhoneLatitude: int</span><br><span class="line"> PhoneLongitude: int</span><br><span class="line"> userLatitude: int</span><br><span class="line"> userLongitude: int</span><br><span class="line"> CreationDate: datatime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><figcaption><span>&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Name: varChar(20)</span><br><span class="line">Email: varChar(32)</span><br><span class="line">DateofBirth: datatime</span><br><span class="line">creationdate: datetime</span><br><span class="line">LastLogin: datetime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserFollow &#123;</span><br><span class="line">userId1: int</span><br><span class="line">useId2: int</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>Obviously, database schema need join manipulation, so we need to use RDB, like MS SQL/PostgreSQL/MY SQL, but when scaling sysem, we might have trouble for that.<br>So, we use noSQL database, and we might need to store image to HDFS or S3 kinds of distributed devices.</p></li><li><p>we can use databases save in key-value distributed storage. and all the iamge info store in one table. the key could be photoID, value can be location, userLocation, creationtimeStamp and so on.</p></li></ol><p>UserPhoto: user and image relation, key is userId, value: […list of phoneIds]<br>useFollowTable: same as userPhone, key: userId, value: […lists of userIds]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">User: 假设每个“int”和“dateTime”是4 Bytes，那么User表中的每行是68 Bytes:</span><br><span class="line">UserID (4 bytes) + Name (20 bytes) + Email (32 bytes) + DateOfBirth (4 bytes) + CreationDate (4 bytes) + LastLogin (4 bytes) = 68 bytes</span><br><span class="line">如果我们有5亿用户的话，那么我们需要32GB的空间。</span><br><span class="line">500 million * 68 ~= 32GB</span><br><span class="line"></span><br><span class="line">Photo: Photo表的每行是284 Bytes:</span><br><span class="line">PhotoID (4 bytes) + UserID (4 bytes) + PhotoPath (256 bytes) + PhotoLatitude (4 bytes) + PhotLongitude(4 bytes) + UserLatitude (4 bytes) + UserLongitude (4 bytes) + CreationDate (4 bytes) = 284 bytes</span><br><span class="line">如果用户每天上传2百万新照片的话，那么Photo表每天增加0.5GB：</span><br><span class="line">2M * 284 bytes ~= 0.5GB per day</span><br><span class="line">所以，Photo表10年共需要1.88 TB存储空间。</span><br><span class="line"></span><br><span class="line">UserFollow: UserFollow表中的每一行是8 Bytes。如果我们有5亿用户并且平均每个用户关注500个其他用户的话，UserFollow表将需要895 GB的空间。</span><br><span class="line">500 million users * 500 followers * 8 bytes ~= 1.82TB</span><br><span class="line"></span><br><span class="line">10年内这些表需要的全部存储空间大概是3.7 TB：</span><br><span class="line">32GB + 1.88TB + 1.82TB ~= 3.7TB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 8. Component Design ###</span><br><span class="line"></span><br><span class="line">照片上传（写操作）可能比较慢，因为上传操作会写磁盘；而读操作会比较快，特别是在有缓存的情况下。</span><br><span class="line"></span><br><span class="line">我们知道web服务器有连接数限制，所以我们设计系统的时候需要非常注意。因为上传操作速度比较慢，所以用户的上传操作可能会消耗掉所有可用的连接数。如果系统忙于应付写操作的话，那么“读”请求会无法得到处理。如果web服务器在任意时间点能处理最大500个连接的话，这就意味着它无法同时处理多于500个并发的“上传”或者“读”请求。为了处理这种极端情况，我们可以用把处理“读”和“写”请求的服务分开。我们可以用不同的服务器分别处理“读”和“写”请求，这样就不会阻塞住系统。</span><br><span class="line"></span><br><span class="line">把“读”和“写”请求分开处理还可以让我们独立地扩展和优化这些服务。</span><br><span class="line"></span><br><span class="line">### 9.可靠性和冗余(single point failure) ###</span><br></pre></td></tr></table></figure></p><p>本系统的设计目标是不能丢失文件。所以，对于每个用户上传的文件我们需要保存多份拷贝；这样如果一个存储服务器失效了，那么我们仍然能从其他存储服务器上获取另一份拷贝。</p><p>这个原则也适用于系统的其他组件。如果系统要有高可用性，那么系统中运行的服务需要有多份拷贝。这样，如果一个服务死掉的话，系统依然是可用的并且仍然可以提供服务。所以，冗余可以消除系统的单点故障。</p><p>如果服务在任何时间点只需要运行一个实例的话，那么我们可以再运行该服务一个冗余的实例，但是该冗余实例不处理任何请求。一旦主服务出了问题，这个冗余的实例可以立刻通过“故障转移”（Failover）接管过来。</p><p>在系统中创建冗余可以移除系统的单点故障，并且提供功能的备份以防万一。假设在生产环境中有同一个服务的两个实例；如果其中一个失效或者降级了，那么系统可以通过“故障转移”（Failover）让另一个实例接管。“故障转移”（Failover）可以自动触发也可以手动触发。</p><h3 id="10-Database-Sharding"><a href="#10-Database-Sharding" class="headerlink" title="10. Database Sharding"></a>10. Database Sharding</h3><p>Below we will discuss metaData data sharding design methodology.</p><p>a. 基于UserID分区 如果我们基于UserID分片，那么我们可以将同一个用户的全部照片元数据保存于同一个分片上。如果一个数据库分片是1 TB，那么我们需要4个分片来保存3.7 TB的数据。另外，为了更好的性能和扩展性，假设我们保留10个分片。<br>所以我们可以通过UserID对10取余来找到对应的ShardID，从而保存数据。为了唯一的识别系统中的任意照片，我们可以在PhotoID后面追加ShardID。<br>那么我们如何生成PhotoID？每个数据库分片都有各自的auto-increment sequence用以生成PhotoID，并且由于我们会追加ShardID到每个PhotoID，因此我们能保证每个PhotoID在系统中都是唯一的。<br>这种数据库分片设计会有什么问题？<br>我们如何处理热点用户？有的人会关注热点用户，并且人们往往会查看热点用户上传的每一张照片。<br>有些用户相对于其他用户会上传大量照片，这会导致存储的不均匀分布。<br>如果我们无法将一个用户的全部照片的元数据保存于一个分片的话，那我们就只得把用户照片的元数据存放于不同的分片上，这会不会导致更高的延迟？<br>另外，把一个用户的全部照片的元数据存储于同一个分片上可能会导致一个问题是，如果保存元数据的分片失效了或者该分片的负载很高导致延时很大的话，那么该用户的全部数据就都不可用了。</p><p>b. 基于PhotoID分区 我们先生成唯一的PhotoID，然后再通过PhotoID对10取余找到ShardID，这就能解决以上问题。我们不必追加ShardID到PhotoID，因为PhotoID本身在系统中就是唯一的。<br>那么我们如何生成PhotoID呢？在每个分片中设置auto-incrementing sequence毫无意义，因为我们是先生成PhotoID，再通过PhotoID找到分片。解决方法是，我们可以运行一个独立的数据库实例以生成自动增长的PhotoID。假设我们的PhotoID是64位，那么我们可以定义一个只有64位ID列的表。如果一张新的照片被上传到系统，我们可以插入一行到这个表中并且取这个ID为新的照片的PhotoID。<br>那么这个生成PhotoID的数据库实例会不会有单点失败？是的，有可能。解决方法是，我们可以定义两个数据库实例，一个生成偶数ID，另一个生成奇数ID。<br>我们可以添加一个负载均衡器用来轮流调度这两个数据库实例。这两个数据库实例可能生成的ID数目不一样，但是这对系统不会造成任何问题。我们可以把这个设计思想用于系统的其他表比如Users表、Photo-Comments表或者其他组件上。</p><p>如果将来数据大幅增长怎么办？我们可以在物理数据库服务器中创建多个逻辑分区来应对未来的数据增长。由于每个物理数据库服务器可以运行多个数据库实例，所以我们可以为各个逻辑分区运行各自独立的数据库实例。如果我们发现一个数据库服务器数据大量增长，就可以把该服务器的一些逻辑分区迁移到另一个服务器。我们可以维护一个配置文件（或者一个数据库）来把我们的逻辑分区映射到数据库服务器；这样我们就可以容易地移动分区。任何时候只要我们想移动一个分区，我们只需要升级这个配置文件以声明改动就行。</p><h3 id="11-“推送新闻（News-Feed）”"><a href="#11-“推送新闻（News-Feed）”" class="headerlink" title="11.“推送新闻（News Feed）”"></a>11.“推送新闻（News Feed）”</h3><p>一个用户的“推送新闻（News Feed）”是由该用户关注的所有用户的最近的、最受欢迎的照片组成的。</p><p>生成“推送新闻（News Feed）”的基本流程如下。假设用户的“推送新闻（News Feed）”需要包含100张照片。那么我们的应用服务器首先要获取一张该用户关注的所有用户的列表，并且获取每个用户的最近的100张照片的元数据。然后，应用服务器会提交这些照片的元数据到我们的排名算法，该算法会基于照片的时间和用户的喜好来选择前100张照片并且返回给用户。这个流程的问题在于延时会比较高，因为我们需要查询多个表并基于查询结果做排序/合并/排名。为了提高效率，我们可以预先生成“推送新闻（News Feed）”并且将结果保存于另一个表。</p><p>预生成“推送新闻（News Feed）”：我们可以用一台专用服务器不断地生成用户的“推送新闻（News Feed）”，并且把结果保存于一个UserNewsFeed表中。这样，一旦需要返回“推送新闻（News Feed）”给用户的时候，我们只要查询一下这张表并返回结果就行了。</p><p>一旦这些服务器需要为一个用户生成“推送新闻（News Feed）”，它们可以查询UserNewsFeed表以找到该用户最新的“推送新闻（News Feed）”。然后，我们基于该时间点之后的数据按照以上步骤生成新的“推送新闻（News Feed）”。</p><p>有哪些不同的方法发送“推送新闻（News Feed）”给用户？</p><ol><li><p>Pull: 客户端可以一定频率或者手动方式直接向服务器请求“推送新闻（News Feed）”。这种方式的问题在于，a）只有客户端发送了请求，客户端的“推送新闻（News Feed）”才会更新；b）如果服务器端没有数据更新的话，那么大多数客户端请求只会得到空响应。</p></li><li><p>Push: 一旦服务器端的数据更新了，服务器就会推送“推送新闻（News Feed）”到客户端。客户端需要维护一个Long Poll请求以接收数据更新。这种方式的问题在于，如果一个用户被大量的其他用户关注或者一个明星用户拥有数百万粉丝的话，服务器端的推送压力会很大。<br>因为要把new feeds强行推送给所有的关注者，服务器会爆炸。</p></li><li><p>复合（Hybrid）: 复合（Hybrid）方式结合了Pull和Push的优点。对于有大量粉丝的用户，他们可以用Pull方式获取“推送新闻（News Feed）”；对于只有少量粉丝的用户，我们采用Push方式推送更新。另一种复合（Hybrid）方式是，服务器端以一定频率推送“推送新闻（News Feed）”给所有用户；对于有很多粉丝的用户，他们将采用一定频率的Pull模式获取更新。</p></li></ol><p>12.如何基于分片数据生成”推送新闻（News Feed）”</p><p>为指定的用户生成“推送新闻（News Feed）”的最重要的要求之一是基于该用户关注的所有用户的列表获取最新的照片。为此我们需要一种有效的方法来按照照片的创建时间为照片排序。我们可以把照片的创建时间追加为PhotoID的一部分。因为我们对PhotoID创建了索引，所以我们能很快基于索引找到最新的PhotoID。<br>在此我们可以使用时间戳。假设我们的PhotoID由两部分构成：一是时间戳；二是auto-incrementing sequence。为创建PhotoID，我们可以使用当前时间戳并从我们在第10节中提到的键值生成数据库中获取一个auto-incrementing ID。然后，我们可以基于PhotoID算出ShardID，也就是PhotoID对10取余；我们可以把照片的元数据存放于该分片。</p><p>那么一个PhotoID需要多少存储字节？假设我们的时间戳从今天开始，那么我们需要多少字节来存储一个单位为秒的50年后的时间戳呢？<br>86400（秒） <em> 365（天） </em> 50（年）  =&gt; 1，600，000，000<br>我们需要31个比特位来存储这个数字。平均而言，用户每秒会上传23张照片；我们可以分配9个比特位来存放auto incremented sequence。所以，每秒钟我们能存储至多512张照片，也是2的9次方。另外，我们每秒钟可以重置一次auto incremented sequence。<br>13.缓存与负载均衡</p><p>我们的服务需要一个海量照片发送系统以服务分布于全球的用户。我们的服务需要大量的分布于世界各地的照片缓存服务器和CDN，这样用户就可以从就近的服务器获取推送内容。</p><p>我们可以引入缓存来存放元数据库中的热点数据。在此我们可以使用Memcache，应用服务器在访问数据库之前可以先检查缓存中是否有需要的数据。LRU对我们的系统来说是一种可行的缓存策略。基于此策略，最旧的数据会被最先丢弃。</p><p>我们如何建立更有效的缓存机制呢？假设我们使用2-8原则，那么每天有20%的照片会产生80%的流量，这就意味着一部分照片是非常受欢迎的，大部分人都会访问这些照片。因此我们可以考虑缓存每天的20%的照片和其元数据。</p><p>译后记：</p><p>1）第10节写得不好，不知道作者到底希不希望所有数据在一个分片上<br>2）下面是我搜集的文中的一些概念的链接：<br>文件存储与对象存储的区别<br><a href="https://www.zhihu.com/question/21536660" target="_blank" rel="noopener">https://www.zhihu.com/question/21536660</a><br>sql与nosql的区别<br><a href="https://www.jianshu.com/p/b32fe4fe45a3" target="_blank" rel="noopener">https://www.jianshu.com/p/b32fe4fe45a3</a><br>列式存储<br><a href="https://blog.csdn.net/dc_726/article/details/41143175" target="_blank" rel="noopener">https://blog.csdn.net/dc_726/article/details/41143175</a><br>数据分片<br><a href="http://blog.zhaojie.me/2010/03/sharding-by-id-characteristic.html" target="_blank" rel="noopener">http://blog.zhaojie.me/2010/03/sharding-by-id-characteristic.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Use-cases-and-function&quot;&gt;&lt;a href=&quot;#Use-cases-and-function&quot; class=&quot;headerlink&quot; title=&quot;Use cases and function:&quot;&gt;&lt;/a&gt;Use cases and funct
      
    
    </summary>
    
    
      <category term="System Design" scheme="http://pengw00.github.io/tags/System-Design/"/>
    
  </entry>
  
  <entry>
    <title>benefit from spring data</title>
    <link href="http://pengw00.github.io/2019/11/16/benefit-from-spring-data/"/>
    <id>http://pengw00.github.io/2019/11/16/benefit-from-spring-data/</id>
    <published>2019-11-16T18:55:41.000Z</published>
    <updated>2019-11-16T21:45:44.602Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Benefits of Using spring data</li></ol><h1 id="Reduces-boilerplate-code"><a href="#Reduces-boilerplate-code" class="headerlink" title="Reduces boilerplate code"></a>Reduces boilerplate code</h1><p>Example: traditional JDBM connnector<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public Room getRoomJDBC() throws Exception&#123;</span><br><span class="line">Statement statement = null;</span><br><span class="line">Connection connection = null;</span><br><span class="line">try &#123;</span><br><span class="line">class.forName(&apos;org.h2.Driver&apos;);</span><br><span class="line">connection = DriverManager.getConnection(&quot;jdbc:h2:~/test&quot;, &quot;sa&quot;, &quot;&quot;);</span><br><span class="line">String sql = &quot;SELECT * from ROOM where ROOM_NUMBER = &apos;p1&apos;&quot;</span><br><span class="line">ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line">while (resultSet.next()) &#123;</span><br><span class="line">Room room = new Room();</span><br><span class="line">room.setId(resultSet.getLong(&quot;ROOM_ID&quot;));</span><br><span class="line">room.setBedInfo(resultSet.getString(&quot;BED_INFO&quot;));</span><br><span class="line">room.setName(resultSet.getString(&apos;ROOM_NAME&apos;));</span><br><span class="line">room.setNumber(resultSet.getString(&quot;ROOM_NUMBER&quot;));</span><br><span class="line">return room;</span><br><span class="line">&#125;</span><br><span class="line">&#125;catch (SQLException sqle)&#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">if(statement!=null)&#123;</span><br><span class="line">statement.close();</span><br><span class="line">&#125;</span><br><span class="line">if(null != connenction)&#123;</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Instead, with Spring Data, it could be just one line of code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Room getRoomSpringData()&#123;</span><br><span class="line">return this.repository.findByNumber(&quot;PI&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reduce-a-lots-of-code-and-time-and-reduce-the-posibility-of-making-error-when"><a href="#reduce-a-lots-of-code-and-time-and-reduce-the-posibility-of-making-error-when" class="headerlink" title="reduce a lots of code and time, and reduce the posibility of making error when"></a>reduce a lots of code and time, and reduce the posibility of making error when</h1><p>writing the 20 lines of code.</p><h3 id="Providing-ability-to-swap-out-datasources-much-easier"><a href="#Providing-ability-to-swap-out-datasources-much-easier" class="headerlink" title="Providing ability to swap out datasources much easier"></a>Providing ability to swap out datasources much easier</h3><p>Always focus on the business logic, not on the data access code.</p><h3 id="Key-Component"><a href="#Key-Component" class="headerlink" title="Key Component"></a>Key Component</h3><h3 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;Benefits of Using spring data&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Reduces-boilerplate-code&quot;&gt;&lt;a href=&quot;#Reduces-boilerplate-code&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="springboot" scheme="http://pengw00.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>js-asyc-promise-reading-summary</title>
    <link href="http://pengw00.github.io/2019/10/16/js-asyc-promise-reading-summary/"/>
    <id>http://pengw00.github.io/2019/10/16/js-asyc-promise-reading-summary/</id>
    <published>2019-10-17T04:12:02.000Z</published>
    <updated>2019-10-17T04:54:37.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nested-promise"><a href="#nested-promise" class="headerlink" title="nested promise"></a>nested promise</h2><ol><li><p>Request code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const makeRequest = async() =&gt; &#123;</span><br><span class="line">const response = await fetch(url);</span><br><span class="line">if(response.needAnotherRequest)&#123;</span><br><span class="line">const secondResponse = await makeAnotherRequest(reponse);</span><br><span class="line">console.log(secondResponse);</span><br><span class="line">return secondResponse;</span><br><span class="line">&#125;</span><br><span class="line">console.log(response);</span><br><span class="line">return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>sync a list post Request: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let promise = Promise.resolve();</span><br><span class="line">let posts = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class="line"></span><br><span class="line">posts.forEach(post =&gt; &#123;</span><br><span class="line">    //construct a new promise and replace the old one</span><br><span class="line">    //promise return the resove callback</span><br><span class="line">promise = promise.then(()=&gt;&#123;</span><br><span class="line">return db.insert(post);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(()=&gt;&#123;</span><br><span class="line">///all you post request has been make one by one</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="if-you-want-to-make-it-concurrently-post-it-will-looks-like"><a href="#if-you-want-to-make-it-concurrently-post-it-will-looks-like" class="headerlink" title="if you want to make it concurrently post, it will looks like:"></a>if you want to make it concurrently post, it will looks like:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">posts.forEach(post=&gt;&#123;</span><br><span class="line">promise = promise.then(db.insert(post));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>// this might not be correct.</p><p>sequential vs parallism</p><p>promise.all and yield all in generator as well as generate a list of promise and promise all of them immedieately</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nested-promise&quot;&gt;&lt;a href=&quot;#nested-promise&quot; class=&quot;headerlink&quot; title=&quot;nested promise&quot;&gt;&lt;/a&gt;nested promise&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Request code:
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 927 Three Equal Parts</title>
    <link href="http://pengw00.github.io/2019/09/30/leetcode-927-Three-Equal-Parts/"/>
    <id>http://pengw00.github.io/2019/09/30/leetcode-927-Three-Equal-Parts/</id>
    <published>2019-10-01T04:28:04.000Z</published>
    <updated>2019-10-01T05:04:17.283Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Leetcode-927-Three-Equal-Parts"><a href="#Leetcode-927-Three-Equal-Parts" class="headerlink" title="Leetcode 927. Three Equal Parts"></a>Leetcode 927. Three Equal Parts</h3><p>– count how many one (if(num%3!=0) return[-1,-1])<br>– search from right side to left, until we found num/3 1s, this index is not final answer, but it define the pattern of 1s;<br>– from left, ignore 0s, and then match the pattern found in step 2, to get the first Endindex<br>– do another matching to found second EndIndex.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public int[] threeEqualParts(int[] A)&#123;</span><br><span class="line">int numOne = 0;</span><br><span class="line">for(int i: A)&#123;</span><br><span class="line">if(i==1) numOne++;</span><br><span class="line">&#125;</span><br><span class="line">int[] noRes = &#123; -1, -1 &#125;;</span><br><span class="line">if(numOne == 0) return new int[]&#123;0, 2&#125;;</span><br><span class="line">if(numOne%3!=0) return noRes;</span><br><span class="line">int idxThird = 0;</span><br><span class="line">int temp = 0;</span><br><span class="line">for(int i = A.length-1; i &gt;= 0; i--)&#123;</span><br><span class="line">if(A[i]==1)&#123;</span><br><span class="line">temp++;</span><br><span class="line">if(temp == numOne /3)&#123;</span><br><span class="line">idxThird = i;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int res1 = findEindIdx(A, 0, idxThird);</span><br><span class="line">if(res1 &lt; 0) return noRes;</span><br><span class="line">int res2 = findEndIdx(A, res1+1, idxThird);</span><br><span class="line">if(res2&lt;0) return noRes;</span><br><span class="line">return new int[]&#123;res1, res2+1&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private int findEndIdx(int[] A, int left, int right)&#123;</span><br><span class="line">while(A[left]==0) left++;</span><br><span class="line">while(right &lt; A.length)&#123;</span><br><span class="line">if(A[left] != A[right]) return -1;</span><br><span class="line">left++;</span><br><span class="line">right++;</span><br><span class="line">&#125;</span><br><span class="line">return left-1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Leetcode-927-Three-Equal-Parts&quot;&gt;&lt;a href=&quot;#Leetcode-927-Three-Equal-Parts&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 927. Three Equal Parts&quot;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 124 Binary Tree Maximum Path Sum</title>
    <link href="http://pengw00.github.io/2019/09/11/Leetcode-124-Binary-Tree-Maximum-Path-Sum/"/>
    <id>http://pengw00.github.io/2019/09/11/Leetcode-124-Binary-Tree-Maximum-Path-Sum/</id>
    <published>2019-09-11T05:02:12.000Z</published>
    <updated>2019-09-11T05:15:30.507Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Leetcode-124-Binary-Tree-Maximum-Path-Sum"><a href="#Leetcode-124-Binary-Tree-Maximum-Path-Sum" class="headerlink" title="Leetcode 124. Binary Tree Maximum Path Sum"></a>Leetcode 124. Binary Tree Maximum Path Sum</h3><ul><li><p>Requirement:<br>  Get the maximum path with max sum, and the path should be with a highest tree node. </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2   3</span><br></pre></td></tr></table></figure></li><li><p>DFS Logic:  Design a function with returning the max left path, return like ~ max(left, right) + node.val, and<br>during the process, we have check the max( res, left + node.val + right);<br>the code will be as followed: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> public class Solution &#123;</span><br><span class="line"> int maxValue; // res</span><br><span class="line"> public int maxPathSum(TreeNode root)&#123;</span><br><span class="line"> maxValue = Integer.MIN_VALUE;</span><br><span class="line"> maxPathDown(root);</span><br><span class="line"> return maxValue;</span><br><span class="line">&#125;</span><br><span class="line">private int maxPathDown(TreeNode node)&#123;</span><br><span class="line">if(node == null) return 0;</span><br><span class="line">//get the left max path(only drilling down from the left/right node)</span><br><span class="line">int left = Math.max(0, maxPathDown(node.left));</span><br><span class="line">int right = Math.max(0, maxPathDown(node.right));</span><br><span class="line">maxValue = Math.max(left, right) + node.val;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Leetcode-124-Binary-Tree-Maximum-Path-Sum&quot;&gt;&lt;a href=&quot;#Leetcode-124-Binary-Tree-Maximum-Path-Sum&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 1
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://pengw00.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>how to design a online judgement system like leetcode</title>
    <link href="http://pengw00.github.io/2019/09/01/how-to-design-a-online-judgement-system-like-leetcode/"/>
    <id>http://pengw00.github.io/2019/09/01/how-to-design-a-online-judgement-system-like-leetcode/</id>
    <published>2019-09-02T04:00:13.000Z</published>
    <updated>2019-09-02T04:09:17.707Z</updated>
    
    <content type="html"><![CDATA[<p>– 1. user table for service<br>– 2. problem service, might be problem and solution and user’s solution<br>– 3. slave worker<br>– 4. socket for when the code compile finish, we will need to notice user, benchmark setting for runtime<br>API building.<br>–5. submit code is post operation, dispatch jobs for workers and notice<br>web socket consistant connenction</p><p>– core service: what users can do in the website?<br>submit code, get result, profile, problem, solution, and submission as well. </p><p>distribute system for worker? like even loop and thread pool stuff. Load balance..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;– 1. user table for service&lt;br&gt;– 2. problem service, might be problem and solution and user’s solution&lt;br&gt;– 3. slave worker&lt;br&gt;– 4. socke
      
    
    </summary>
    
    
      <category term="System Design" scheme="http://pengw00.github.io/tags/System-Design/"/>
    
  </entry>
  
  <entry>
    <title>Dockerize MySQL server for REST API</title>
    <link href="http://pengw00.github.io/2019/09/01/Dockerize-MySQL-server-for-REST-API/"/>
    <id>http://pengw00.github.io/2019/09/01/Dockerize-MySQL-server-for-REST-API/</id>
    <published>2019-09-01T19:46:20.000Z</published>
    <updated>2019-09-01T22:49:57.889Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Dockerize MySQL server<br>A. launch a docker in local<br>B. Hosting the MySQL server in Docker container in IMAGE<br>C. Listening to the host port of MySQL server in local by whatever like Springboot<br>Rest API or Django Rest API</li></ol><p>Command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name=mysql-server --env=&quot;MYSQL_ROOT_PASSWORD=123456&quot; mysql</span><br><span class="line"># This runs on a detached mode</span><br><span class="line"># Open port 3306:3306</span><br><span class="line"># Name of the server: mysql-server</span><br><span class="line"># root password: 123456</span><br><span class="line"># Container is created from mysql image</span><br></pre></td></tr></table></figure></p><p>Notes: Check what other app is listening to the port on 3306<br>Command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-p 12345:3306</span><br><span class="line"># This is one method to check for the port on MAC OS</span><br><span class="line">netstat -vanp tcp | grep 3306</span><br></pre></td></tr></table></figure></p><p>– If you cannot connect to MySQL from another docker and got this error:<br><figure class="highlight plain"><figcaption><span>to load authentication plugin 'caching_sha2_password'. ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Then you can add the parameter below when running the container.</span><br><span class="line">It is because the newer version of MySQL uses caching_sha2_password instead of mysql_native_password</span><br><span class="line"></span><br><span class="line">``` mysqld --default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure></p><p>– you can access the MySQL through your host<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Through Host </span><br><span class="line">mysql -host 127.0.0.1 -P 3306 -protocol=tcp -u root -p</span><br><span class="line"></span><br><span class="line"># Through container</span><br><span class="line">Docker exec -ti mysql-server bash</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></p><p>Create user and database for connection</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE databaseName;</span><br><span class="line">CREATE USER &apos;dnguyen&apos;@&apos;localhost&apos; IDENITIFIED BY &apos;123456&apos;;</span><br><span class="line">GRANT ALL PRIVALEGES ON databaseName.* TO &apos;dnguyen&apos;@&apos;localhost&apos;;</span><br><span class="line">FLUSH PRIVALEGES;</span><br><span class="line">QUIT</span><br></pre></td></tr></table></figure><p>If you are using Django, here is what you need to put in the settings.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">      &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;databaseName&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;dnguyen&apos;, # or root</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;123456&apos;,</span><br><span class="line">        &apos;HOST&apos;: &apos;127.0.0.1&apos;,</span><br><span class="line">        &apos;PORT&apos;: &apos;3306&apos;, # or 12345</span><br><span class="line">        &apos;OPTIONS&apos;: &#123;</span><br><span class="line">            # Tell MySQLdb to connect with &apos;utf8mb4&apos; character set</span><br><span class="line">            &apos;charset&apos;: &apos;utf8mb4&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>That is that.</p><p>//Resources for mySQL and docker commands to practice.<br>//With Docker-composer set up docker-compose1.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:5.6</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_DATABASE: findeasily</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 88888888</span><br><span class="line">    volumes:</span><br><span class="line">      - mysql_data:/var/lib/mysql/data</span><br><span class="line">  redis:</span><br><span class="line">    image: &apos;redis:5.0-alpine&apos;</span><br><span class="line">    command: redis-server --requirepass 88888888</span><br><span class="line">    ports:</span><br><span class="line">      - &apos;6379:6379&apos;</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  mysql_data:</span><br></pre></td></tr></table></figure></p><p>or docker-compose2.yml<br>‘’’<br>version: ‘2’</p><p>services:</p><p>  mysql:<br>    image: mariadb:10.1.19<br>    ports:</p><pre><code>  - 8083:3306volumes:  - ./mysql:/var/lib/mysqlenvironment:  MYSQL_ROOT_PASSWORD: wp</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">So when you luanch the docker: ``` docker-compose up</span><br></pre></td></tr></table></figure><p>Access the mysql db with command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -p findeasily  --protocol=tcp -u root -p</span><br></pre></td></tr></table></figure></p><p>for the first docker-compose1.yml.</p><p>And for second docker-compose2.yml, we can access the mysql database with<br>Command like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br><span class="line">mysql -P 8083 --protocol=tcp -u root -p</span><br></pre></td></tr></table></figure></p><p>– Running a Postgres using docker<br>Command lines:</p><h5 id="laungch-a-docker-container"><a href="#laungch-a-docker-container" class="headerlink" title="laungch a docker container"></a>laungch a docker container</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Create the docker container over a specific image</span><br><span class="line">docker create -v /var/lib/postgresql/data --name postgres10.3-database alpine</span><br></pre></td></tr></table></figure><p>if we already have the docker container running, then we can just launch an images and if there is not<br>local image it will pull from remote community server. </p><p>Let’s now run a specific process in the container. This is going to be postgres. Here are the operations are broken down:<br>We’re naming the container local-postgres10.3.<br>Set the password to “password” using the environment tag -e.<br>Set the port to 5432 so we can access it from Postico later using -p.<br>The –volumes-from tells the container to mount the /var/lib/postgresql/data volume from the postgres10.3-database container that we created in the previous step.</p><p>Lastly, use postgres:10.3 to launch the container.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name local-postgres10.3 -p 5432:5432 -e POSTGRES_PASSWORD=password -d --volumes-from postgres10.3-database postgres:10.3</span><br></pre></td></tr></table></figure><p>this is running the images base on postgres in local, so since we do not have local-postgres10.3 images, it will just pull the image from remote and then we can run the image by the image id.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run dsf3edfdsfw</span><br></pre></td></tr></table></figure></p><p>like that, so right now we running the postgres db in the docker, we can check by <figure class="highlight docker"><figcaption><span>ps ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">now when we access the db by psql command, we can take like:</span><br><span class="line"> ``` docker exec -it cocky_varahamihira psql -U postgres</span><br></pre></td></tr></table></figure></p><p> This is meaning that:</p><p> docker exec command psql in database name as cocky_varahamihira.</p><p>Notes: we don’t need to do like<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run --name local-postgres10.3 -p 5432:5432 -e POSTGRES_PASSWORD=password -d --volumes-from postgres10.3-database postgres:10.3</span><br><span class="line">&gt;&gt; Get into it</span><br><span class="line">psql -h localhost -p 5432 -U postgres</span><br><span class="line">&gt;&gt;</span><br><span class="line">Password for user postgres:</span><br><span class="line">psql (10.3 (Debian 10.3-1.pgdg90+1))</span><br><span class="line">Type &quot;help&quot; for help.</span><br><span class="line">postgres=#</span><br></pre></td></tr></table></figure></p><p>Cauz it will run psql in local compouter instead of running in docker. so you will get in trouble of<br>install psql in your local computer, that will be not good I think. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;Dockerize MySQL server&lt;br&gt;A. launch a docker in local&lt;br&gt;B. Hosting the MySQL server in Docker container in IMAGE&lt;br&gt;C. Listening t
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://pengw00.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Difference between patch and put in http request</title>
    <link href="http://pengw00.github.io/2019/08/31/Difference-between-patch-and-put-in-http-request/"/>
    <id>http://pengw00.github.io/2019/08/31/Difference-between-patch-and-put-in-http-request/</id>
    <published>2019-08-31T21:41:31.000Z</published>
    <updated>2019-09-01T16:44:47.734Z</updated>
    
    <content type="html"><![CDATA[<p>One explaining:<br>HTTP PUT method only allows a complete replacement of a document. A PATCH request on the other hand, is used to make changes to part of the resource at a location.</p><p>Second Explaining:<br>PATCH is a method which enclosed entity contains a set of instructions describing how a resource currently residing on the origin server should be modified to produce a new version. patch : patch request says . only send the data which one you want to update and it won’t effecting or changing other data</p><p>Third explaining:<br>The main difference between the PUT and PATCH method is that the PUT method uses the request URI to supply a modified version of the requested resource which replaces the original version of the resource whereas the PATCH method supplies a set of instructions to modify the resource.</p><p>Medium:<br> a PUT request always contains a full resource. This is necessary because, a necessary quality of PUT requests is idempotence — the quality of producing the same result even if the same request is made multiple times.</p><p> We could simply choose to send the data we need and have our server code update resources appropriately, but then, we’d loose the idempotence and its benefits such as reliable caching of responses on the network and reliable updates of resources from retries when the original request fails. </p><p> EDIT: Responses to PUT requests are not cacheable. If a PUT request finds a response in a cache infrastructure, that response (cache entry) should be treated as stale.<br>Patch:<br> A PATCH request on the other hand, is used to make changes to part of the resource at a location. That is, it PATCHES the resource — changing its properties. It is used to make minor updates to resources and it’s not required to be idempotent.</p><p> If we continue with our example above, we could easily add a new window to the house on plot 1 without having to ship a whole new house. All we have to do is ship the window and PATCH up the old house with a new window. Below is an example of the payload we’d have to send.<br> put:<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  address: &apos;plot 1&apos;,</span><br><span class="line">  owner: &apos;segun&apos;,</span><br><span class="line">  type: &apos;duplex&apos;,</span><br><span class="line">  color: &apos;green&apos;,</span><br><span class="line">  rooms: &apos;5&apos;,</span><br><span class="line">  kitchens: &apos;1&apos;,</span><br><span class="line">  windows: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>patch:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> windows: 21</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Since-PATCH-is-not-idempotent-failed-requests-are-not-automatically-re-attempted-on-the-network-Also-if-a-PATCH-request-is-made-to-a-non-existent-url-e-g-attempting-to-replace-the-front-door-of-a-non-existent-building-it-should-simply-fail-without-creating-a-new-resource-unlike-PUT-which-would-create-a-new-one-using-the-payload-Come-to-think-of-it-it’ll-be-odd-having-a-lone-door-at-a-house-address"><a href="#Since-PATCH-is-not-idempotent-failed-requests-are-not-automatically-re-attempted-on-the-network-Also-if-a-PATCH-request-is-made-to-a-non-existent-url-e-g-attempting-to-replace-the-front-door-of-a-non-existent-building-it-should-simply-fail-without-creating-a-new-resource-unlike-PUT-which-would-create-a-new-one-using-the-payload-Come-to-think-of-it-it’ll-be-odd-having-a-lone-door-at-a-house-address" class="headerlink" title="Since PATCH is not idempotent, failed requests are not automatically re-attempted on the network. Also, if a PATCH request is made to a non-existent url e.g attempting to replace the front door of a non-existent building, it should simply fail without creating a new resource unlike PUT, which would create a new one using the payload. Come to think of it, it’ll be odd having a lone door at a house address"></a>Since PATCH is not idempotent, failed requests are not automatically re-attempted on the network. Also, if a PATCH request is made to a non-existent url e.g attempting to replace the front door of a non-existent building, it should simply fail without creating a new resource unlike PUT, which would create a new one using the payload. Come to think of it, it’ll be odd having a lone door at a house address</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One explaining:&lt;br&gt;HTTP PUT method only allows a complete replacement of a document. A PATCH request on the other hand, is used to make c
      
    
    </summary>
    
    
      <category term="Http" scheme="http://pengw00.github.io/tags/Http/"/>
    
  </entry>
  
  <entry>
    <title>leetcode.975 Odd Even Jump</title>
    <link href="http://pengw00.github.io/2019/08/01/leetcode-975-Odd-Even-Jump/"/>
    <id>http://pengw00.github.io/2019/08/01/leetcode-975-Odd-Even-Jump/</id>
    <published>2019-08-02T04:39:43.000Z</published>
    <updated>2019-08-02T05:47:28.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dynamic-Programming"><a href="#dynamic-Programming" class="headerlink" title="dynamic Programming"></a>dynamic Programming</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public int oddEvenJumps(int[] A) &#123;</span><br><span class="line">        int N = A.length;</span><br><span class="line">        if (N &lt;= 1) return N;</span><br><span class="line">        boolean[] odd = new boolean[N];</span><br><span class="line">        boolean[] even = new boolean[N];</span><br><span class="line">        odd[N-1] = even[N-1] = true;</span><br><span class="line"></span><br><span class="line">        TreeMap&lt;Integer, Integer&gt; vals = new TreeMap();</span><br><span class="line">        vals.put(A[N-1], N-1);</span><br><span class="line">        for (int i = N-2; i &gt;= 0; --i) &#123;</span><br><span class="line">            int v = A[i];</span><br><span class="line">            if (vals.containsKey(v)) &#123;</span><br><span class="line">                odd[i] = even[vals.get(v)];</span><br><span class="line">                even[i] = odd[vals.get(v)];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Integer lower = vals.lowerKey(v);</span><br><span class="line">                Integer higher = vals.higherKey(v);</span><br><span class="line"></span><br><span class="line">                if (lower != null)</span><br><span class="line">                    even[i] = odd[vals.get(lower)];</span><br><span class="line">                if (higher != null) &#123;</span><br><span class="line">                    odd[i] = even[vals.get(higher)];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            vals.put(v, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int ans = 0;</span><br><span class="line">        for (boolean b: odd)</span><br><span class="line">            if (b) ans++;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;dynamic-Programming&quot;&gt;&lt;a href=&quot;#dynamic-Programming&quot; class=&quot;headerlink&quot; title=&quot;dynamic Programming&quot;&gt;&lt;/a&gt;dynamic Programming&lt;/h2&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Contest 147 Jul 27 2019</title>
    <link href="http://pengw00.github.io/2019/07/28/Leetcode-Contest-147-Jul-27-2019/"/>
    <id>http://pengw00.github.io/2019/07/28/Leetcode-Contest-147-Jul-27-2019/</id>
    <published>2019-07-28T15:13:37.000Z</published>
    <updated>2019-07-28T15:24:35.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="No-1-DP-problem"><a href="#No-1-DP-problem" class="headerlink" title="No.1 DP problem"></a>No.1 DP problem</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int tribonacci(int n) &#123;</span><br><span class="line">        if(n==0) return 0;</span><br><span class="line">        if(n==1) return 1;</span><br><span class="line">        if(n==2) return 1;</span><br><span class="line">        int[] dp = new int[n+1];</span><br><span class="line">        dp[0] = 0;</span><br><span class="line">        dp[1] = 1;</span><br><span class="line">        dp[2] = 1;</span><br><span class="line">        for(int i = 3; i &lt;= n; i++)&#123;</span><br><span class="line">            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="No-2-Alphebatic"><a href="#No-2-Alphebatic" class="headerlink" title="No.2 Alphebatic"></a>No.2 Alphebatic</h3><p>//Be careful to process from the<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string alphabetBoardPath(string target) &#123;</span><br><span class="line">        int r = 0, c = 0;</span><br><span class="line">        string moves = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        for (char letter : target) &#123;</span><br><span class="line">            int row = (letter - &apos;a&apos;) / 5, col = (letter - &apos;a&apos;) % 5;</span><br><span class="line"></span><br><span class="line">            while (c &gt; col) &#123;</span><br><span class="line">                moves += &apos;L&apos;;</span><br><span class="line">                c--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            while (r &gt; row) &#123;</span><br><span class="line">                moves += &apos;U&apos;;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            while (r &lt; row) &#123;</span><br><span class="line">                moves += &apos;D&apos;;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            while (c &lt; col) &#123;</span><br><span class="line">                moves += &apos;R&apos;;</span><br><span class="line">                c++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            moves += &apos;!&apos;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return moves;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="No-3-Most-number-of-Largest-grid-border"><a href="#No-3-Most-number-of-Largest-grid-border" class="headerlink" title="No.3 Most number of Largest grid border"></a>No.3 Most number of Largest grid border</h3><p>// accumulated grid solution </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int findLargestSquare(vector&lt;vector&lt;int&gt;&gt;&amp; mat) </span><br><span class="line">    &#123; </span><br><span class="line">    int max = 0; int m = mat.size() , n = mat[0].size();</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; hor(m,vector&lt;int&gt; (n,0)) , ver(m,vector&lt;int&gt; (n,0));</span><br><span class="line">   </span><br><span class="line">    for (int i=0; i&lt;m; i++) &#123; </span><br><span class="line">        for (int j=0; j&lt;n; j++) &#123; </span><br><span class="line">            if (mat[i][j] == 1) </span><br><span class="line">            &#123; </span><br><span class="line">                hor[i][j] = (j==0)? 1: hor[i][j-1] + 1;   // auxillary horizontal array</span><br><span class="line">                ver[i][j] = (i==0)? 1: ver[i-1][j] + 1;  // auxillary vertical array</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">        </span><br><span class="line">    for (int i = m-1; i&gt;=0; i--) &#123; </span><br><span class="line">        for (int j = n-1; j&gt;=0; j--) &#123; </span><br><span class="line">            int small = min(hor[i][j], ver[i][j]);  // choose smallest of horizontal and vertical value</span><br><span class="line">            while (small &gt; max) &#123; </span><br><span class="line">                if (ver[i][j-small+1] &gt;= small &amp;&amp;  hor[i-small+1][j] &gt;= small)  // check if square exists with &apos;small&apos; length</span><br><span class="line">                    max = small; </span><br><span class="line">                small--; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    return max*max; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;No-1-DP-problem&quot;&gt;&lt;a href=&quot;#No-1-DP-problem&quot; class=&quot;headerlink&quot; title=&quot;No.1 DP problem&quot;&gt;&lt;/a&gt;No.1 DP problem&lt;/h3&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode.528 Random Pick with Weight</title>
    <link href="http://pengw00.github.io/2019/07/25/leetcode-528-Random-Pick-with-Weight/"/>
    <id>http://pengw00.github.io/2019/07/25/leetcode-528-Random-Pick-with-Weight/</id>
    <published>2019-07-25T05:15:39.000Z</published>
    <updated>2019-07-25T05:19:11.827Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JS-version"><a href="#JS-version" class="headerlink" title="JS version"></a>JS version</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var solution = function(w)&#123;</span><br><span class="line">this.map = new Map();</span><br><span class="line">this.sum = 0;</span><br><span class="line">for(let i = 0; i &lt; w.length; i++)&#123;</span><br><span class="line">this.sum += w[i];</span><br><span class="line">this.map.set(this.sum, i);</span><br><span class="line">this.keys = [...this.map.keys()].sort((a, b) =&gt; a-b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">solution.prototype.pickIndex = function()&#123;</span><br><span class="line">const r = parseInt(Math.random() * this.sum);</span><br><span class="line">for(const key of this.keys)&#123;</span><br><span class="line">if(r &lt; key)&#123;</span><br><span class="line">return this.map.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;JS-version&quot;&gt;&lt;a href=&quot;#JS-version&quot; class=&quot;headerlink&quot; title=&quot;JS version&quot;&gt;&lt;/a&gt;JS version&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode_Contest_146</title>
    <link href="http://pengw00.github.io/2019/07/21/Leetcode-Contest-146/"/>
    <id>http://pengw00.github.io/2019/07/21/Leetcode-Contest-146/</id>
    <published>2019-07-22T03:14:20.000Z</published>
    <updated>2019-07-23T03:50:37.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1128-Number-of-Equivalent-Domino-Pairs"><a href="#1128-Number-of-Equivalent-Domino-Pairs" class="headerlink" title="1128. Number of Equivalent Domino Pairs"></a>1128. Number of Equivalent Domino Pairs</h2><p>check a list of dominoes, to see the number of pairs.<br>Ex: Input: dominoes = [[1, 2], [2,1], [3, 4], [5, 6]];<br>Outout: 1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">int numEquivDominoPairs(vector&lt;vector&lt;int&gt;&gt;&amp; dominoes)&#123;</span><br><span class="line">map&lt;pair&lt;int, int&gt;, int&gt; freq;</span><br><span class="line">long long total = 0;</span><br><span class="line">for(vector&lt;int&gt; domino: dominoes)&#123;</span><br><span class="line">if(domino[0] &gt; domino[1])&#123;</span><br><span class="line">swap(domino[0], domino[1]);</span><br><span class="line">&#125;</span><br><span class="line">total += freq[make_pair(domino[0], domino[1])]++;</span><br><span class="line">&#125; </span><br><span class="line">return total;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="leetcode-1129-Shortest-Path-with-Alternating-Colors"><a href="#leetcode-1129-Shortest-Path-with-Alternating-Colors" class="headerlink" title="leetcode.1129 Shortest Path with Alternating Colors"></a>leetcode.1129 Shortest Path with Alternating Colors</h2><p>BFS: 1 = red, 2 = blue, 0 = root-edge(special case)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public int[] shortestAlternatingPaths(int n, int[][] red_edges, int[][] blue_edges)&#123;</span><br><span class="line">List&lt;Integer&gt;[] res = new ArrayList[n], blues = new ArrayList[n];</span><br><span class="line">for(int[] e: red_edges)&#123;</span><br><span class="line">if(reds[e[0]]==null) reds[e[0]] = new ArrayList&lt;&gt;();</span><br><span class="line">reds[e[0]].add(e[1]);</span><br><span class="line"> &#125;</span><br><span class="line"> for(int[] e: blue_edges)&#123;</span><br><span class="line"> if(blues[e[0]]==null) blue[e[0]] = new ArrayList&lt;&gt;();</span><br><span class="line"> blues[e[0]].add(e[1]);</span><br><span class="line"> &#125;</span><br><span class="line"> Queue&lt;int[]&gt; q = new LinkedList&lt;&gt;();</span><br><span class="line"> int[] res = new int[n];</span><br><span class="line"> Arrays.fill(res, -1);</span><br><span class="line"> q.add(new int[]&#123;0, 0&#125;);</span><br><span class="line"> int moves = 0;</span><br><span class="line"> Set&lt;String&gt; seen = new HashSet&lt;&gt;();</span><br><span class="line"> while(!q.isEmpty())&#123;</span><br><span class="line"> int size = queue.size()&#123;</span><br><span class="line"> for(int i = 0; i &lt; size; i++)&#123;</span><br><span class="line"> int curr = q.remove();</span><br><span class="line"> String key = curr[0] + &quot; &quot; + curr[1];</span><br><span class="line"> if(seen.contains(key)) continue;</span><br><span class="line"> seen.add(key);</span><br><span class="line"> if(curr[1] == 2 || curr[1] == 0)</span><br><span class="line"> if(reds[curr[0]] != null)&#123;</span><br><span class="line"> for(int child: reds[curr[0]])</span><br><span class="line"> q.add(new int[]&#123;child, 1&#125;);</span><br><span class="line"> &#125; </span><br><span class="line"> if(curr[1]==1 || curr[1] == 0)</span><br><span class="line"> if(blues[curr[0]] != null)</span><br><span class="line"> for(int child: blues[curr[0]])</span><br><span class="line"> q.add(new int[]&#123;child, 2&#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> moves++;</span><br><span class="line"> &#125;</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Leetcode popular answers. initialize all nodes as unreachable(-1)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1128-Number-of-Equivalent-Domino-Pairs&quot;&gt;&lt;a href=&quot;#1128-Number-of-Equivalent-Domino-Pairs&quot; class=&quot;headerlink&quot; title=&quot;1128. Number of 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode.76 Minimum window string</title>
    <link href="http://pengw00.github.io/2019/06/29/leetcode-76-Minimum-window-string/"/>
    <id>http://pengw00.github.io/2019/06/29/leetcode-76-Minimum-window-string/</id>
    <published>2019-06-29T14:13:56.000Z</published>
    <updated>2019-06-29T14:39:31.167Z</updated>
    
    <content type="html"><![CDATA[<p>This Pro, at the first time I think of two pointer construct slidding windows, using map<br>but I find that it is so hard to continue with keep track of the status of  T string in the map. </p><p>the idea is constructed a window, using two pointer, begin &amp; end, end go forward, when the windows first contain the target word, begin pointer start go right, and once the map[c] ==0, it means that this char is from T. so we make map[c]++, and invalid the counter for next window.<br>the core code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">string minWindow(string s, string t)&#123;</span><br><span class="line">vector&lt;int&gt; map(128, 0);</span><br><span class="line">for(auto c: t) map[c]++;</span><br><span class="line">int counter = t.size(), begin = 0, end = 0, d = INT_MAX, head = 0;</span><br><span class="line">while(end &lt; s.size())&#123;</span><br><span class="line">if(map[s[end++]]-- &gt; 0) counter--; //this is hard to read, it means that every time it will //decrease</span><br><span class="line">while(counter==0)&#123;</span><br><span class="line">if(end-begin &lt; d) d = end - (head = begin);</span><br><span class="line">if(map[s[begin++]]++==0) counter++; //invalid the counter</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return d==INT_MAX?&quot;&quot;:s.substr(head, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>// here is the template for most substr problem using sliding window solution:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">int findSubstring(string s)&#123;</span><br><span class="line">        vector&lt;int&gt; map(128,0);</span><br><span class="line">        int counter; // check whether the substring is valid</span><br><span class="line">        int begin=0, end=0; //two pointers, one point to tail and one  head</span><br><span class="line">        int d; //the length of substring</span><br><span class="line"></span><br><span class="line">        for() &#123; /* initialize the hash map here */ &#125;</span><br><span class="line"></span><br><span class="line">        while(end&lt;s.size())&#123;</span><br><span class="line"></span><br><span class="line">            if(map[s[end++]]-- ?)&#123;  /* modify counter here */ &#125;</span><br><span class="line"></span><br><span class="line">            while(/* counter condition */)&#123; </span><br><span class="line">                 </span><br><span class="line">                 /* update d here if finding minimum*/</span><br><span class="line"></span><br><span class="line">                //increase begin to make it invalid/valid again</span><br><span class="line">                </span><br><span class="line">                if(map[s[begin++]]++ ?)&#123; /*modify counter here*/ &#125;</span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            /* update d here if finding maximum*/</span><br><span class="line">        &#125;</span><br><span class="line">        return d;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>//One thing needs to be mentioned is that when asked to find maximum substring, we should update maximum after the inner while loop to guarantee that the substring is valid. On the other hand, when asked to find minimum substring, we should update minimum inside the inner while loop.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int lengthOfLongestSubstring(string s) &#123;</span><br><span class="line">        vector&lt;int&gt; map(128,0);</span><br><span class="line">        int counter=0, begin=0, end=0, d=0; </span><br><span class="line">        while(end&lt;s.size())&#123;</span><br><span class="line">            if(map[s[end++]]++&gt;0) counter++; </span><br><span class="line">            while(counter&gt;0) if(map[s[begin++]]--&gt;1) counter--;</span><br><span class="line">            d=max(d, end-begin); //while valid, update d</span><br><span class="line">        &#125;</span><br><span class="line">        return d;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This Pro, at the first time I think of two pointer construct slidding windows, using map&lt;br&gt;but I find that it is so hard to continue wit
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://pengw00.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Dry:Don&#39;t Repeat Yourself</title>
    <link href="http://pengw00.github.io/2019/06/11/Dry-Don-t-Repeat-Yourself/"/>
    <id>http://pengw00.github.io/2019/06/11/Dry-Don-t-Repeat-Yourself/</id>
    <published>2019-06-12T04:21:59.000Z</published>
    <updated>2019-06-12T04:23:05.960Z</updated>
    
    <content type="html"><![CDATA[<p>Don’t repeat yourself (DRY, or sometimes do not repeat yourself) is a principle of software development aimed at reducing repetition of software patterns,[1] replacing it with abstractions or using data normalization to avoid redundancy.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Don’t repeat yourself (DRY, or sometimes do not repeat yourself) is a principle of software development aimed at reducing repetition of s
      
    
    </summary>
    
    
      <category term="DesignPattern" scheme="http://pengw00.github.io/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 987. Vertical Order Traversal of a Binary Tree</title>
    <link href="http://pengw00.github.io/2019/06/09/Leetcode-987-Vertical-Order-Traversal-of-a-Binary-Tree/"/>
    <id>http://pengw00.github.io/2019/06/09/Leetcode-987-Vertical-Order-Traversal-of-a-Binary-Tree/</id>
    <published>2019-06-09T20:28:10.000Z</published>
    <updated>2019-06-09T19:28:10.254Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
